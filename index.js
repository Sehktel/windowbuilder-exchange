module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metadataCore = __webpack_require__(6);

var _metadataCore2 = _interopRequireDefault(_metadataCore);

var _metadataPouchdb = __webpack_require__(7);

var _metadataPouchdb2 = _interopRequireDefault(_metadataPouchdb);

var _app = __webpack_require__(8);

var _app2 = _interopRequireDefault(_app);

var _init = __webpack_require__(9);

var _init2 = _interopRequireDefault(_init);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// модификаторы data-объектов
//import modifiers from './modifiers';

const debug = __webpack_require__(0)('wb:meta');

// конструктор MetaEngine

const MetaEngine = _metadataCore2.default.plugin(_metadataPouchdb2.default);

// функция установки параметров сеанса


// функция инициализации структуры метаданных


debug('required');

// создаём контекст MetaEngine
const $p = global.$p = new MetaEngine();
debug('created');

// параметры сеанса инициализируем сразу
$p.wsql.init(_app2.default);

// инициализируем параметры сеанса и метаданные
(async () => {

  // реквизиты подключения к couchdb
  const { user_node } = (0, _app2.default)();

  // выполняем скрипт инициализации метаданных
  (0, _init2.default)($p);

  // сообщяем адаптерам пути, суффиксы и префиксы
  const { wsql, job_prm, adapters } = $p;
  adapters.pouch.init(wsql, job_prm);

  // подключим модификаторы
  //modifiers($p);
  //debug('inited & modified');
  debug('inited');

  // загружаем кешируемые справочники в ram и начинаем следить за изменениями ram
  const { pouch } = $p.adapters;
  pouch.log_in(user_node.username, user_node.password).then(() => pouch.load_data()).catch(err => debug(err));

  pouch.on({
    user_log_in(name) {
      debug(`logged in ${$p.job_prm.couch_local}, user:${name}, zone:${$p.job_prm.zone}`);
    },
    user_log_fault(err) {
      debug(`login error ${err}`);
    },
    pouch_load_start(page) {
      debug('loadind to ram: start');
    },
    pouch_data_page(page) {
      debug(`loadind to ram: page №${page.page} (${page.page * page.limit} from ${page.total_rows})`);
    },
    pouch_complete_loaded(page) {
      debug(`ready to receive queries, listen on port: ${process.env.PORT || 3021}`);
    },
    pouch_doc_ram_loaded() {
      pouch.local.ram.changes({
        since: 'now',
        live: true,
        include_docs: true
      }).on('change', change => {
        // формируем новый
        pouch.load_changes({ docs: [change.doc] });
      }).on('error', err => {
        debug(`change error ${err}`);
      });
      debug(`loadind to ram: READY`);
      // обычно, это событие генерирует модуль pricing после загрузки цен, но в данном сервисе цены не нужны
      pouch.emit('pouch_complete_loaded');
    }
  });
})();

exports.default = $p;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("node-fetch");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _log = __webpack_require__(5);

var _log2 = _interopRequireDefault(_log);

var _router = __webpack_require__(12);

var _router2 = _interopRequireDefault(_router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.DEBUG = 'wb:,-not_this';

const Koa = __webpack_require__(22);
const app = new Koa();

// Register the cors as Koa middleware
const cors = __webpack_require__(23);
app.use(cors({ credentials: true, maxAge: 600 }));

// Register the logger as Koa middleware

app.use(_log2.default);

// Register the router as Koa middleware

app.use(_router2.default.middleware());

app.listen(process.env.PORT || 3021);
app.restrict_ips = process.env.IPS ? process.env.IPS.split(',') : [];

exports.default = app;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metadata = __webpack_require__(1);

var _metadata2 = _interopRequireDefault(_metadata);

var _auth = __webpack_require__(10);

var _auth2 = _interopRequireDefault(_auth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 *
 * @module log
 *
 * Created by Evgeniy Malyarov on 23.09.2017.
 */

function getBody(req) {
  return new Promise((resolve, reject) => {
    let data = '';
    req.on('data', chunk => data += chunk);
    req.on('end', chunk => {
      if (data.length > 0 && data.charCodeAt(0) == 65279) {
        data = data.substr(1);
      }
      resolve(data);
    });
  });
}

async function saveLog({ _id, log, start, body }) {
  const { doc } = _metadata2.default.adapters.pouch.remote;
  return doc.get(_id).catch(err => {
    if (err.status == 404) {
      return { _id, rows: [] };
    }
  }).then(rev => {
    if (rev) {
      log.response = body || '';
      log.duration = Date.now() - parseInt(start.format('x'), 10);
      if (rev.events) {
        rev.rows = rev.events;
        delete rev.events;
      }
      rev.rows.push(log);
      return doc.put(rev);
    }
  });
}

exports.default = async (ctx, next) => {

  if (ctx.method !== 'GET' && ctx.method !== 'POST') {
    return next();
  }

  // request
  const { moment } = _metadata2.default.utils;
  const start = moment();

  // проверяем ограничение по ip и авторизацию
  ctx._auth = await (0, _auth2.default)(ctx, _metadata2.default);
  const _id = `_local/log.exchange.${ctx._auth && ctx._auth.suffix || '0000'}.${start.format('YYYYMMDD')}`;

  // собираем объект лога
  const log = {
    start: start.format('HH:mm:ss'),
    url: ctx.originalUrl,
    method: ctx.method,
    ip: ctx.req.headers['x-real-ip'] || ctx.ip,
    //headers: Object.keys(ctx.req.headers).map((key) => [key, ctx.req.headers[key]]),
    headers: ctx.req.headers
  };

  if (ctx._auth) {
    try {
      // тело запроса анализируем только для авторизованных пользователей
      log.post_data = await getBody(ctx.req);
      ctx._query = log.post_data.length > 0 ? JSON.parse(log.post_data) : {};
      // передаём управление основной задаче
      await next();
      // по завершению, записываем лог
      saveLog({ _id, log, start, body: log.url.indexOf('/log') === -1 ? ctx.body : 'log information before this request' });
    } catch (err) {
      // в случае ошибки, так же, записываем лог
      log.error = err.message;
      saveLog({ _id, log, start });
      throw err;
    }
  } else {
    // для неавторизованных пользователей записываем лог
    log.error = 'unauthorized';
    saveLog({ _id, log, start, body: ctx.body });
  }
};

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("metadata-core");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("metadata-pouchdb");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * ### При установке параметров сеанса
 * Процедура устанавливает параметры работы программы при старте веб-приложения
 *
 * @param prm {Object} - в свойствах этого объекта определяем параметры работы программы
 */
module.exports = function settings(prm) {

    return Object.assign(prm || {}, {

        // разделитель для localStorage
        local_storage_prefix: "wb_",

        // гостевые пользователи для демо-режима
        guests: [],

        // расположение couchdb
        couch_path: process.env.COUCHPATH || process.env.COUCHLOCAL || "http://localhost:5984/wb_",

        // расположение couchdb для nodejs
        couch_local: process.env.COUCHLOCAL || "http://localhost:5984/wb_",

        couch_direct: true,

        // авторизация couchdb
        user_node: {
            username: process.env.DBUSER || 'admin',
            password: process.env.DBPWD || 'admin'
        },

        pouch_filter: {
            meta: "auth/meta"
        },

        // по умолчанию, обращаемся к зоне 21
        zone: process.env.ZONE || 21,

        // объявляем номер демо-зоны
        zone_demo: 1,

        // если use_meta === false, не используем базу meta в рантайме
        // см.: https://github.com/oknosoft/metadata.js/issues/255
        use_meta: false,

        // размер вложений
        attachment_max_size: 10000000

    });
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */module.exports=function meta($p){$p.wsql.alasql('USE md; CREATE TABLE IF NOT EXISTS `ireg_margin_coefficients` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, `price_group` CHAR, `key` CHAR, `condition_formula` CHAR, `marginality` FLOAT, `marginality_min` FLOAT, `marginality_internal` FLOAT, `price_type_first_cost` CHAR, `price_type_sale` CHAR, `price_type_internal` CHAR, `formula` CHAR, `sale_formula` CHAR, `internal_formula` CHAR, `external_formula` CHAR, `extra_charge_external` FLOAT, `discount_external` FLOAT, `discount` FLOAT, `note` CHAR); CREATE TABLE IF NOT EXISTS `ireg_currency_courses` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, `currency` CHAR, `period` Date, `course` FLOAT, `multiplicity` INT); CREATE TABLE IF NOT EXISTS `ireg_log_view` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, `key` CHAR, `user` CHAR); CREATE TABLE IF NOT EXISTS `ireg_log` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, `date` INT, `sequence` INT, `class` CHAR, `note` CHAR, `obj` CHAR, `user` CHAR); CREATE TABLE IF NOT EXISTS `doc_planning_event` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `phase` CHAR, `key` CHAR, `recipient` CHAR, `trans` CHAR, `partner` CHAR, `project` CHAR, `Основание` CHAR, `note` CHAR, `ts_executors` JSON, `ts_planning` JSON); CREATE TABLE IF NOT EXISTS `doc_nom_prices_setup` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `price_type` CHAR, `currency` CHAR, `responsible` CHAR, `note` CHAR, `ts_goods` JSON); CREATE TABLE IF NOT EXISTS `doc_selling` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `warehouse` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_goods` JSON, `ts_services` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_credit_cash_order` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `cashbox` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_payment_details` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_debit_cash_order` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `cashbox` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_payment_details` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_credit_bank_order` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_payment_details` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_debit_bank_order` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_payment_details` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_work_centers_performance` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `start_date` Date, `expiration_date` Date, `responsible` CHAR, `note` CHAR, `ts_planning` JSON); CREATE TABLE IF NOT EXISTS `doc_credit_card_order` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_payment_details` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_calc_order` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `number_internal` CHAR, `project` CHAR, `organization` CHAR, `partner` CHAR, `client_of_dealer` CHAR, `contract` CHAR, `bank_account` CHAR, `note` CHAR, `manager` CHAR, `leading_manager` CHAR, `department` CHAR, `warehouse` CHAR, `doc_amount` FLOAT, `amount_operation` FLOAT, `amount_internal` FLOAT, `accessory_characteristic` CHAR, `sys_profile` CHAR, `sys_furn` CHAR, `phone` CHAR, `delivery_area` CHAR, `shipping_address` CHAR, `coordinates` CHAR, `address_fields` CHAR, `difficult` BOOLEAN, `vat_consider` BOOLEAN, `vat_included` BOOLEAN, `settlements_course` FLOAT, `settlements_multiplicity` INT, `extra_charge_external` FLOAT, `obj_delivery_state` CHAR, `category` CHAR, `ts_production` JSON, `ts_extra_fields` JSON, `ts_contact_information` JSON, `ts_planning` JSON); CREATE TABLE IF NOT EXISTS `doc_work_centers_task` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `key` CHAR, `recipient` CHAR, `biz_cuts` CHAR, `responsible` CHAR, `note` CHAR, `ts_planning` JSON, `ts_demand` JSON, `ts_cuts` JSON, `ts_cutting` JSON); CREATE TABLE IF NOT EXISTS `doc_purchase` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `organization` CHAR, `partner` CHAR, `department` CHAR, `warehouse` CHAR, `doc_amount` FLOAT, `responsible` CHAR, `note` CHAR, `ts_goods` JSON, `ts_services` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `doc_registers_correction` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, posted boolean, date Date, number_doc CHAR, `original_doc_type` CHAR, `responsible` CHAR, `note` CHAR, `partner` CHAR, `ts_registers_table` JSON); CREATE TABLE IF NOT EXISTS `cat_delivery_directions` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `predefined_name` CHAR, `ts_composition` JSON); CREATE TABLE IF NOT EXISTS `cat_nonstandard_attributes` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `crooked` BOOLEAN, `colored` BOOLEAN, `lay` BOOLEAN, `made_to_order` BOOLEAN, `packing` BOOLEAN, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_insert_bind` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `key` CHAR, `captured` BOOLEAN, `editor` CHAR, `zone` INT, `zones` CHAR, `predefined_name` CHAR, `ts_production` JSON, `ts_inserts` JSON); CREATE TABLE IF NOT EXISTS `cat_nom_groups` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `vat_rate` CHAR, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_price_groups` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `definition` CHAR, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_characteristics` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `x` FLOAT, `y` FLOAT, `z` FLOAT, `s` FLOAT, `clr` CHAR, `weight` FLOAT, `calc_order` CHAR, `product` INT, `leading_product` CHAR, `leading_elm` INT, `origin` CHAR, `base_block` CHAR, `sys` CHAR, `note` CHAR, `obj_delivery_state` CHAR, `partner` CHAR, `department` CHAR, `builder_props` CHAR, `svg` CHAR, `predefined_name` CHAR, `owner` CHAR, `ts_constructions` JSON, `ts_coordinates` JSON, `ts_inserts` JSON, `ts_params` JSON, `ts_cnn_elmnts` JSON, `ts_glass_specification` JSON, `ts_extra_fields` JSON, `ts_glasses` JSON, `ts_specification` JSON); CREATE TABLE IF NOT EXISTS `cat_individuals` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `birth_date` Date, `inn` CHAR, `imns_code` CHAR, `note` CHAR, `pfr_number` CHAR, `sex` CHAR, `birth_place` CHAR, `ОсновноеИзображение` CHAR, `Фамилия` CHAR, `Имя` CHAR, `Отчество` CHAR, `ФамилияРП` CHAR, `ИмяРП` CHAR, `ОтчествоРП` CHAR, `ОснованиеРП` CHAR, `ДолжностьРП` CHAR, `Должность` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_contact_information` JSON); CREATE TABLE IF NOT EXISTS `cat_nom_prices_types` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `price_currency` CHAR, `discount_percent` FLOAT, `vat_price_included` BOOLEAN, `rounding_order` CHAR, `rounding_in_a_big_way` BOOLEAN, `note` CHAR, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_cash_flow_articles` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `definition` CHAR, `sorting_field` INT, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_stores` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `note` CHAR, `department` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_projects` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `start` Date, `finish` Date, `launch` Date, `readiness` Date, `finished` BOOLEAN, `responsible` CHAR, `note` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_users` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `invalid` BOOLEAN, `department` CHAR, `individual_person` CHAR, `note` CHAR, `ancillary` BOOLEAN, `user_ib_uid` CHAR, `user_fresh_uid` CHAR, `id` CHAR, `prefix` CHAR, `branch` CHAR, `push_only` BOOLEAN, `suffix` CHAR, `direct` BOOLEAN, `ts_extra_fields` JSON, `ts_contact_information` JSON, `ts_acl_objs` JSON); CREATE TABLE IF NOT EXISTS `cat_divisions` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `main_project` CHAR, `sorting_field` INT, `predefined_name` CHAR, `parent` CHAR, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_color_price_groups` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `color_price_group_destination` CHAR, `predefined_name` CHAR, `ts_price_groups` JSON, `ts_clr_conformity` JSON); CREATE TABLE IF NOT EXISTS `cat_cnns` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `priority` INT, `amin` INT, `amax` INT, `sd1` CHAR, `sz` FLOAT, `cnn_type` CHAR, `ahmin` INT, `ahmax` INT, `lmin` INT, `lmax` INT, `tmin` INT, `tmax` INT, `var_layers` BOOLEAN, `for_direct_profile_only` INT, `art1vert` BOOLEAN, `art1glass` BOOLEAN, `art2glass` BOOLEAN, `note` CHAR, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR, `ts_specification` JSON, `ts_cnn_elmnts` JSON, `ts_selection_params` JSON); CREATE TABLE IF NOT EXISTS `cat_delivery_areas` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `country` CHAR, `region` CHAR, `city` CHAR, `latitude` FLOAT, `longitude` FLOAT, `ind` CHAR, `delivery_area` CHAR, `specify_area_by_geocoder` BOOLEAN, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_production_params` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `default_clr` CHAR, `clr_group` CHAR, `tmin` INT, `tmax` INT, `allow_open_cnn` BOOLEAN, `flap_pos_by_impost` BOOLEAN, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_elmnts` JSON, `ts_production` JSON, `ts_product_params` JSON, `ts_furn_params` JSON, `ts_base_blocks` JSON); CREATE TABLE IF NOT EXISTS `cat_parameters_keys` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `priority` INT, `note` CHAR, `sorting_field` INT, `applying` CHAR, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_params` JSON); CREATE TABLE IF NOT EXISTS `cat_inserts` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `article` CHAR, `insert_type` CHAR, `clr` CHAR, `lmin` INT, `lmax` INT, `hmin` INT, `hmax` INT, `smin` FLOAT, `smax` FLOAT, `for_direct_profile_only` INT, `ahmin` INT, `ahmax` INT, `priority` INT, `mmin` INT, `mmax` INT, `impost_fixation` CHAR, `shtulp_fixation` BOOLEAN, `can_rotate` BOOLEAN, `sizeb` FLOAT, `clr_group` CHAR, `is_order_row` CHAR, `note` CHAR, `insert_glass_type` CHAR, `available` BOOLEAN, `slave` BOOLEAN, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR, `ts_specification` JSON, `ts_selection_params` JSON, `ts_product_params` JSON); CREATE TABLE IF NOT EXISTS `cat_organizations` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `prefix` CHAR, `individual_legal` CHAR, `individual_entrepreneur` CHAR, `inn` CHAR, `kpp` CHAR, `main_bank_account` CHAR, `main_cashbox` CHAR, `certificate_series_number` CHAR, `certificate_date_issue` Date, `certificate_authority_name` CHAR, `certificate_authority_code` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_contact_information` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_nom` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `article` CHAR, `name_full` CHAR, `base_unit` CHAR, `storage_unit` CHAR, `nom_kind` CHAR, `nom_group` CHAR, `vat_rate` CHAR, `note` CHAR, `price_group` CHAR, `elm_type` CHAR, `len` FLOAT, `width` FLOAT, `thickness` FLOAT, `sizefurn` FLOAT, `sizefaltz` FLOAT, `density` FLOAT, `volume` FLOAT, `arc_elongation` FLOAT, `loss_factor` FLOAT, `rounding_quantity` INT, `clr` CHAR, `cutting_optimization_type` CHAR, `crooked` BOOLEAN, `colored` BOOLEAN, `lay` BOOLEAN, `made_to_order` BOOLEAN, `packing` BOOLEAN, `days_to_execution` INT, `days_from_execution` INT, `pricing` CHAR, `visualization` CHAR, `complete_list_sorting` INT, `is_accessory` BOOLEAN, `is_procedure` BOOLEAN, `is_service` BOOLEAN, `is_pieces` BOOLEAN, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_partners` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `name_full` CHAR, `main_bank_account` CHAR, `note` CHAR, `kpp` CHAR, `okpo` CHAR, `inn` CHAR, `individual_legal` CHAR, `main_contract` CHAR, `identification_document` CHAR, `buyer_main_manager` CHAR, `is_buyer` BOOLEAN, `is_supplier` BOOLEAN, `primary_contact` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_contact_information` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_units` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `name_full` CHAR, `international_short` CHAR, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_cashboxes` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `funds_currency` CHAR, `department` CHAR, `current_account` CHAR, `predefined_name` CHAR, `owner` CHAR); CREATE TABLE IF NOT EXISTS `cat_meta_ids` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `full_moniker` CHAR, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_property_values` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `heft` FLOAT, `ПолноеНаименование` CHAR, `predefined_name` CHAR, `owner` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_nom_units` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `qualifier_unit` CHAR, `heft` FLOAT, `volume` FLOAT, `coefficient` FLOAT, `rounding_threshold` INT, `predefined_name` CHAR, `owner` CHAR); CREATE TABLE IF NOT EXISTS `cat_contracts` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `settlements_currency` CHAR, `mutual_settlements` CHAR, `contract_kind` CHAR, `date` Date, `check_days_without_pay` BOOLEAN, `allowable_debts_amount` FLOAT, `allowable_debts_days` INT, `note` CHAR, `check_debts_amount` BOOLEAN, `check_debts_days` BOOLEAN, `number_doc` CHAR, `organization` CHAR, `main_cash_flow_article` CHAR, `main_project` CHAR, `accounting_reflect` BOOLEAN, `tax_accounting_reflect` BOOLEAN, `prepayment_percent` FLOAT, `validity` Date, `vat_included` BOOLEAN, `price_type` CHAR, `vat_consider` BOOLEAN, `days_without_pay` INT, `predefined_name` CHAR, `owner` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_nom_kinds` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `nom_type` CHAR, `dnom` CHAR, `dcharacteristic` CHAR, `captured` BOOLEAN, `zones` CHAR, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_contact_information_kinds` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `mandatory_fields` BOOLEAN, `type` CHAR, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_currencies` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `name_full` CHAR, `extra_charge` FLOAT, `main_currency` CHAR, `parameters_russian_recipe` CHAR, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_furns` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `flap_weight_max` INT, `left_right` BOOLEAN, `is_set` BOOLEAN, `is_sliding` BOOLEAN, `furn_set` CHAR, `side_count` INT, `handle_side` INT, `open_type` CHAR, `name_short` CHAR, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_open_tunes` JSON, `ts_specification` JSON, `ts_selection_params` JSON, `ts_specification_restrictions` JSON, `ts_colors` JSON); CREATE TABLE IF NOT EXISTS `cat_branches` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `suffix` CHAR, `direct` BOOLEAN, `use` BOOLEAN, `mode` INT, `parent` CHAR, `ts_organizations` JSON, `ts_partners` JSON, `ts_divisions` JSON, `ts_price_types` JSON, `ts_keys` JSON, `ts_extra_fields` JSON); CREATE TABLE IF NOT EXISTS `cat_elm_visualization` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `svg_path` CHAR, `note` CHAR, `attributes` CHAR, `rotate` INT, `offset` INT, `side` CHAR, `elm_side` INT, `cx` INT, `cy` INT, `angle_hor` INT, `priority` INT, `mode` INT, `captured` BOOLEAN, `editor` CHAR, `zones` CHAR, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_formulas` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `formula` CHAR, `leading_formula` CHAR, `condition_formula` BOOLEAN, `definition` CHAR, `template` CHAR, `sorting_field` INT, `async` BOOLEAN, `disabled` BOOLEAN, `zone` INT, `predefined_name` CHAR, `parent` CHAR, `ts_params` JSON); CREATE TABLE IF NOT EXISTS `cat_destinations` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `КоличествоРеквизитов` CHAR, `КоличествоСведений` CHAR, `Используется` BOOLEAN, `predefined_name` CHAR, `parent` CHAR, `ts_extra_fields` JSON, `ts_extra_properties` JSON); CREATE TABLE IF NOT EXISTS `cat_banks_qualifier` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `correspondent_account` CHAR, `city` CHAR, `address` CHAR, `phone_numbers` CHAR, `activity_ceased` BOOLEAN, `swift` CHAR, `inn` CHAR, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_property_values_hierarchy` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `heft` FLOAT, `ПолноеНаименование` CHAR, `predefined_name` CHAR, `owner` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_organization_bank_accounts` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `bank` CHAR, `bank_bic` CHAR, `funds_currency` CHAR, `account_number` CHAR, `settlements_bank` CHAR, `settlements_bank_bic` CHAR, `department` CHAR, `predefined_name` CHAR, `owner` CHAR); CREATE TABLE IF NOT EXISTS `cat_partner_bank_accounts` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `account_number` CHAR, `bank` CHAR, `settlements_bank` CHAR, `correspondent_text` CHAR, `appointments_text` CHAR, `funds_currency` CHAR, `bank_bic` CHAR, `bank_name` CHAR, `bank_correspondent_account` CHAR, `bank_city` CHAR, `bank_address` CHAR, `bank_phone_numbers` CHAR, `settlements_bank_bic` CHAR, `settlements_bank_correspondent_account` CHAR, `settlements_bank_city` CHAR, `predefined_name` CHAR, `owner` CHAR); CREATE TABLE IF NOT EXISTS `cat_countries` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `name_full` CHAR, `alpha2` CHAR, `alpha3` CHAR, `predefined_name` CHAR); CREATE TABLE IF NOT EXISTS `cat_clrs` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `ral` CHAR, `machine_tools_clr` CHAR, `clr_str` CHAR, `clr_out` CHAR, `clr_in` CHAR, `predefined_name` CHAR, `parent` CHAR); CREATE TABLE IF NOT EXISTS `cat_params_links` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `master` CHAR, `slave` CHAR, `hide` BOOLEAN, `note` CHAR, `use_master` INT, `captured` BOOLEAN, `editor` CHAR, `zone` INT, `zones` CHAR, `predefined_name` CHAR, `parent` CHAR, `ts_leadings` JSON, `ts_values` JSON); CREATE TABLE IF NOT EXISTS `cat_scheme_settings` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `obj` CHAR, `user` CHAR, `order` INT, `query` CHAR, `date_from` Date, `date_till` Date, `standard_period` CHAR, `formula` CHAR, `output` CHAR, `tag` CHAR, `ts_fields` JSON, `ts_sorting` JSON, `ts_dimensions` JSON, `ts_resources` JSON, `ts_selection` JSON, `ts_params` JSON, `ts_composition` JSON, `ts_conditional_appearance` JSON); CREATE TABLE IF NOT EXISTS `cat_meta_fields` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN); CREATE TABLE IF NOT EXISTS `cat_meta_objs` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN); CREATE TABLE IF NOT EXISTS `cch_properties` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `shown` BOOLEAN, `sorting_field` INT, `extra_values_owner` CHAR, `available` BOOLEAN, `mandatory` BOOLEAN, `include_to_name` BOOLEAN, `list` INT, `caption` CHAR, `note` CHAR, `destination` CHAR, `tooltip` CHAR, `is_extra_property` BOOLEAN, `include_to_description` BOOLEAN, `predefined_name` CHAR, `type` JSON); CREATE TABLE IF NOT EXISTS `cch_predefined_elmnts` (ref CHAR PRIMARY KEY NOT NULL, `_deleted` BOOLEAN, id CHAR, name CHAR, is_folder BOOLEAN, `value` CHAR, `definition` CHAR, `synonym` CHAR, `list` INT, `zone` INT, `predefined_name` CHAR, `parent` CHAR, `type` CHAR, `ts_elmnts` JSON); CREATE TABLE IF NOT EXISTS `enm_individual_legal` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_planning_phases` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_elm_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_specification_order_row_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_cnn_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_sz_line_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_open_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_cutting_optimization_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_nom_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_contact_information_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_lay_split_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_inserts_glass_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_inserts_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_cnn_sides` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_vat_rates` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_specification_installation_methods` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_angle_calculating_ways` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_count_calculating_ways` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_buyers_order_states` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_bind_coordinates` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_parameters_keys_applying` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_gender` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_positions` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_orientations` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_open_directions` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_color_price_group_destinations` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_order_categories` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_use_cut` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_obj_delivery_states` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_planning_detailing` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_text_aligns` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_contract_kinds` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_debit_credit_kinds` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_mutual_contract_settlements` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_align_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_contraction_options` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_offset_options` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_transfer_operations_options` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_impost_mount_options` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_inset_attrs_options` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_path_kind` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_report_output` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_quick_access` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_standard_period` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_data_field_kinds` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_label_positions` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_comparison_types` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_sort_directions` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); CREATE TABLE IF NOT EXISTS `enm_accumulation_record_type` (ref CHAR PRIMARY KEY NOT NULL, sequence INT, synonym CHAR); ',[]);$p.md.init({"enm":{"accumulation_record_type":[{"order":0,"name":"debit","synonym":"Приход"},{"order":1,"name":"credit","synonym":"Расход"}],"sort_directions":[{"order":0,"name":"asc","synonym":"По возрастанию","default":true},{"order":1,"name":"desc","synonym":"По убыванию"}],"comparison_types":[{"order":0,"name":"gt","synonym":"Больше"},{"order":1,"name":"gte","synonym":"Больше или равно"},{"order":2,"name":"lt","synonym":"Меньше"},{"order":3,"name":"lte","synonym":"Меньше или равно "},{"order":4,"name":"eq","synonym":"Равно","default":true},{"order":5,"name":"ne","synonym":"Не равно"},{"order":6,"name":"in","synonym":"В списке"},{"order":7,"name":"nin","synonym":"Не в списке"},{"order":8,"name":"lke","synonym":"Содержит "},{"order":9,"name":"nlk","synonym":"Не содержит"},{"order":10,"name":"filled","synonym":"Заполнено "},{"order":11,"name":"nfilled","synonym":"Не заполнено"}],"label_positions":[{"order":0,"name":"inherit","synonym":"Наследовать","default":true},{"order":1,"name":"hide","synonym":"Скрыть"},{"order":2,"name":"left","synonym":"Лево"},{"order":3,"name":"right","synonym":"Право"},{"order":4,"name":"top","synonym":"Верх"},{"order":5,"name":"bottom","synonym":"Низ"}],"data_field_kinds":[{"order":0,"name":"field","synonym":"Поле ввода","default":true},{"order":1,"name":"input","synonym":"Простой текст"},{"order":2,"name":"text","synonym":"Многострочный текст"},{"order":3,"name":"label","synonym":"Надпись"},{"order":4,"name":"link","synonym":"Гиперссылка"},{"order":5,"name":"cascader","synonym":"Каскадер"},{"order":6,"name":"toggle","synonym":"Переключатель"},{"order":7,"name":"image","synonym":"Картинка"},{"order":8,"name":"type","synonym":"Тип значения"},{"order":9,"name":"path","synonym":"Путь к данным"},{"order":10,"name":"typed_field","synonym":"Поле связи по типу"},{"order":11,"name":"props","synonym":"Свойства объекта"},{"order":12,"name":"star","synonym":"Пометка"}],"standard_period":[{"order":0,"name":"custom","synonym":"Произвольный","default":true},{"order":1,"name":"yesterday","synonym":"Вчера"},{"order":2,"name":"today","synonym":"Сегодня"},{"order":3,"name":"tomorrow","synonym":"Завтра"},{"order":4,"name":"last7days","synonym":"Последние 7 дней"},{"order":5,"name":"last30days","synonym":"Последние 30 дней"},{"order":6,"name":"last3Month","synonym":"Последние 3 месяца"},{"order":7,"name":"lastWeek","synonym":"Прошлая неделя"},{"order":8,"name":"lastTendays","synonym":"Прошлая декада"},{"order":9,"name":"lastMonth","synonym":"Прошлый месяц"},{"order":10,"name":"lastQuarter","synonym":"Прошлый квартал"},{"order":11,"name":"lastHalfYear","synonym":"Прошлое полугодие"},{"order":12,"name":"lastYear","synonym":"Прошлый год"},{"order":13,"name":"next7Days","synonym":"Следующие 7 дней"},{"order":14,"name":"nextTendays","synonym":"Следующая декада"},{"order":15,"name":"nextWeek","synonym":"Следующая неделя"},{"order":16,"name":"nextMonth","synonym":"Следующий месяц"},{"order":17,"name":"nextQuarter","synonym":"Следующий квартал"},{"order":18,"name":"nextHalfYear","synonym":"Следующее полугодие"},{"order":19,"name":"nextYear","synonym":"Следующий год"},{"order":20,"name":"tillEndOfThisYear","synonym":"До конца этого года"},{"order":21,"name":"tillEndOfThisQuarter","synonym":"До конца этого квартала"},{"order":22,"name":"tillEndOfThisMonth","synonym":"До конца этого месяца"},{"order":23,"name":"tillEndOfThisHalfYear","synonym":"До конца этого полугодия"},{"order":24,"name":"tillEndOfThistendays","synonym":"До конца этой декады"},{"order":25,"name":"tillEndOfThisweek","synonym":"До конца этой недели"},{"order":26,"name":"fromBeginningOfThisYear","synonym":"С начала этого года"},{"order":27,"name":"fromBeginningOfThisQuarter","synonym":"С начала этого квартала"},{"order":28,"name":"fromBeginningOfThisMonth","synonym":"С начала этого месяца"},{"order":29,"name":"fromBeginningOfThisHalfYear","synonym":"С начала этого полугодия"},{"order":30,"name":"fromBeginningOfThisTendays","synonym":"С начала этой декады"},{"order":31,"name":"fromBeginningOfThisWeek","synonym":"С начала этой недели"},{"order":32,"name":"thisTenDays","synonym":"Эта декада"},{"order":33,"name":"thisWeek","synonym":"Эта неделя"},{"order":34,"name":"thisHalfYear","synonym":"Это полугодие"},{"order":35,"name":"thisYear","synonym":"Этот год"},{"order":36,"name":"thisQuarter","synonym":"Этот квартал"},{"order":37,"name":"thisMonth","synonym":"Этот месяц"}],"quick_access":[{"order":0,"name":"none","synonym":"Нет","default":true},{"order":1,"name":"toolbar","synonym":"Панель инструментов"},{"order":2,"name":"drawer","synonym":"Панель формы"}],"report_output":[{"order":0,"name":"grid","synonym":"Таблица","default":true},{"order":1,"name":"chart","synonym":"Диаграмма"},{"order":2,"name":"pivot","synonym":"Cводная таблица"},{"order":3,"name":"html","synonym":"Документ HTML"}],"path_kind":[{"order":0,"name":"generatrix","synonym":"Образующая"},{"order":1,"name":"inner","synonym":"Внутренний"},{"order":2,"name":"outer","synonym":"Внешний"}],"inset_attrs_options":[{"order":0,"name":"НеПоперечина","synonym":"Не поперечина"},{"order":1,"name":"ОбаНаправления","synonym":"Оба направления"},{"order":2,"name":"ОтключитьВтороеНаправление","synonym":"Отключить второе направление"},{"order":3,"name":"ОтключитьШагиВторогоНаправления","synonym":"Отключить шаги второго направления"},{"order":4,"name":"ОтключитьПервоеНаправление","synonym":"Отключить первое направление"},{"order":5,"name":"ОтключитьШагиПервогоНаправления","synonym":"Отключить шаги первого направления"}],"impost_mount_options":[{"order":0,"name":"НетКрепленийИмпостовИРам","synonym":"Нет креплений импостов и рам"},{"order":1,"name":"МогутКрепитьсяИмпосты","synonym":"Могут крепиться импосты"},{"order":2,"name":"ДолжныБытьКрепленияИмпостов","synonym":"Должны быть крепления импостов"}],"transfer_operations_options":[{"order":0,"name":"НетПереноса","synonym":"Нет переноса"},{"order":1,"name":"НаПримыкающий","synonym":"На примыкающий"}],"offset_options":[{"order":0,"name":"ОтНачалаСтороны","synonym":"От начала стороны"},{"order":1,"name":"ОтКонцаСтороны","synonym":"От конца стороны"},{"order":2,"name":"ОтСередины","synonym":"От середины"},{"order":3,"name":"ОтРучки","synonym":"От ручки"},{"order":4,"name":"РазмерПоФальцу","synonym":"Размер по фальцу"},{"order":5,"name":"Формула","synonym":"Формула"}],"contraction_options":[{"order":0,"name":"ОтДлиныСтороны","synonym":"От длины стороны"},{"order":1,"name":"ОтВысотыРучки","synonym":"От высоты ручки"},{"order":2,"name":"ОтДлиныСтороныМинусВысотыРучки","synonym":"От длины стороны минус высота ручки"},{"order":3,"name":"ФиксированнаяДлина","synonym":"Фиксированная длина"}],"align_types":[{"order":0,"name":"Геометрически","synonym":"Геометрически"},{"order":1,"name":"ПоЗаполнениям","synonym":"По заполнениям"}],"mutual_contract_settlements":[{"order":0,"name":"ПоДоговоруВЦелом","synonym":"По договору в целом"},{"order":1,"name":"ПоЗаказам","synonym":"По заказам"},{"order":2,"name":"ПоСчетам","synonym":"По счетам"}],"debit_credit_kinds":[{"order":0,"name":"Приход","synonym":"Приход"},{"order":1,"name":"Расход","synonym":"Расход"}],"contract_kinds":[{"order":0,"name":"СПоставщиком","synonym":"С поставщиком"},{"order":1,"name":"СПокупателем","synonym":"С покупателем"},{"order":2,"name":"СКомитентом","synonym":"С комитентом"},{"order":3,"name":"СКомиссионером","synonym":"С комиссионером"},{"order":4,"name":"Прочее","synonym":"Прочее"}],"text_aligns":[{"order":0,"name":"left","synonym":"Лево"},{"order":1,"name":"right","synonym":"Право"},{"order":2,"name":"center","synonym":"Центр"}],"planning_detailing":[{"order":0,"name":"Изделие","synonym":"Изделие"},{"order":1,"name":"Контур","synonym":"Контур"},{"order":2,"name":"РамныйКонтур","synonym":"Рамный контур"},{"order":3,"name":"Элемент","synonym":"Элемент"},{"order":4,"name":"ТипЭлемента","synonym":"Тип элемента"},{"order":5,"name":"РодительскийЭлемент","synonym":"Родительский элемент"}],"obj_delivery_states":[{"order":0,"name":"Черновик","synonym":"Черновик"},{"order":1,"name":"Отправлен","synonym":"Отправлен"},{"order":2,"name":"Подтвержден","synonym":"Подтвержден"},{"order":3,"name":"Отклонен","synonym":"Отклонен"},{"order":4,"name":"Отозван","synonym":"Отозван"},{"order":5,"name":"Архив","synonym":"Перенесён в архив"},{"order":6,"name":"Шаблон","synonym":"Шаблон"}],"use_cut":[{"order":0,"name":"none","synonym":"Не учитывать"},{"order":1,"name":"all","synonym":"Учитывать"},{"order":2,"name":"input","synonym":"Только входящую"},{"order":3,"name":"output","synonym":"Только исходящую"}],"order_categories":[{"order":0,"name":"order","synonym":"Расчет заказ"},{"order":1,"name":"service","synonym":"Сервис"},{"order":2,"name":"complaints","synonym":"Рекламация"}],"color_price_group_destinations":[{"order":0,"name":"ДляЦенообразования","synonym":"Для ценообразования"},{"order":1,"name":"ДляХарактеристик","synonym":"Для характеристик"},{"order":2,"name":"ДляГруппировкиВПараметрах","synonym":"Для группировки в параметрах"},{"order":3,"name":"ДляОграниченияДоступности","synonym":"Для ограничения доступности"}],"open_directions":[{"order":0,"name":"Левое","synonym":"Левое"},{"order":1,"name":"Правое","synonym":"Правое"},{"order":2,"name":"Откидное","synonym":"Откидное"}],"orientations":[{"order":0,"name":"Горизонтальная","synonym":"Горизонтальная"},{"order":1,"name":"Вертикальная","synonym":"Вертикальная"},{"order":2,"name":"Наклонная","synonym":"Наклонная"}],"positions":[{"order":0,"name":"Любое","synonym":"Любое"},{"order":1,"name":"Верх","synonym":"Верх"},{"order":2,"name":"Низ","synonym":"Низ"},{"order":3,"name":"Лев","synonym":"Лев"},{"order":4,"name":"Прав","synonym":"Прав"},{"order":5,"name":"ЦентрВертикаль","synonym":"Центр вертикаль"},{"order":6,"name":"ЦентрГоризонталь","synonym":"Центр горизонталь"},{"order":7,"name":"Центр","synonym":"Центр"},{"order":8,"name":"ЛевВерх","synonym":"Лев верх"},{"order":9,"name":"ЛевНиз","synonym":"Лев низ"},{"order":10,"name":"ПравВерх","synonym":"Прав верх"},{"order":11,"name":"ПравНиз","synonym":"Прав низ"}],"gender":[{"order":0,"name":"Мужской","synonym":"Мужской"},{"order":1,"name":"Женский","synonym":"Женский"}],"parameters_keys_applying":[{"order":0,"name":"НаправлениеДоставки","synonym":"Направление доставки"},{"order":1,"name":"РабочийЦентр","synonym":"Рабочий центр"},{"order":2,"name":"Технология","synonym":"Технология"},{"order":3,"name":"Ценообразование","synonym":"Ценообразование"},{"order":4,"name":"ПараметрВыбора","synonym":"Параметр выбора"}],"bind_coordinates":[{"order":0,"name":"product","synonym":"Изделие"},{"order":1,"name":"contour","synonym":"Слой"},{"order":2,"name":"b","synonym":"Начало пути"},{"order":3,"name":"e","synonym":"Конец пути"}],"buyers_order_states":[{"order":0,"name":"ОжидаетсяСогласование","synonym":"Ожидается согласование"},{"order":1,"name":"ОжидаетсяАвансДоОбеспечения","synonym":"Ожидается аванс (до обеспечения)"},{"order":2,"name":"ГотовКОбеспечению","synonym":"Готов к обеспечению"},{"order":3,"name":"ОжидаетсяПредоплатаДоОтгрузки","synonym":"Ожидается предоплата (до отгрузки)"},{"order":4,"name":"ОжидаетсяОбеспечение","synonym":"Ожидается обеспечение"},{"order":5,"name":"ГотовКОтгрузке","synonym":"Готов к отгрузке"},{"order":6,"name":"ВПроцессеОтгрузки","synonym":"В процессе отгрузки"},{"order":7,"name":"ОжидаетсяОплатаПослеОтгрузки","synonym":"Ожидается оплата (после отгрузки)"},{"order":8,"name":"ГотовКЗакрытию","synonym":"Готов к закрытию"},{"order":9,"name":"Закрыт","synonym":"Закрыт"}],"count_calculating_ways":[{"order":0,"name":"ПоПериметру","synonym":"По периметру"},{"order":1,"name":"ПоПлощади","synonym":"По площади"},{"order":2,"name":"ДляЭлемента","synonym":"Для элемента"},{"order":3,"name":"ПоШагам","synonym":"По шагам"},{"order":4,"name":"ПоФормуле","synonym":"По формуле"}],"angle_calculating_ways":[{"order":0,"name":"Основной","synonym":"Основной"},{"order":1,"name":"СварнойШов","synonym":"Сварной шов"},{"order":2,"name":"СоединениеПополам","synonym":"Соед./2"},{"order":3,"name":"Соединение","synonym":"Соединение"},{"order":4,"name":"_90","synonym":"90"},{"order":5,"name":"НеСчитать","synonym":"Не считать"}],"specification_installation_methods":[{"order":0,"name":"Всегда","synonym":"Всегда"},{"order":1,"name":"САртикулом1","synonym":"с Арт1"},{"order":2,"name":"САртикулом2","synonym":"с Арт2"}],"vat_rates":[{"order":0,"name":"НДС18","synonym":"18%"},{"order":1,"name":"НДС18_118","synonym":"18% / 118%"},{"order":2,"name":"НДС10","synonym":"10%"},{"order":3,"name":"НДС10_110","synonym":"10% / 110%"},{"order":4,"name":"НДС0","synonym":"0%"},{"order":5,"name":"БезНДС","synonym":"Без НДС"},{"order":6,"name":"НДС20","synonym":"20%"},{"order":7,"name":"НДС20_120","synonym":"20% / 120%"}],"cnn_sides":[{"order":0,"name":"Изнутри","synonym":"Изнутри"},{"order":1,"name":"Снаружи","synonym":"Снаружи"},{"order":2,"name":"Любая","synonym":"Любая"}],"inserts_types":[{"order":0,"name":"Профиль","synonym":"Профиль"},{"order":1,"name":"Заполнение","synonym":"Заполнение"},{"order":2,"name":"Элемент","synonym":"Элемент"},{"order":3,"name":"Изделие","synonym":"Изделие"},{"order":4,"name":"Контур","synonym":"Контур"},{"order":5,"name":"МоскитнаяСетка","synonym":"Москитная сетка"},{"order":6,"name":"Подоконник","synonym":"Подоконник"},{"order":7,"name":"Откос","synonym":"Откос"},{"order":8,"name":"Водоотлив","synonym":"Водоотлив"},{"order":9,"name":"Монтаж","synonym":"Монтаж"},{"order":10,"name":"Доставка","synonym":"Доставка"},{"order":11,"name":"Набор","synonym":"Набор"},{"order":12,"name":"Стеклопакет","synonym":"Стеклопакет"},{"order":13,"name":"ТиповойСтеклопакет","synonym":"Типовой стеклопакет"},{"order":14,"name":"Раскладка","synonym":"Раскладка"}],"inserts_glass_types":[{"order":0,"name":"Заполнение","synonym":"Заполнение"},{"order":1,"name":"Рамка","synonym":"Рамка"},{"order":2,"name":"Газ","synonym":"Газ"}],"lay_split_types":[{"order":0,"name":"ДелениеГоризонтальных","synonym":"Деление горизонтальных"},{"order":1,"name":"ДелениеВертикальных","synonym":"Деление вертикальных"},{"order":2,"name":"КрестВСтык","synonym":"Крест в стык"},{"order":3,"name":"КрестПересечение","synonym":"Крест пересечение"}],"contact_information_types":[{"order":0,"name":"Адрес","synonym":"Адрес"},{"order":1,"name":"Телефон","synonym":"Телефон"},{"order":2,"name":"АдресЭлектроннойПочты","synonym":"Адрес электронной почты"},{"order":3,"name":"ВебСтраница","synonym":"Веб страница"},{"order":4,"name":"Факс","synonym":"Факс"},{"order":5,"name":"Другое","synonym":"Другое"},{"order":6,"name":"Skype","synonym":"Skype"}],"nom_types":[{"order":0,"name":"Товар","synonym":"Товар, материал"},{"order":1,"name":"Услуга","synonym":"Услуга"},{"order":2,"name":"Работа","synonym":"Работа, техоперация"}],"cutting_optimization_types":[{"order":0,"name":"Нет","synonym":"Нет"},{"order":1,"name":"РасчетНарезки","synonym":"Расчет нарезки"},{"order":2,"name":"НельзяВращатьПереворачивать","synonym":"Нельзя вращать переворачивать"},{"order":3,"name":"ТолькоНомераЯчеек","synonym":"Только номера ячеек"}],"open_types":[{"order":0,"name":"Глухое","synonym":"Глухое"},{"order":1,"name":"Поворотное","synonym":"Поворотное"},{"order":2,"name":"Откидное","synonym":"Откидное"},{"order":3,"name":"ПоворотноОткидное","synonym":"Поворотно-откидное"},{"order":4,"name":"Раздвижное","synonym":"Раздвижное"},{"order":5,"name":"Неподвижное","synonym":"Неподвижное"}],"sz_line_types":[{"order":0,"name":"Обычные","synonym":"Обычные"},{"order":1,"name":"Габаритные","synonym":"Только габаритные"},{"order":2,"name":"ПоСтворкам","synonym":"По створкам"},{"order":3,"name":"ОтКрая","synonym":"От края"},{"order":4,"name":"БезРазмеров","synonym":"Без размеров"}],"cnn_types":[{"order":0,"name":"УгловоеДиагональное","synonym":"Угловое диагональное"},{"order":1,"name":"УгловоеКВертикальной","synonym":"Угловое к вертикальной"},{"order":2,"name":"УгловоеКГоризонтальной","synonym":"Угловое к горизонтальной"},{"order":3,"name":"ТОбразное","synonym":"Т-образное"},{"order":4,"name":"Наложение","synonym":"Наложение"},{"order":5,"name":"НезамкнутыйКонтур","synonym":"Незамкнутый контур"},{"order":6,"name":"КрестВСтык","synonym":"Крест в стык"},{"order":7,"name":"КрестПересечение","synonym":"Крест пересечение"}],"specification_order_row_types":[{"order":0,"name":"Нет","synonym":"Нет"},{"order":1,"name":"Материал","synonym":"Материал"},{"order":2,"name":"Продукция","synonym":"Продукция"}],"elm_types":[{"order":0,"name":"Рама","synonym":"Рама"},{"order":1,"name":"Створка","synonym":"Створка"},{"order":2,"name":"Импост","synonym":"Импост"},{"order":3,"name":"Штульп","synonym":"Штульп"},{"order":4,"name":"Стекло","synonym":"Стекло - стеклопакет"},{"order":5,"name":"Заполнение","synonym":"Заполнение - сэндвич"},{"order":6,"name":"Раскладка","synonym":"Раскладка - фальшпереплет"},{"order":7,"name":"Текст","synonym":"Текст"},{"order":8,"name":"Линия","synonym":"Линия"},{"order":9,"name":"Размер","synonym":"Размер"},{"order":10,"name":"Радиус","synonym":"Радиус"},{"order":11,"name":"Добор","synonym":"Доборный проф."},{"order":12,"name":"Соединитель","synonym":"Соединит. профиль"},{"order":13,"name":"Водоотлив","synonym":"Водоотлив"},{"order":14,"name":"Москитка","synonym":"Москитн. сетка"},{"order":15,"name":"Фурнитура","synonym":"Фурнитура"},{"order":16,"name":"Макрос","synonym":"Макрос обр центра"},{"order":17,"name":"Подоконник","synonym":"Подоконник"},{"order":18,"name":"ОшибкаКритическая","synonym":"Ошибка критическая"},{"order":19,"name":"ОшибкаИнфо","synonym":"Ошибка инфо"},{"order":20,"name":"Визуализация","synonym":"Визуализация"},{"order":21,"name":"Прочее","synonym":"Прочее"},{"order":22,"name":"Продукция","synonym":"Продукция"},{"order":23,"name":"Доставка","synonym":"Доставка"},{"order":24,"name":"РаботыЦеха","synonym":"Работы цеха"},{"order":25,"name":"РаботыМонтажа","synonym":"Работы монтажа"},{"order":26,"name":"Монтаж","synonym":"Монтаж"},{"order":27,"name":"Уплотнение","synonym":"Уплотнение"},{"order":28,"name":"Арматура","synonym":"Армирование"},{"order":29,"name":"Штапик","synonym":"Штапик"},{"order":30,"name":"Порог","synonym":"Порог"},{"order":31,"name":"Подставочник","synonym":"Подставочн. профиль"}],"planning_phases":[{"order":0,"name":"plan","synonym":"План"},{"order":1,"name":"run","synonym":"Запуск"},{"order":2,"name":"ready","synonym":"Готовность"}],"individual_legal":[{"order":0,"name":"ЮрЛицо","synonym":"Юрлицо"},{"order":1,"name":"ФизЛицо","synonym":"Физлицо"}]},"ireg":{"log":{"name":"log","note":"","synonym":"Журнал событий","dimensions":{"date":{"synonym":"Дата","tooltip":"Время события","type":{"types":["number"],"digits":15,"fraction_figits":0}},"sequence":{"synonym":"Порядок","tooltip":"Порядок следования","type":{"types":["number"],"digits":6,"fraction_figits":0}}},"resources":{"class":{"synonym":"Класс","tooltip":"Класс события","type":{"types":["string"],"str_len":100}},"note":{"synonym":"Комментарий","multiline_mode":true,"tooltip":"Текст события","type":{"types":["string"],"str_len":0}},"obj":{"synonym":"Объект","multiline_mode":true,"tooltip":"Объект, к которому относится событие","type":{"types":["string"],"str_len":0}},"user":{"synonym":"Пользователь","tooltip":"Пользователь, в сеансе которого произошло событие","type":{"types":["string"],"str_len":100}}}},"log_view":{"name":"log_view","note":"","synonym":"Просмотр журнала событий","dimensions":{"key":{"synonym":"Ключ","tooltip":"Ключ события","type":{"types":["string"],"str_len":100}},"user":{"synonym":"Пользователь","tooltip":"Пользователь, отметивыший событие, как просмотренное","type":{"types":["string"],"str_len":100}}}},"currency_courses":{"name":"КурсыВалют","splitted":false,"note":"","synonym":"Курсы валют","dimensions":{"currency":{"synonym":"Валюта","multiline_mode":false,"tooltip":"Ссылка на валюты","choice_groups_elm":"elm","type":{"types":["cat.currencies"],"is_ref":true}},"period":{"synonym":"Дата курса","multiline_mode":false,"tooltip":"Дата курса валюты","mandatory":true,"type":{"types":["date"],"date_part":"date"}}},"resources":{"course":{"synonym":"Курс","multiline_mode":false,"tooltip":"Курс валюты","mandatory":true,"type":{"types":["number"],"digits":10,"fraction_figits":4}},"multiplicity":{"synonym":"Кратность","multiline_mode":false,"tooltip":"Кратность валюты","mandatory":true,"type":{"types":["number"],"digits":10,"fraction_figits":0}}},"attributes":{},"cachable":"ram","form":{"selection":{"fields":["cat_currencies.name as currency","period","course"],"cols":[{"id":"currency","width":"*","type":"ro","align":"left","sort":"server","caption":"Валюта"},{"id":"period","width":"*","type":"ro","align":"left","sort":"server","caption":"Дата курса"},{"id":"course","width":"*","type":"ron","align":"right","sort":"server","caption":"Курс"}]}}},"margin_coefficients":{"name":"пзМаржинальныеКоэффициентыИСкидки","splitted":false,"note":"","synonym":"Маржинальные коэффициенты","dimensions":{"price_group":{"synonym":"Ценовая группа","multiline_mode":false,"tooltip":"Если указано, правило распространяется только на продукцию данной ценовой группы","choice_groups_elm":"elm","type":{"types":["cat.price_groups"],"is_ref":true}},"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"Если указано, правило распространяется только на продукцию, параметры окружения которой, совпадают с параметрами ключа параметров","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"condition_formula":{"synonym":"Формула условия","multiline_mode":false,"tooltip":"В этом поле можно указать дополнительное условие на языке 1С. Например, применять строку только к аркам или непрямоугольным изделиям","choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}}},"resources":{"marginality":{"synonym":"К марж","multiline_mode":false,"tooltip":"На этот коэффициент будет умножена плановая себестоимость для получения отпускной цены. Имеет смысл, если \"тип цен прайс\" не указан и константа КМАРЖ_В_СПЕЦИФИКАЦИИ сброшена","type":{"types":["number"],"digits":10,"fraction_figits":4}},"marginality_min":{"synonym":"К марж мин.","multiline_mode":false,"tooltip":"Не позволяет установить в документе расчет скидку, при которой маржинальность строки опустится ниже указанного значения","type":{"types":["number"],"digits":10,"fraction_figits":4}},"marginality_internal":{"synonym":"К марж внутр.","multiline_mode":false,"tooltip":"Маржинальный коэффициент внутренней продажи","type":{"types":["number"],"digits":10,"fraction_figits":4}},"price_type_first_cost":{"synonym":"Тип цен плановой себестоимости","multiline_mode":false,"tooltip":"Этот тип цен будет использован для расчета плановой себестоимости продукции","choice_groups_elm":"elm","type":{"types":["cat.nom_prices_types"],"is_ref":true}},"price_type_sale":{"synonym":"Тип прайсовых цен","multiline_mode":false,"tooltip":"Этот тип цен будет использован для расчета отпускной цены продукции. Если указано, значения КМарж и КМарж.мин игнорируются","choice_groups_elm":"elm","type":{"types":["cat.nom_prices_types"],"is_ref":true}},"price_type_internal":{"synonym":"Тип цен внутренней продажи","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_prices_types"],"is_ref":true}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"В этом поле можно указать произвольный код на языке 1С для расчета (корректировки) себестоимости","choice_params":[{"name":"parent","path":["3220e251-ffcd-11e5-8303-e67fda7f6b46","3220e25b-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"sale_formula":{"synonym":"Формула продажа","multiline_mode":false,"tooltip":"В этом поле можно указать произвольный код на языке 1С для расчета (корректировки) цены продажи","choice_params":[{"name":"parent","path":["3220e251-ffcd-11e5-8303-e67fda7f6b46","3220e25b-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"internal_formula":{"synonym":"Формула внутр","multiline_mode":false,"tooltip":"В этом поле можно указать произвольный код на языке 1С для расчета цены внутренней продажи или заказа поставщику","choice_params":[{"name":"parent","path":["3220e251-ffcd-11e5-8303-e67fda7f6b46","3220e25b-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"external_formula":{"synonym":"Формула внешн.","multiline_mode":false,"tooltip":"В этом поле можно указать произвольный код на языке 1С для расчета внешней (дилерской) цены","choice_params":[{"name":"parent","path":["3220e251-ffcd-11e5-8303-e67fda7f6b46","3220e25b-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"extra_charge_external":{"synonym":"Наценка внешн.","multiline_mode":false,"tooltip":"Наценка внешней (дилерской) продажи по отношению к цене производителя, %. Перекрывается, если указан в лёгклм клиенте","type":{"types":["number"],"digits":5,"fraction_figits":2}},"discount_external":{"synonym":"Скидка внешн.","multiline_mode":false,"tooltip":"Скидка по умолчанию для внешней (дилерской) продажи по отношению к дилерской цене, %. Перекрывается, если указан в лёгклм клиенте","type":{"types":["number"],"digits":5,"fraction_figits":2}},"discount":{"synonym":"Скидка","multiline_mode":false,"tooltip":"Скидка по умолчанию, %","type":{"types":["number"],"digits":5,"fraction_figits":2}}},"attributes":{"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":200}}},"cachable":"doc_ram","form":{"selection":{"fields":["cat_price_groups.name as price_group","cat_parameters_keys.name as key","cat_formulas.name as condition_formula"],"cols":[{"id":"price_group","width":"*","type":"ro","align":"left","sort":"server","caption":"Ценовая группа"},{"id":"key","width":"*","type":"ro","align":"left","sort":"server","caption":"Ключ параметров"},{"id":"condition_formula","width":"*","type":"ro","align":"left","sort":"server","caption":"Формула условия"}]}}}},"cat":{"meta_objs":{"fields":{}},"meta_fields":{"fields":{}},"scheme_settings":{"name":"scheme_settings","synonym":"Настройки отчетов и списков","input_by_string":["name"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"obj":{"synonym":"Объект","tooltip":"Имя класса метаданных","type":{"types":["string"],"str_len":250}},"user":{"synonym":"Пользователь","tooltip":"Если пусто - публичная настройка","type":{"types":["string"],"str_len":50}},"order":{"synonym":"Порядок","tooltip":"Порядок варианта","type":{"types":["number"],"digits":6,"fraction_figits":0}},"query":{"synonym":"Запрос","tooltip":"Индекс CouchDB или текст SQL","type":{"types":["string"],"str_len":0}},"date_from":{"synonym":"Начало периода","tooltip":"","type":{"types":["date"],"date_part":"date"}},"date_till":{"synonym":"Конец периода","tooltip":"","type":{"types":["date"],"date_part":"date"}},"standard_period":{"synonym":"Стандартный период","tooltip":"Использование стандартного периода","type":{"types":["enm.standard_period"],"is_ref":true}},"formula":{"synonym":"Формула","tooltip":"Формула инициализации","type":{"types":["cat.formulas"],"is_ref":true}},"output":{"synonym":"Вывод","tooltip":"Вывод результата","type":{"types":["enm.report_output"],"is_ref":true}},"tag":{"synonym":"Дополнительные свойства","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"fields":{"name":"fields","synonym":"Доступные поля","tooltip":"Состав, порядок и ширина колонок","fields":{"parent":{"synonym":"Родитель","tooltip":"Для плоского списка, родитель пустой","type":{"types":["string"],"str_len":100}},"use":{"synonym":"Использование","tooltip":"","type":{"types":["boolean"]}},"field":{"synonym":"Поле","tooltip":"","type":{"types":["string"],"str_len":100}},"width":{"synonym":"Ширина","tooltip":"","type":{"types":["string"],"str_len":6}},"caption":{"synonym":"Заголовок","tooltip":"","type":{"types":["string"],"str_len":100}},"tooltip":{"synonym":"Подсказка","tooltip":"","type":{"types":["string"],"str_len":100}},"ctrl_type":{"synonym":"Тип","tooltip":"Тип элемента управления","type":{"types":["enm.data_field_kinds"],"is_ref":true}},"formatter":{"synonym":"Формат","tooltip":"Функция форматирования","type":{"types":["cat.formulas"],"is_ref":true}},"editor":{"synonym":"Редактор","tooltip":"Компонент редактирования","type":{"types":["cat.formulas"],"is_ref":true}}}},"sorting":{"name":"sorting","synonym":"Поля сортировки","tooltip":"","fields":{"parent":{"synonym":"Родитель","tooltip":"","type":{"types":["string"],"str_len":100}},"use":{"synonym":"Использование","tooltip":"","type":{"types":["boolean"]}},"field":{"synonym":"Поле","tooltip":"","type":{"types":["string"],"str_len":100}},"direction":{"synonym":"Направление","tooltip":"","type":{"types":["enm.sort_directions"],"is_ref":true}}}},"dimensions":{"name":"dimensions","synonym":"Поля группировки","tooltip":"","fields":{"parent":{"synonym":"Родитель","tooltip":"","type":{"types":["string"],"str_len":100}},"use":{"synonym":"Использование","tooltip":"","type":{"types":["boolean"]}},"field":{"synonym":"Поле","tooltip":"","type":{"types":["string"],"str_len":100}}}},"resources":{"name":"resources","synonym":"Ресурсы","tooltip":"","fields":{"parent":{"synonym":"Родитель","tooltip":"","type":{"types":["string"],"str_len":100}},"use":{"synonym":"Использование","tooltip":"","type":{"types":["boolean"]}},"field":{"synonym":"Поле","tooltip":"","type":{"types":["string"],"str_len":100}},"formula":{"synonym":"Формула","tooltip":"По умолчанию - сумма","type":{"types":["cat.formulas"],"is_ref":true}}}},"selection":{"name":"selection","synonym":"Отбор","tooltip":"","fields":{"parent":{"synonym":"Родитель","tooltip":"","type":{"types":["string"],"str_len":100}},"use":{"synonym":"Использование","tooltip":"","type":{"types":["boolean"]}},"left_value":{"synonym":"Левое значение","tooltip":"Путь к данным","type":{"types":["string"],"str_len":255}},"left_value_type":{"synonym":"Тип слева","tooltip":"Тип значения слева","default":"path","type":{"types":["string"],"str_len":100}},"comparison_type":{"synonym":"Вид сравнения","tooltip":"","type":{"types":["enm.comparison_types"],"is_ref":true}},"right_value":{"synonym":"Правое значение","tooltip":"","type":{"types":["string"],"str_len":100}},"right_value_type":{"synonym":"Тип справа","tooltip":"Тип значения справа","default":"path","type":{"types":["string"],"str_len":100}}}},"params":{"name":"params","synonym":"Параметры","tooltip":"","fields":{"param":{"synonym":"Параметр","tooltip":"","type":{"types":["string"],"str_len":100}},"value_type":{"synonym":"Тип","tooltip":"Тип значения","type":{"types":["string"],"str_len":100}},"value":{"synonym":"Значение","tooltip":"Может иметь примитивный или ссылочный тип или массив","type":{"types":["string","number"],"str_len":0,"digits":15,"fraction_figits":3,"date_part":"date"}},"quick_access":{"synonym":"Быстрый доступ","tooltip":"Размещать на нанели инструментов","type":{"types":["boolean"]}}}},"composition":{"name":"composition","synonym":"Структура","tooltip":"","fields":{"parent":{"synonym":"Родитель","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":10}},"use":{"synonym":"Использование","tooltip":"","type":{"types":["boolean"]}},"field":{"synonym":"Элемент","tooltip":"Элемент структуры отчета","type":{"types":["string"],"str_len":50}},"kind":{"synonym":"Вид раздела отчета","tooltip":"список, таблица, группировка строк, группировка колонок","type":{"types":["string"],"str_len":50}},"definition":{"synonym":"Описание","tooltip":"Описание раздела структуры","type":{"types":["string"],"str_len":50}}}},"conditional_appearance":{"name":"conditional_appearance","synonym":"Условное оформление","tooltip":"","fields":{}}},"cachable":"doc"},"params_links":{"name":"СвязиПараметров","splitted":false,"synonym":"Связи параметров","illustration":"Подчиненные параметры","obj_presentation":"Связь параметров","list_presentation":"Связи параметров","input_by_string":["name"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"master":{"synonym":"Ведущий","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"slave":{"synonym":"Ведомый","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"hide":{"synonym":"Скрыть ведомый","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"use_master":{"synonym":"Использование ведущих","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zone":{"synonym":"Область","multiline_mode":false,"tooltip":"Разделитель (префикс) данных","type":{"types":["number"],"digits":6,"fraction_figits":0}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.params_links"],"is_ref":true}}},"tabular_sections":{"leadings":{"name":"Ведущие","synonym":"Ведущие","tooltip":"","fields":{"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}}}},"values":{"name":"Значения","synonym":"Значения","tooltip":"","fields":{"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["slave"]}],"choice_groups_elm":"elm","choice_type":{"path":["slave"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"by_default":{"synonym":"По умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"forcibly":{"synonym":"Принудительно","multiline_mode":false,"tooltip":"Замещать установленное ранее значение при перевыборе ведущего параметра","type":{"types":["boolean"]}}}}},"cachable":"ram"},"clrs":{"name":"пзЦвета","splitted":false,"synonym":"Цвета","illustration":"","obj_presentation":"Цвет","list_presentation":"Цвета","input_by_string":["name","id","ral"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"ral":{"synonym":"Цвет RAL","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":20}},"machine_tools_clr":{"synonym":"Код для станка","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":20}},"clr_str":{"synonym":"Цвет в построителе","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":36}},"clr_out":{"synonym":"Цвет снаружи","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"clr_in":{"synonym":"Цвет изнутри","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.clrs"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"countries":{"name":"СтраныМира","splitted":false,"synonym":"Страны мира","illustration":"","obj_presentation":"Страна мира","list_presentation":"","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":3,"fields":{"name_full":{"synonym":"Наименование полное","multiline_mode":false,"tooltip":"Полное наименование страны мира","type":{"types":["string"],"str_len":100}},"alpha2":{"synonym":"Код альфа-2","multiline_mode":false,"tooltip":"Двузначный буквенный код альфа-2 страны по ОКСМ","type":{"types":["string"],"str_len":2}},"alpha3":{"synonym":"Код альфа-3","multiline_mode":false,"tooltip":"Трехзначный буквенный код альфа-3 страны по ОКСМ","type":{"types":["string"],"str_len":3}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"ram"},"partner_bank_accounts":{"name":"БанковскиеСчетаКонтрагентов","splitted":false,"synonym":"Банковские счета","illustration":"Банковские счета сторонних контрагентов и физических лиц.","obj_presentation":"Банковский счет","list_presentation":"Банковские счета","input_by_string":["name","account_number"],"hierarchical":false,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"account_number":{"synonym":"Номер счета","multiline_mode":false,"tooltip":"Номер расчетного счета организации","mandatory":true,"type":{"types":["string"],"str_len":20}},"bank":{"synonym":"Банк","multiline_mode":false,"tooltip":"Банк, в котором открыт расчетный счет организации","choice_groups_elm":"elm","type":{"types":["cat.banks_qualifier"],"is_ref":true}},"settlements_bank":{"synonym":"Банк для расчетов","multiline_mode":false,"tooltip":"Банк, в случае непрямых расчетов","choice_groups_elm":"elm","type":{"types":["cat.banks_qualifier"],"is_ref":true}},"correspondent_text":{"synonym":"Текст корреспондента","multiline_mode":false,"tooltip":"Текст \"Плательщик\\Получатель\" в платежных документах","type":{"types":["string"],"str_len":250}},"appointments_text":{"synonym":"Текст назначения","multiline_mode":false,"tooltip":"Текст назначения платежа","type":{"types":["string"],"str_len":250}},"funds_currency":{"synonym":"Валюта","multiline_mode":false,"tooltip":"Валюта учета денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.currencies"],"is_ref":true}},"bank_bic":{"synonym":"БИКБанка","multiline_mode":false,"tooltip":"БИК банка, в котором открыт счет","type":{"types":["string"],"str_len":9}},"bank_name":{"synonym":"Наименование банка","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":100}},"bank_correspondent_account":{"synonym":"Корр. счет банк","multiline_mode":false,"tooltip":"Корр.счет банка","type":{"types":["string"],"str_len":20}},"bank_city":{"synonym":"Город банка","multiline_mode":false,"tooltip":"Город банка","type":{"types":["string"],"str_len":50}},"bank_address":{"synonym":"Адрес банка","multiline_mode":false,"tooltip":"Адрес банка","type":{"types":["string"],"str_len":0}},"bank_phone_numbers":{"synonym":"Телефоны банка","multiline_mode":false,"tooltip":"Телефоны банка","type":{"types":["string"],"str_len":0}},"settlements_bank_bic":{"synonym":"БИК банка для расчетов","multiline_mode":false,"tooltip":"БИК банка, в случае непрямых расчетов","type":{"types":["string"],"str_len":9}},"settlements_bank_correspondent_account":{"synonym":"Корр. счет банка для расчетов","multiline_mode":false,"tooltip":"Корр.счет банка, в случае непрямых расчетов","type":{"types":["string"],"str_len":20}},"settlements_bank_city":{"synonym":"Город банка для расчетов","multiline_mode":false,"tooltip":"Город банка, в случае непрямых расчетов","type":{"types":["string"],"str_len":50}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"Контрагент или физическое лицо, являющиеся владельцем банковского счета","choice_params":[{"name":"is_folder","path":false}],"mandatory":true,"type":{"types":["cat.individuals","cat.partners"],"is_ref":true}}},"tabular_sections":{},"cachable":"doc_ram","form":{"obj":{"head":{" ":["name","owner","account_number","funds_currency","bank_bic","bank","settlements_bank_bic","settlements_bank"]}}}},"organization_bank_accounts":{"name":"БанковскиеСчетаОрганизаций","splitted":false,"synonym":"Банковские счета организаций","illustration":"Банковские счета собственных организаций. ","obj_presentation":"Банковский счет организации","list_presentation":"Банковские счета","input_by_string":["name","account_number"],"hierarchical":false,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"bank":{"synonym":"Банк","multiline_mode":false,"tooltip":"Банк, в котором открыт расчетный счет организации","choice_groups_elm":"elm","type":{"types":["cat.banks_qualifier"],"is_ref":true}},"bank_bic":{"synonym":"БИКБанка","multiline_mode":false,"tooltip":"БИК банка, в котором открыт счет","type":{"types":["string"],"str_len":9}},"funds_currency":{"synonym":"Валюта денежных средств","multiline_mode":false,"tooltip":"Валюта учета денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.currencies"],"is_ref":true}},"account_number":{"synonym":"Номер счета","multiline_mode":false,"tooltip":"Номер расчетного счета организации","mandatory":true,"type":{"types":["string"],"str_len":20}},"settlements_bank":{"synonym":"Банк для расчетов","multiline_mode":false,"tooltip":"Банк, в случае непрямых расчетов","choice_groups_elm":"elm","type":{"types":["cat.banks_qualifier"],"is_ref":true}},"settlements_bank_bic":{"synonym":"БИК банка для расчетов","multiline_mode":false,"tooltip":"БИК банка, в случае непрямых расчетов","type":{"types":["string"],"str_len":9}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"Подразделение, отвечающее за банковский счет","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Организация","multiline_mode":false,"tooltip":"Организация, являющиеся владельцем банковского счета","choice_params":[{"name":"is_folder","path":false}],"mandatory":true,"type":{"types":["cat.organizations"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram","form":{"obj":{"head":{" ":["name","owner","account_number","funds_currency","bank_bic","bank","settlements_bank_bic","settlements_bank"]}}}},"property_values_hierarchy":{"name":"ЗначенияСвойствОбъектовИерархия","splitted":false,"synonym":"Дополнительные значения (иерархия)","illustration":"","obj_presentation":"Дополнительное значение (иерархия)","list_presentation":"","input_by_string":["name"],"hierarchical":true,"has_owners":true,"group_hierarchy":false,"main_presentation_name":true,"code_length":0,"fields":{"heft":{"synonym":"Весовой коэффициент","multiline_mode":false,"tooltip":"Относительный вес дополнительного значения (значимость).","type":{"types":["number"],"digits":10,"fraction_figits":2}},"ПолноеНаименование":{"synonym":"Полное наименование","multiline_mode":true,"tooltip":"Подробное описание значения дополнительного реквизита","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит или сведение.","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"parent":{"synonym":"Входит в группу","multiline_mode":false,"tooltip":"Вышестоящее дополнительное значение свойства.","choice_links":[{"name":["selection","owner"],"path":["owner"]}],"type":{"types":["cat.property_values_hierarchy"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"banks_qualifier":{"name":"КлассификаторБанковРФ","splitted":false,"synonym":"Классификатор банков РФ","illustration":"","obj_presentation":"Банк","list_presentation":"Банки","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"correspondent_account":{"synonym":"Корр. счет","multiline_mode":false,"tooltip":"Корреспондентский счет банка","type":{"types":["string"],"str_len":20}},"city":{"synonym":"Город","multiline_mode":false,"tooltip":"Город банка","type":{"types":["string"],"str_len":50}},"address":{"synonym":"Адрес","multiline_mode":false,"tooltip":"Адрес банка","type":{"types":["string"],"str_len":500}},"phone_numbers":{"synonym":"Телефоны","multiline_mode":false,"tooltip":"Телефоны банка","type":{"types":["string"],"str_len":250}},"activity_ceased":{"synonym":"Деятельность прекращена","multiline_mode":false,"tooltip":"Банк по каким-либо причинам прекратил свою деятельность","type":{"types":["boolean"]}},"swift":{"synonym":"СВИФТ БИК","multiline_mode":false,"tooltip":"Международный банковский идентификационный код (SWIFT BIC)","type":{"types":["string"],"str_len":11}},"inn":{"synonym":"ИНН","multiline_mode":false,"tooltip":"Идентификационный номер налогоплательщика","type":{"types":["string"],"str_len":12}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа банков","multiline_mode":false,"tooltip":"Группа банков, в которую входит данный банк","type":{"types":["cat.banks_qualifier"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"destinations":{"name":"НаборыДополнительныхРеквизитовИСведений","splitted":false,"synonym":"Наборы дополнительных реквизитов и сведений","illustration":"","obj_presentation":"Набор дополнительных реквизитов и сведений","list_presentation":"","input_by_string":["name"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"КоличествоРеквизитов":{"synonym":"Количество реквизитов","multiline_mode":false,"tooltip":"Количество реквизитов в наборе не помеченных на удаление.","type":{"types":["string"],"str_len":5}},"КоличествоСведений":{"synonym":"Количество сведений","multiline_mode":false,"tooltip":"Количество сведений в наборе не помеченных на удаление.","type":{"types":["string"],"str_len":5}},"Используется":{"synonym":"Используется","multiline_mode":false,"tooltip":"Набор свойств отображается в форме списка","type":{"types":["boolean"]}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Входит в группу","multiline_mode":false,"tooltip":"Группа, к которой относится набор.","type":{"types":["cat.destinations"],"is_ref":true}}},"tabular_sections":{"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Дополнительный реквизит","multiline_mode":false,"tooltip":"Дополнительный реквизит этого набора","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"_deleted":{"synonym":"Пометка удаления","multiline_mode":false,"tooltip":"Устанавливается при исключении дополнительного реквизита из набора,\nчтобы можно было вернуть связь с уникальным дополнительным реквизитом.","type":{"types":["boolean"]}}}},"extra_properties":{"name":"ДополнительныеСведения","synonym":"Дополнительные сведения","tooltip":"","fields":{"property":{"synonym":"Дополнительное сведение","multiline_mode":false,"tooltip":"Дополнительное сведение этого набора","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"_deleted":{"synonym":"Пометка удаления","multiline_mode":false,"tooltip":"Устанавливается при исключении дополнительного сведения из набора,\nчтобы можно было вернуть связь с уникальным дополнительным сведением.","type":{"types":["boolean"]}}}}},"cachable":"ram"},"formulas":{"name":"Формулы","splitted":false,"synonym":"Формулы","illustration":"Формулы пользователя, для выполнения при расчете спецификаций в справочниках Вставки, Соединения, Фурнитура и регистре Корректировки спецификации","obj_presentation":"Формула","list_presentation":"","input_by_string":["name"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"Текст функции на языке javascript","type":{"types":["string"],"str_len":0}},"leading_formula":{"synonym":"Ведущая формула","multiline_mode":false,"tooltip":"Если указано, выполняется код ведущей формулы с параметрами, заданными для текущей формулы","choice_params":[{"name":"leading_formula","path":"00000000-0000-0000-0000-000000000000"}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"condition_formula":{"synonym":"Это формула условия","multiline_mode":false,"tooltip":"Формула используется, как фильтр, а не как алгоритм расчета количества.\nЕсли возвращает не Истина, строка в спецификацию не добавляется","type":{"types":["boolean"]}},"definition":{"synonym":"Описание","multiline_mode":true,"tooltip":"Описание в формате html","type":{"types":["string"],"str_len":0}},"template":{"synonym":"Шаблон","multiline_mode":true,"tooltip":"html шаблон отчета","type":{"types":["string"],"str_len":0}},"sorting_field":{"synonym":"Порядок","multiline_mode":false,"tooltip":"Используется для упорядочивания (служебный)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"async":{"synonym":"Асинхронный режим","multiline_mode":false,"tooltip":"Создавать асинхронную функцию","type":{"types":["boolean"]}},"disabled":{"synonym":"Отключена","multiline_mode":false,"tooltip":"Имеет смысл только для печатных форм и модификаторов","type":{"types":["boolean"]}},"zone":{"synonym":"Область","multiline_mode":false,"tooltip":"Разделитель (префикс) данных","type":{"types":["number"],"digits":6,"fraction_figits":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"Группа формул","type":{"types":["cat.formulas"],"is_ref":true}}},"tabular_sections":{"params":{"name":"Параметры","synonym":"Параметры","tooltip":"","fields":{"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["param"],"path":["params","param"]}],"choice_type":{"path":["params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}}}}},"cachable":"ram"},"elm_visualization":{"name":"пзВизуализацияЭлементов","splitted":false,"synonym":"Визуализация элементов","illustration":"Строки svg для рисования петель, ручек и графических примитивов","obj_presentation":"Визуализация элемента","list_presentation":"Визуализация элементов","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"svg_path":{"synonym":"Путь svg или текст","multiline_mode":true,"tooltip":"","type":{"types":["string"],"str_len":0}},"note":{"synonym":"Комментарий","multiline_mode":true,"tooltip":"","type":{"types":["string"],"str_len":0}},"attributes":{"synonym":"Атрибуты","multiline_mode":false,"tooltip":"Дополнительные атрибуты svg path","type":{"types":["string"],"str_len":0}},"rotate":{"synonym":"Поворачивать","multiline_mode":false,"tooltip":"правила поворота эскиза параллельно касательной профиля в точке визуализации\n0 - поворачивать\n1 - ручка","type":{"types":["number"],"digits":1,"fraction_figits":0}},"offset":{"synonym":"Смещение","multiline_mode":false,"tooltip":"Смещение в мм относительно внещнего ребра элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"side":{"synonym":"Сторона соедин.","multiline_mode":false,"tooltip":"имеет смысл только для импостов","choice_groups_elm":"elm","type":{"types":["enm.cnn_sides"],"is_ref":true}},"elm_side":{"synonym":"Сторона элем.","multiline_mode":false,"tooltip":"(0) - изнутри, (1) - снаружи, (-1) - в середине элемента","type":{"types":["number"],"digits":1,"fraction_figits":0}},"cx":{"synonym":"cx","multiline_mode":false,"tooltip":"Координата точки привязки","type":{"types":["number"],"digits":6,"fraction_figits":0}},"cy":{"synonym":"cy","multiline_mode":false,"tooltip":"Координата точки привязки","type":{"types":["number"],"digits":6,"fraction_figits":0}},"angle_hor":{"synonym":"Угол к горизонту","multiline_mode":false,"tooltip":"Угол к к горизонту элемента по умолчанию","type":{"types":["number"],"digits":6,"fraction_figits":0}},"priority":{"synonym":"Приоритет","multiline_mode":false,"tooltip":"Группа визуализаций","type":{"types":["number"],"digits":6,"fraction_figits":0}},"mode":{"synonym":"Режим","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"ram"},"branches":{"name":"ИнтеграцияОтделыАбонентов","splitted":false,"synonym":"Отделы абонентов","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["name","suffix"],"hierarchical":true,"has_owners":true,"group_hierarchy":false,"main_presentation_name":true,"code_length":0,"fields":{"suffix":{"synonym":"Суффикс CouchDB","multiline_mode":false,"tooltip":"Для разделения данных в CouchDB","mandatory":true,"type":{"types":["string"],"str_len":4}},"direct":{"synonym":"Direct","multiline_mode":false,"tooltip":"Для пользователя запрещен режим offline","type":{"types":["boolean"]}},"use":{"synonym":"Используется","multiline_mode":false,"tooltip":"Использовать данный отдел при создании баз и пользователей","type":{"types":["boolean"]}},"mode":{"synonym":"Режим","multiline_mode":false,"tooltip":"Режим репликации текущего отдела","type":{"types":["number"],"digits":1,"fraction_figits":0}},"parent":{"synonym":"Ведущий отдел","multiline_mode":false,"tooltip":"Заполняется в случае иерархической репликации","choice_links":[{"name":["selection","owner"],"path":["owner"]}],"type":{"types":["cat.branches"],"is_ref":true}}},"tabular_sections":{"organizations":{"name":"Организации","synonym":"Организации","tooltip":"Организации, у которых дилер может заказывать продукцию и услуги","fields":{"acl_obj":{"synonym":"Объект доступа","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.organizations"],"is_ref":true}},"by_default":{"synonym":"По умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"partners":{"name":"Контрагенты","synonym":"Контрагенты","tooltip":"Юридические лица дилера, от имени которых он оформляет заказы","fields":{"acl_obj":{"synonym":"Объект доступа","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.partners"],"is_ref":true}},"by_default":{"synonym":"По умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"divisions":{"name":"Подразделения","synonym":"Подразделения","tooltip":"Подразделения, к данным которых, дилеру предоставлен доступ","fields":{"acl_obj":{"synonym":"Объект доступа","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"by_default":{"synonym":"По умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"price_types":{"name":"ТипыЦен","synonym":"Типы цен","tooltip":"Типы цен, привязанные к дилеру","fields":{"acl_obj":{"synonym":"Объект доступа","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.nom_prices_types"],"is_ref":true}}}},"keys":{"name":"Ключи","synonym":"Ключи","tooltip":"Ключи параметров, привязанные к дилеру","fields":{"acl_obj":{"synonym":"Объект доступа","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.parameters_keys"],"is_ref":true}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Дополнительные реквизиты объекта","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc"},"furns":{"name":"пзФурнитура","splitted":false,"synonym":"Фурнитура","illustration":"Описывает ограничения и правила формирования спецификаций фурнитуры","obj_presentation":"Фурнитура","list_presentation":"Фурнитура","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"flap_weight_max":{"synonym":"Масса створки макс","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"left_right":{"synonym":"Левая правая","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_set":{"synonym":"Это набор","multiline_mode":false,"tooltip":"Определяет, является элемент набором для построения спецификации или комплектом фурнитуры для выбора в построителе","type":{"types":["boolean"]}},"is_sliding":{"synonym":"Это раздвижка","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"furn_set":{"synonym":"Набор фурнитуры","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_set","path":true}],"choice_groups_elm":"elm","type":{"types":["cat.furns"],"is_ref":true}},"side_count":{"synonym":"Количество сторон","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"handle_side":{"synonym":"Ручка на стороне","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"open_type":{"synonym":"Тип открывания","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.open_types"],"is_ref":true}},"name_short":{"synonym":"Наименование сокращенное","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":3}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"","type":{"types":["cat.furns"],"is_ref":true}}},"tabular_sections":{"open_tunes":{"name":"НастройкиОткрывания","synonym":"Настройки открывания","tooltip":"","fields":{"side":{"synonym":"Сторона","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"lmin":{"synonym":"X min (длина или ширина)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"lmax":{"synonym":"X max (длина или ширина)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"amin":{"synonym":"α мин","multiline_mode":false,"tooltip":"Минимальный угол к соседнему элементу","type":{"types":["number"],"digits":3,"fraction_figits":0}},"amax":{"synonym":"α макс","multiline_mode":false,"tooltip":"Максимальный угол к соседнему элементу","type":{"types":["number"],"digits":3,"fraction_figits":0}},"arc_available":{"synonym":"Дуга","multiline_mode":false,"tooltip":"Разрешено искривление элемента","type":{"types":["boolean"]}},"shtulp_available":{"synonym":"Штульп безимп соед","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"shtulp_fix_here":{"synonym":"Крепится штульп","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"rotation_axis":{"synonym":"Ось поворота","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"partial_opening":{"synonym":"Неполн. откр.","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"outline":{"synonym":"Эскиз","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}}}},"specification":{"name":"Спецификация","synonym":"Спецификация","tooltip":"","fields":{"elm":{"synonym":"№","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"dop":{"synonym":"№ доп","multiline_mode":false,"tooltip":"Элемент дополнительной спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура/Набор","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_set","path":true}],"choice_groups_elm":"elm","type":{"types":["cat.inserts","cat.nom","cat.furns"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"nom_characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["nom"],"path":["specification","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":8}},"handle_height_base":{"synonym":"Выс. ручк.","multiline_mode":false,"tooltip":"Высота ручки по умолчению.\n>0: фиксированная высота\n=0: Высоту задаёт оператор\n<0: Ручка по центру","type":{"types":["number"],"digits":6,"fraction_figits":0}},"fix_ruch":{"synonym":"Высота ручки фиксирована","multiline_mode":false,"tooltip":"Запрещено изменять высоту ручки","type":{"types":["boolean"]}},"handle_height_min":{"synonym":"Выс. ручк. min","multiline_mode":false,"tooltip":"Строка будет добавлена только в том случае, если ручка выше этого значеия","type":{"types":["number"],"digits":6,"fraction_figits":0}},"handle_height_max":{"synonym":"Выс. ручк. max","multiline_mode":false,"tooltip":"Строка будет добавлена только в том случае, если ручка ниже этого значеия","type":{"types":["number"],"digits":6,"fraction_figits":0}},"contraction":{"synonym":"Укорочение","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"contraction_option":{"synonym":"Укороч. от","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.contraction_options"],"is_ref":true}},"coefficient":{"synonym":"Коэффициент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":8}},"flap_weight_min":{"synonym":"Масса створки min","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"flap_weight_max":{"synonym":"Масса створки max","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"side":{"synonym":"Сторона","multiline_mode":false,"tooltip":"Сторона фурнитуры, на которую устанавливается элемент или выполняется операция","type":{"types":["number"],"digits":1,"fraction_figits":0}},"cnn_side":{"synonym":"Сторона соед.","multiline_mode":false,"tooltip":"Фильтр: выполнять операцию, если примыкающий элемент примыкает с заданной стороны","choice_groups_elm":"elm","type":{"types":["enm.cnn_sides"],"is_ref":true}},"offset_option":{"synonym":"Смещ. от","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.offset_options"],"is_ref":true}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"","choice_params":[{"name":"parent","path":["3220e25a-ffcd-11e5-8303-e67fda7f6b46","3220e251-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"transfer_option":{"synonym":"Перенос опер.","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.transfer_operations_options"],"is_ref":true}},"overmeasure":{"synonym":"Припуск","multiline_mode":false,"tooltip":"Учитывать припуск длины элемента (например, на сварку)","type":{"types":["boolean"]}},"is_main_specification_row":{"synonym":"Это строка основной спецификации","multiline_mode":false,"tooltip":"Интерфейсное поле (доп=0) для редактирования без кода","type":{"types":["boolean"]}},"is_set_row":{"synonym":"Это строка набора","multiline_mode":false,"tooltip":"Интерфейсное поле (Номенклатура=Фурнитура) для редактирования без кода","type":{"types":["number"],"digits":1,"fraction_figits":0}},"is_procedure_row":{"synonym":"Это строка операции","multiline_mode":false,"tooltip":"Интерфейсное поле (Номенклатура=Номенклатура И ТипНоменклатуры = Техоперация) для редактирования без кода","type":{"types":["number"],"digits":1,"fraction_figits":0}},"is_order_row":{"synonym":"Это строка заказа","multiline_mode":false,"tooltip":"Если \"Истина\", строка будет добавлена в заказ, а не в спецификацию текущей продукции","type":{"types":["boolean"]}}}},"selection_params":{"name":"ПараметрыОтбора","synonym":"Параметры отбора","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"dop":{"synonym":"Доп","multiline_mode":false,"tooltip":"Элемент дополнительной спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"comparison_type":{"synonym":"Вид сравнения","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["gt","gte","lt","lte","eq","ne","in","nin","inh","ninh"]}],"choice_groups_elm":"elm","type":{"types":["enm.comparison_types"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["comparison_type"],"path":["selection_params","comparison_type"]},{"name":["selection","owner"],"path":["selection_params","param"]},{"name":["txt_row"],"path":["selection_params","txt_row"]}],"choice_type":{"path":["selection_params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового реквизита либо сериализация списочного значения","type":{"types":["string"],"str_len":0}}}},"specification_restrictions":{"name":"ОграниченияСпецификации","synonym":"Ограничения спецификации","tooltip":"","fields":{"elm":{"synonym":"№","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"dop":{"synonym":"Доп","multiline_mode":false,"tooltip":"Элемент дополнительной спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"side":{"synonym":"Сторона","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"lmin":{"synonym":"X min (длина или ширина)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"lmax":{"synonym":"X max (длина или ширина)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"amin":{"synonym":"α мин","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"amax":{"synonym":"α макс","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"for_direct_profile_only":{"synonym":"Для прямых","multiline_mode":false,"tooltip":"Использовать только для прямых профилей (1), только для кривых (-1) или всегда(0)","type":{"types":["number"],"digits":1,"fraction_figits":0}}}},"colors":{"name":"Цвета","synonym":"Цвета","tooltip":"Цаета, доступные для данной фурнитуры","fields":{"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","type":{"types":["cat.clrs"],"is_ref":true}}}}},"cachable":"ram","form":{"selection":{"fields":[],"cols":[{"id":"id","width":"140","type":"ro","align":"left","sort":"server","caption":"Код"},{"id":"open_type","width":"150","type":"ro","align":"left","sort":"server","caption":"Тип открывания"},{"id":"presentation","width":"*","type":"ro","align":"left","sort":"server","caption":"Наименование"}]},"obj":{"head":{" ":["id","name","name_short","parent","open_type","is_set","furn_set"],"Дополнительно":["side_count","left_right","handle_side","is_sliding"]},"tabular_sections":{"open_tunes":{"fields":["side","lmin","lmax","amin","amax","rotation_axis","partial_opening","arc_available","shtulp_available","shtulp_fix_here"],"headers":"Сторона,L min,L max,Угол min,Угол max,Ось поворота,Неполн. откр.,Дуга,Разрешен штульп,Крепится штульп","widths":"*,*,*,*,*,100,100,100,100,100","min_widths":"100,100,100,100,100,100,100,100,100,100","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na","types":"calck,calck,calck,calck,calck,ch,ch,ch,ch,ch"},"specification":{"fields":["elm","dop","nom","clr","quantity","coefficient","side","cnn_side","offset_option","formula","transfer_option"],"headers":"Элемент,Доп,Материал,Цвет,Колич.,Коэфф.,Сторона,Строна соед.,Смещ. от,Формула,Перенос опер.","widths":"80,80,*,140,100,100,100,140,140,140,140","min_widths":"80,80,200,140,100,100,100,140,140,140,140","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na,na","types":"ron,ron,ref,ref,calck,calck,calck,ref,ref,ref,ref"}},"tabular_sections_order":["open_tunes","specification"]}}},"currencies":{"name":"Валюты","splitted":false,"synonym":"Валюты","illustration":"Валюты, используемые при расчетах","obj_presentation":"Валюта","list_presentation":"","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":3,"fields":{"name_full":{"synonym":"Наименование валюты","multiline_mode":false,"tooltip":"Полное наименование валюты","mandatory":true,"type":{"types":["string"],"str_len":50}},"extra_charge":{"synonym":"Наценка","multiline_mode":false,"tooltip":"Коэффициент, который применяется к курсу основной валюты для вычисления курса текущей валюты.","type":{"types":["number"],"digits":10,"fraction_figits":2}},"main_currency":{"synonym":"Основная валюта","multiline_mode":false,"tooltip":"Валюта, на основании курса которой рассчитывается курс текущей валюты","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.currencies"],"is_ref":true}},"parameters_russian_recipe":{"synonym":"Параметры прописи на русском","multiline_mode":false,"tooltip":"Параметры прописи валюты на русском языке","type":{"types":["string"],"str_len":200}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"ram","form":{"selection":{"fields":["ref","_deleted","id","name as presentation","name_full"],"cols":[{"id":"id","width":"120","type":"ro","align":"left","sort":"server","caption":"Код"},{"id":"presentation","width":"*","type":"ro","align":"left","sort":"server","caption":"Обозначение"},{"id":"name_full","width":"*","type":"ro","align":"left","sort":"server","caption":"Наименование"}]},"obj":{"head":{" ":["id","name","name_full","parameters_russian_recipe"],"Дополнительно":["main_currency","extra_charge"]},"tabular_sections":{},"tabular_sections_order":[]}}},"contact_information_kinds":{"name":"ВидыКонтактнойИнформации","splitted":false,"synonym":"Виды контактной информации","illustration":"","obj_presentation":"Вид контактной информации","list_presentation":"","input_by_string":["name"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"mandatory_fields":{"synonym":"Обязательное заполнение","multiline_mode":false,"tooltip":"Вид контактной информации обязателен к заполнению","type":{"types":["boolean"]}},"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"Тип контактной информации (адрес, телефон и т.д.)","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.contact_information_types"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"Группа вида контактной информации","type":{"types":["cat.contact_information_kinds"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"nom_kinds":{"name":"ВидыНоменклатуры","splitted":false,"synonym":"Виды номенклатуры","illustration":"","obj_presentation":"Вид номенклатуры","list_presentation":"","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"nom_type":{"synonym":"Тип номенклатуры","multiline_mode":false,"tooltip":"Указывается тип, к которому относится номенклатура данного вида.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.nom_types"],"is_ref":true}},"dnom":{"synonym":"Набор свойств номенклатура","multiline_mode":false,"tooltip":"Набор свойств, которым будет обладать номенклатура с этим видом","choice_groups_elm":"elm","type":{"types":["cat.destinations"],"is_ref":true}},"dcharacteristic":{"synonym":"Набор свойств характеристика","multiline_mode":false,"tooltip":"Набор свойств, которым будет обладать характеристика с этим видом","choice_groups_elm":"elm","type":{"types":["cat.destinations"],"is_ref":true}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"","type":{"types":["cat.nom_kinds"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"contracts":{"name":"ДоговорыКонтрагентов","splitted":false,"synonym":"Договоры контрагентов","illustration":"Перечень договоров, заключенных с контрагентами","obj_presentation":"Договор контрагента","list_presentation":"Договоры контрагентов","input_by_string":["name","id"],"hierarchical":true,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"settlements_currency":{"synonym":"Валюта взаиморасчетов","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.currencies"],"is_ref":true}},"mutual_settlements":{"synonym":"Ведение взаиморасчетов","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.mutual_contract_settlements"],"is_ref":true}},"contract_kind":{"synonym":"Вид договора","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.contract_kinds"],"is_ref":true}},"date":{"synonym":"Дата","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"check_days_without_pay":{"synonym":"Держать резерв без оплаты ограниченное время","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"allowable_debts_amount":{"synonym":"Допустимая сумма дебиторской задолженности","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"allowable_debts_days":{"synonym":"Допустимое число дней дебиторской задолженности","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":0}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"check_debts_amount":{"synonym":"Контролировать сумму дебиторской задолженности","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"check_debts_days":{"synonym":"Контролировать число дней дебиторской задолженности","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"number_doc":{"synonym":"Номер","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":20}},"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.organizations"],"is_ref":true}},"main_cash_flow_article":{"synonym":"Основная статья движения денежных средств","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.cash_flow_articles"],"is_ref":true}},"main_project":{"synonym":"Основной проект","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.projects"],"is_ref":true}},"accounting_reflect":{"synonym":"Отражать в бухгалтерском учете","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"tax_accounting_reflect":{"synonym":"Отражать в налоговом учете","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"prepayment_percent":{"synonym":"Процент предоплаты","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"validity":{"synonym":"Срок действия договора","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"vat_included":{"synonym":"Сумма включает НДС","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"price_type":{"synonym":"Тип цен","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_prices_types"],"is_ref":true}},"vat_consider":{"synonym":"Учитывать НДС","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"days_without_pay":{"synonym":"Число дней резерва без оплаты","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_folder","path":false}],"mandatory":true,"type":{"types":["cat.partners"],"is_ref":true}},"parent":{"synonym":"Группа договоров","multiline_mode":false,"tooltip":"","type":{"types":["cat.contracts"],"is_ref":true}}},"tabular_sections":{},"cachable":"doc_ram","form":{"selection":{"fields":["is_folder","id","_t_.name as presentation","enm_contract_kinds.synonym as contract_kind","enm_mutual_settlements.synonym as mutual_settlements","cat_organizations.name as organization","cat_partners.name as partner"],"cols":[{"id":"partner","width":"180","type":"ro","align":"left","sort":"server","caption":"Контрагент"},{"id":"organization","width":"180","type":"ro","align":"left","sort":"server","caption":"Организация"},{"id":"presentation","width":"*","type":"ro","align":"left","sort":"server","caption":"Наименование"},{"id":"contract_kind","width":"150","type":"ro","align":"left","sort":"server","caption":"Вид договора"},{"id":"mutual_settlements","width":"150","type":"ro","align":"left","sort":"server","caption":"Ведение расчетов"}]},"obj":{"head":{" ":[{"id":"id","path":"o.id","synonym":"Код","type":"ro"},"parent","name","number_doc","date","validity","owner","organization","contract_kind","mutual_settlements","settlements_currency"],"Дополнительно":["accounting_reflect","tax_accounting_reflect","vat_consider","vat_included","price_type","main_project","main_cash_flow_article","check_debts_amount","check_debts_days","check_days_without_pay","prepayment_percent","allowable_debts_amount","allowable_debts_days","note"]}}}},"nom_units":{"name":"ЕдиницыИзмерения","splitted":false,"synonym":"Единицы измерения","illustration":"Перечень единиц измерения номенклатуры и номенклатурных групп","obj_presentation":"Единица измерения","list_presentation":"Единицы измерения","input_by_string":["name","id"],"hierarchical":false,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"qualifier_unit":{"synonym":"Единица по классификатору","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.units"],"is_ref":true}},"heft":{"synonym":"Вес","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":3}},"volume":{"synonym":"Объем","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":3}},"coefficient":{"synonym":"Коэффициент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"rounding_threshold":{"synonym":"Порог округления","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.nom_groups","cat.nom"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"property_values":{"name":"ЗначенияСвойствОбъектов","splitted":false,"synonym":"Дополнительные значения","illustration":"","obj_presentation":"Дополнительное значение","list_presentation":"","input_by_string":["name"],"hierarchical":true,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"heft":{"synonym":"Весовой коэффициент","multiline_mode":false,"tooltip":"Относительный вес дополнительного значения (значимость).","type":{"types":["number"],"digits":10,"fraction_figits":2}},"ПолноеНаименование":{"synonym":"Полное наименование","multiline_mode":true,"tooltip":"Подробное описание значения дополнительного реквизита","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит или сведение.","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"parent":{"synonym":"Входит в группу","multiline_mode":false,"tooltip":"Группа дополнительных значений свойства.","choice_links":[{"name":["selection","owner"],"path":["owner"]}],"type":{"types":["cat.property_values"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"meta_ids":{"name":"ИдентификаторыОбъектовМетаданных","splitted":false,"synonym":"Идентификаторы объектов метаданных","illustration":"Идентификаторы объектов метаданных для использования в базе данных.","obj_presentation":"Идентификатор объекта метаданных","list_presentation":"","input_by_string":["name"],"hierarchical":true,"has_owners":false,"group_hierarchy":false,"main_presentation_name":true,"code_length":0,"fields":{"full_moniker":{"synonym":"Полное имя","multiline_mode":false,"tooltip":"Полное имя объекта метаданных","type":{"types":["string"],"str_len":430}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа объектов","multiline_mode":false,"tooltip":"Группа объектов метаданных.","type":{"types":["cat.meta_ids"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"cashboxes":{"name":"Кассы","splitted":false,"synonym":"Кассы","illustration":"Список мест фактического хранения и движения наличных денежных средств предприятия. Кассы разделены по организациям и валютам денежных средств. ","obj_presentation":"Касса","list_presentation":"Кассы предприятия","input_by_string":["name","id"],"hierarchical":false,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"funds_currency":{"synonym":"Валюта денежных средств","multiline_mode":false,"tooltip":"Валюта учета денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.currencies"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"Подразделение, отвечающее за кассу.","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"current_account":{"synonym":"Расчетный счет","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["owner"]}],"choice_groups_elm":"elm","type":{"types":["cat.organization_bank_accounts"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_folder","path":false}],"mandatory":true,"type":{"types":["cat.organizations"],"is_ref":true}}},"tabular_sections":{},"cachable":"doc_ram","form":{"obj":{"head":{" ":[{"id":"id","path":"o.id","synonym":"Код","type":"ro"},"name","owner","funds_currency"]}}}},"units":{"name":"КлассификаторЕдиницИзмерения","splitted":false,"synonym":"Классификатор единиц измерения","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":3,"fields":{"name_full":{"synonym":"Полное наименование","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":100}},"international_short":{"synonym":"Международное сокращение","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":3}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"ram"},"partners":{"name":"Контрагенты","splitted":false,"synonym":"Контрагенты","illustration":"Список юридических или физических лиц клиентов (поставщиков, покупателей).","obj_presentation":"Контрагент","list_presentation":"Контрагенты","input_by_string":["name","id","inn"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"name_full":{"synonym":"Полное наименование","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"main_bank_account":{"synonym":"Основной банковский счет","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["ref"]}],"choice_groups_elm":"elm","type":{"types":["cat.partner_bank_accounts"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"kpp":{"synonym":"КПП","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":9}},"okpo":{"synonym":"Код по ОКПО","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":10}},"inn":{"synonym":"ИНН","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":12}},"individual_legal":{"synonym":"Юр. / физ. лицо","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.individual_legal"],"is_ref":true}},"main_contract":{"synonym":"Основной договор контрагента","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["ref"]}],"choice_groups_elm":"elm","type":{"types":["cat.contracts"],"is_ref":true}},"identification_document":{"synonym":"Документ, удостоверяющий личность","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"buyer_main_manager":{"synonym":"Основной менеджер покупателя","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"is_buyer":{"synonym":"Покупатель","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_supplier":{"synonym":"Поставщик","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"primary_contact":{"synonym":"Основное контактное лицо","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.individuals"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа контрагентов","multiline_mode":false,"tooltip":"","type":{"types":["cat.partners"],"is_ref":true}}},"tabular_sections":{"contact_information":{"name":"КонтактнаяИнформация","synonym":"Контактная информация","tooltip":"","fields":{"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"Тип контактной информации (телефон, адрес и т.п.)","choice_groups_elm":"elm","type":{"types":["enm.contact_information_types"],"is_ref":true}},"kind":{"synonym":"Вид","multiline_mode":false,"tooltip":"Вид контактной информации","choice_params":[{"name":"parent","path":"139d49b9-5301-45f3-b851-4488420d7d15"}],"choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}},"presentation":{"synonym":"Представление","multiline_mode":false,"tooltip":"Представление контактной информации для отображения в формах","type":{"types":["string"],"str_len":500}},"values_fields":{"synonym":"Значения полей","multiline_mode":false,"tooltip":"Служебное поле, для хранения контактной информации","type":{"types":["string"],"str_len":0},"hide":true},"country":{"synonym":"Страна","multiline_mode":false,"tooltip":"Страна (заполняется для адреса)","type":{"types":["string"],"str_len":100},"hide":true},"region":{"synonym":"Регион","multiline_mode":false,"tooltip":"Регион (заполняется для адреса)","type":{"types":["string"],"str_len":50},"hide":true},"city":{"synonym":"Город","multiline_mode":false,"tooltip":"Город (заполняется для адреса)","type":{"types":["string"],"str_len":50},"hide":true},"email_address":{"synonym":"Адрес ЭП","multiline_mode":false,"tooltip":"Адрес электронной почты","type":{"types":["string"],"str_len":100},"hide":true},"server_domain_name":{"synonym":"Доменное имя сервера","multiline_mode":false,"tooltip":"Доменное имя сервера электронной почты или веб-страницы","type":{"types":["string"],"str_len":100},"hide":true},"phone_number":{"synonym":"Номер телефона","multiline_mode":false,"tooltip":"Полный номер телефона","type":{"types":["string"],"str_len":20},"hide":true},"phone_without_codes":{"synonym":"Номер телефона без кодов","multiline_mode":false,"tooltip":"Номер телефона без кодов и добавочного номера","type":{"types":["string"],"str_len":20},"hide":true}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0},"hide":true}}}},"cachable":"doc_ram","form":{"obj":{"head":{" ":[{"id":"id","path":"o.id","synonym":"Код","type":"ro"},"parent","name","name_full","is_buyer","is_supplier","individual_legal","inn","kpp","okpo","main_bank_account","main_contract","primary_contact","buyer_main_manager"],"Дополнительные реквизиты":[]},"tabular_sections":{"contact_information":{"fields":["kind","presentation"],"headers":"Вид,Представление","widths":"200,*","min_widths":"100,200","aligns":"","sortings":"na,na","types":"ref,txt"}},"tabular_sections_order":["contact_information"]}}},"nom":{"name":"Номенклатура","splitted":false,"synonym":"Номенклатура","illustration":"Перечень товаров, продукции, материалов, полуфабрикатов, тары, услуг","obj_presentation":"Позиция номенклатуры","list_presentation":"","input_by_string":["name","id","article"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":11,"fields":{"article":{"synonym":"Артикул ","multiline_mode":false,"tooltip":"Артикул номенклатуры.","type":{"types":["string"],"str_len":25}},"name_full":{"synonym":"Наименование для печати","multiline_mode":true,"tooltip":"Наименование номенклатуры, которое будет печататься во всех документах.","type":{"types":["string"],"str_len":1024}},"base_unit":{"synonym":"Базовая единица измерения","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.units"],"is_ref":true}},"storage_unit":{"synonym":"Единица хранения остатков","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["ref"]}],"choice_groups_elm":"elm","type":{"types":["cat.nom_units"],"is_ref":true}},"nom_kind":{"synonym":"Вид номенклатуры","multiline_mode":false,"tooltip":"Указывается вид, к которому следует отнести данную позицию номенклатуры.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom_kinds"],"is_ref":true}},"nom_group":{"synonym":"Номенклатурная группа","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_groups"],"is_ref":true}},"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"Определяется ставка НДС товара или услуги","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.vat_rates"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":true,"tooltip":"","type":{"types":["string"],"str_len":0}},"price_group":{"synonym":"Ценовая группа","multiline_mode":false,"tooltip":"Определяет ценовую группу, к которой относится номенклатурная позиция.","choice_groups_elm":"elm","type":{"types":["cat.price_groups"],"is_ref":true}},"elm_type":{"synonym":"Тип элемента: рама, створка и т.п.","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.elm_types"],"is_ref":true}},"len":{"synonym":"Длина","multiline_mode":false,"tooltip":"Длина стандартной загатовки, мм","type":{"types":["number"],"digits":8,"fraction_figits":1}},"width":{"synonym":"Ширина - A","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"thickness":{"synonym":"Толщина - T","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"sizefurn":{"synonym":"Размер фурн. паза - D","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"sizefaltz":{"synonym":"Размер фальца - F","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"density":{"synonym":"Плотность, кг / ед. хранения","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"volume":{"synonym":"Объем, м³ / ед. хранения","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"arc_elongation":{"synonym":"Удлинение арки","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"loss_factor":{"synonym":"Коэффициент потерь","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":4}},"rounding_quantity":{"synonym":"Округлять количество","multiline_mode":false,"tooltip":"При расчете спецификации построителя, как в функции Окр(). 1: до десятых долей,  0: до целых, -1: до десятков","type":{"types":["number"],"digits":1,"fraction_figits":0}},"clr":{"synonym":"Цвет по умолчанию","multiline_mode":false,"tooltip":"Цвет материала по умолчанию. Актуально для заполнений, которые берём НЕ из системы","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"cutting_optimization_type":{"synonym":"Тип оптимизации","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.cutting_optimization_types"],"is_ref":true}},"crooked":{"synonym":"Кривой","multiline_mode":false,"tooltip":"Если эта номенклатура есть в спецификации - изделие кривое","type":{"types":["boolean"]}},"colored":{"synonym":"Цветной","multiline_mode":false,"tooltip":"Если эта номенклатура есть в спецификации - изделие цветное","type":{"types":["boolean"]}},"lay":{"synonym":"Раскладка","multiline_mode":false,"tooltip":"Если эта номенклатура есть в спецификации - изделие имеет раскладку","type":{"types":["boolean"]}},"made_to_order":{"synonym":"Заказной","multiline_mode":false,"tooltip":"Если эта номенклатура есть в спецификации - изделие имеет заказные материалы, на которые должен обратить внимание ОМТС","type":{"types":["boolean"]}},"packing":{"synonym":"Упаковка","multiline_mode":false,"tooltip":"Если эта номенклатура есть в спецификации - изделию требуется упаковка","type":{"types":["boolean"]}},"days_to_execution":{"synonym":"Дней до готовности","multiline_mode":false,"tooltip":"Если номенклатура есть в спецификации, плановая готовность отодвигается на N дней","type":{"types":["number"],"digits":6,"fraction_figits":0}},"days_from_execution":{"synonym":"Дней от готовности","multiline_mode":false,"tooltip":"Обратный отсчет. Когда надо запустить в работу в цехе. Должно иметь значение <= ДнейДоГотовности","type":{"types":["number"],"digits":6,"fraction_figits":0}},"pricing":{"synonym":"","multiline_mode":false,"tooltip":"Дополнительная формула расчета цены на случай, когда не хватает возможностей стандартной подисистемы","choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"visualization":{"synonym":"Визуализация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.elm_visualization"],"is_ref":true}},"complete_list_sorting":{"synonym":"Сортировка в листе комплектации","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":2,"fraction_figits":0}},"is_accessory":{"synonym":"Это аксессуар","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_procedure":{"synonym":"Это техоперация","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_service":{"synonym":"Это услуга","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_pieces":{"synonym":"Штуки","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"Группа, в которую входит данная позиция номенклатуры.","type":{"types":["cat.nom"],"is_ref":true}}},"tabular_sections":{"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Набор реквизитов, состав которого определяется компанией.","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0},"hide":true}}}},"cachable":"ram","form":{"selection":{"fields":[],"cols":[{"id":"id","width":"140","type":"ro","align":"left","sort":"server","caption":"Код"},{"id":"article","width":"150","type":"ro","align":"left","sort":"server","caption":"Артикул"},{"id":"presentation","width":"*","type":"ro","align":"left","sort":"server","caption":"Наименование"},{"id":"nom_unit","width":"70","type":"ro","align":"left","sort":"server","caption":"Ед"},{"id":"thickness","width":"70","type":"ro","align":"left","sort":"server","caption":"Толщина"}]}}},"organizations":{"name":"Организации","splitted":false,"synonym":"Организации","illustration":"","obj_presentation":"Организация","list_presentation":"","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"prefix":{"synonym":"Префикс","multiline_mode":false,"tooltip":"Используется при нумерации документов. В начало каждого номера документов данной организации добавляется символы префикса.","type":{"types":["string"],"str_len":3}},"individual_legal":{"synonym":"Юр. / физ. лицо","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.individual_legal"],"is_ref":true}},"individual_entrepreneur":{"synonym":"Индивидуальный предприниматель","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.individuals"],"is_ref":true}},"inn":{"synonym":"ИНН","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":12}},"kpp":{"synonym":"КПП","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":9}},"main_bank_account":{"synonym":"Основной банковский счет","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["ref"]}],"choice_groups_elm":"elm","type":{"types":["cat.organization_bank_accounts"],"is_ref":true}},"main_cashbox":{"synonym":"Основноая касса","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["ref"]}],"choice_groups_elm":"elm","type":{"types":["cat.cashboxes"],"is_ref":true}},"certificate_series_number":{"synonym":"Серия и номер свидетельства о постановке на учет","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":25}},"certificate_date_issue":{"synonym":"Дата выдачи свидетельства о постановке на учет","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"certificate_authority_name":{"synonym":"Наименование налогового органа, выдавшего свидетельство","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":254}},"certificate_authority_code":{"synonym":"Код налогового органа, выдавшего свидетельство","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":4}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.organizations"],"is_ref":true}}},"tabular_sections":{"contact_information":{"name":"КонтактнаяИнформация","synonym":"Контактная информация","tooltip":"Хранение контактной информации (адреса, веб-страницы, номера телефонов и др.)","fields":{"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"Тип контактной информации (телефон, адрес и т.п.)","choice_groups_elm":"elm","type":{"types":["enm.contact_information_types"],"is_ref":true}},"kind":{"synonym":"Вид","multiline_mode":false,"tooltip":"Вид контактной информации","choice_params":[{"name":"parent","path":"c34c4e9d-c7c5-42bb-8def-93ecfe7b1977"}],"choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}},"presentation":{"synonym":"Представление","multiline_mode":false,"tooltip":"Представление контактной информации для отображения в формах","type":{"types":["string"],"str_len":500}},"values_fields":{"synonym":"Значения полей","multiline_mode":false,"tooltip":"Служебное поле, для хранения контактной информации","type":{"types":["string"],"str_len":0},"hide":true},"country":{"synonym":"Страна","multiline_mode":false,"tooltip":"Страна (заполняется для адреса)","type":{"types":["string"],"str_len":100},"hide":true},"region":{"synonym":"Регион","multiline_mode":false,"tooltip":"Регион (заполняется для адреса)","type":{"types":["string"],"str_len":50},"hide":true},"city":{"synonym":"Город","multiline_mode":false,"tooltip":"Город (заполняется для адреса)","type":{"types":["string"],"str_len":50},"hide":true},"email_address":{"synonym":"Адрес ЭП","multiline_mode":false,"tooltip":"Адрес электронной почты","type":{"types":["string"],"str_len":100},"hide":true},"server_domain_name":{"synonym":"Доменное имя сервера","multiline_mode":false,"tooltip":"Доменное имя сервера электронной почты или веб-страницы","type":{"types":["string"],"str_len":100},"hide":true},"phone_number":{"synonym":"Номер телефона","multiline_mode":false,"tooltip":"Полный номер телефона","type":{"types":["string"],"str_len":20},"hide":true},"phone_without_codes":{"synonym":"Номер телефона без кодов","multiline_mode":false,"tooltip":"Номер телефона без кодов и добавочного номера","type":{"types":["string"],"str_len":20},"hide":true},"ВидДляСписка":{"synonym":"Вид для списка","multiline_mode":false,"tooltip":"Вид контактной информации для списка","choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}},"ДействуетС":{"synonym":"Действует С","multiline_mode":false,"tooltip":"Дата актуальности контактная информация","type":{"types":["date"],"date_part":"date"}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Набор реквизитов, состав которого определяется компанией.","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0},"hide":true}}}},"cachable":"ram","form":{"obj":{"head":{" ":[{"id":"id","path":"o.id","synonym":"Код","type":"ro"},{"id":"prefix","path":"o.prefix","synonym":"Префикс","type":"ro"},"name","individual_legal","individual_entrepreneur","main_bank_account","main_cashbox"],"Коды":["inn","kpp","certificate_series_number","certificate_date_issue","certificate_authority_name","certificate_authority_code"]},"tabular_sections":{"contact_information":{"fields":["kind","presentation"],"headers":"Вид,Представление","widths":"200,*","min_widths":"100,200","aligns":"","sortings":"na,na","types":"ref,txt"}},"tabular_sections_order":["contact_information"]}}},"inserts":{"name":"Вставки","splitted":false,"synonym":"Вставки","illustration":"Армирование, пленки, вставки - дополнение спецификации, которое зависит от одного элемента","obj_presentation":"Вставка","list_presentation":"Вставки","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"article":{"synonym":"Артикул ","multiline_mode":false,"tooltip":"Для формулы","type":{"types":["string"],"str_len":100}},"insert_type":{"synonym":"Тип вставки","multiline_mode":false,"tooltip":"Используется, как фильтр в интерфейсе, плюс, от типа вставки могут зависеть алгоритмы расчета количеств и углов","choice_params":[{"name":"ref","path":["Профиль","Заполнение","МоскитнаяСетка","Элемент","Контур","Изделие","Подоконник","Откос","Водоотлив","Монтаж","Доставка","Набор"]}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.inserts_types"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"Вставку можно использовать для элементов с этим цветом","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.clrs"],"is_ref":true}},"lmin":{"synonym":"X min","multiline_mode":false,"tooltip":"X min (длина или ширина)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"lmax":{"synonym":"X max","multiline_mode":false,"tooltip":"X max (длина или ширина)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"hmin":{"synonym":"Y min","multiline_mode":false,"tooltip":"Y min (высота)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"hmax":{"synonym":"Y max","multiline_mode":false,"tooltip":"Y max (высота)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"smin":{"synonym":"S min","multiline_mode":false,"tooltip":"Площадь min","type":{"types":["number"],"digits":8,"fraction_figits":3}},"smax":{"synonym":"S max","multiline_mode":false,"tooltip":"Площадь max","type":{"types":["number"],"digits":8,"fraction_figits":3}},"for_direct_profile_only":{"synonym":"Для прямых","multiline_mode":false,"tooltip":"Использовать только для прямых профилей (1), только для кривых (-1) или всегда(0)","type":{"types":["number"],"digits":1,"fraction_figits":0}},"ahmin":{"synonym":"α min","multiline_mode":false,"tooltip":"AH min (угол к горизонтали)","type":{"types":["number"],"digits":3,"fraction_figits":0}},"ahmax":{"synonym":"α max","multiline_mode":false,"tooltip":"AH max (угол к горизонтали)","type":{"types":["number"],"digits":3,"fraction_figits":0}},"priority":{"synonym":"Приоритет","multiline_mode":false,"tooltip":"Не используется","type":{"types":["number"],"digits":6,"fraction_figits":0}},"mmin":{"synonym":"Масса min","multiline_mode":false,"tooltip":"M min (масса)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"mmax":{"synonym":"Масса max","multiline_mode":false,"tooltip":"M max (масса)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"impost_fixation":{"synonym":"Крепление импостов","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.impost_mount_options"],"is_ref":true}},"shtulp_fixation":{"synonym":"Крепление штульпа","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"can_rotate":{"synonym":"Можно поворачивать","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"sizeb":{"synonym":"Размер \"B\"","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"clr_group":{"synonym":"Доступность цветов","multiline_mode":false,"tooltip":"Если указано, выбор цветов будет ограничен этой группой","choice_params":[{"name":"color_price_group_destination","path":"ДляОграниченияДоступности"}],"choice_groups_elm":"elm","type":{"types":["cat.color_price_groups"],"is_ref":true}},"is_order_row":{"synonym":"Это строка заказа","multiline_mode":false,"tooltip":"Если заполнено, строка будет добавлена в заказ, а не в спецификацию текущей продукции","choice_groups_elm":"elm","type":{"types":["enm.specification_order_row_types"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"insert_glass_type":{"synonym":"Тип вставки стп","multiline_mode":false,"tooltip":"Тип вставки стеклопакета","choice_groups_elm":"elm","type":{"types":["enm.inserts_glass_types"],"is_ref":true}},"available":{"synonym":"Доступна в интерфейсе","multiline_mode":false,"tooltip":"Показывать эту вставку в списках допвставок в элемент, изделие и контур","type":{"types":["boolean"]}},"slave":{"synonym":"Ведомая","multiline_mode":false,"tooltip":"Выполнять пересчет спецификации этой вставки при изменении других строк заказа (например, спецификация монтажа)","type":{"types":["boolean"]}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{"specification":{"name":"Спецификация","synonym":"Спецификация","tooltip":"","fields":{"elm":{"synonym":"№","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.inserts","cat.nom"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"nom_characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["specification","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":8}},"sz":{"synonym":"Размер","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"coefficient":{"synonym":"Коэфф.","multiline_mode":false,"tooltip":"коэффициент (кол-во комплектующего на 1мм профиля или 1м² заполнения)","type":{"types":["number"],"digits":14,"fraction_figits":8}},"angle_calc_method":{"synonym":"Расчет угла","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.angle_calculating_ways"],"is_ref":true}},"count_calc_method":{"synonym":"Расчет колич.","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.count_calculating_ways"],"is_ref":true}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"","choice_params":[{"name":"parent","path":["3220e24b-ffcd-11e5-8303-e67fda7f6b46","3220e251-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"lmin":{"synonym":"Длина min","multiline_mode":false,"tooltip":"Минимальная длина или ширина","type":{"types":["number"],"digits":6,"fraction_figits":0}},"lmax":{"synonym":"Длина max","multiline_mode":false,"tooltip":"Максимальная длина или ширина","type":{"types":["number"],"digits":6,"fraction_figits":0}},"ahmin":{"synonym":"Угол min","multiline_mode":false,"tooltip":"Минимальный угол к горизонтали","type":{"types":["number"],"digits":3,"fraction_figits":0}},"ahmax":{"synonym":"Угол max","multiline_mode":false,"tooltip":"Максимальный угол к горизонтали","type":{"types":["number"],"digits":3,"fraction_figits":0}},"smin":{"synonym":"S min","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"smax":{"synonym":"S max","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"for_direct_profile_only":{"synonym":"Для прямых","multiline_mode":false,"tooltip":"Использовать только для прямых профилей (1), только для кривых (-1) или всегда(0)","type":{"types":["number"],"digits":1,"fraction_figits":0}},"step":{"synonym":"Шаг","multiline_mode":false,"tooltip":"Шаг (расчет по точкам)","type":{"types":["number"],"digits":10,"fraction_figits":3}},"step_angle":{"synonym":"Угол шага","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"offsets":{"synonym":"Отступы шага","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"do_center":{"synonym":"↔","multiline_mode":false,"tooltip":"Положение от края или от центра","type":{"types":["boolean"]}},"attrs_option":{"synonym":"Направления","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.inset_attrs_options"],"is_ref":true}},"end_mount":{"synonym":"Концевые крепления","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_order_row":{"synonym":"Это строка заказа","multiline_mode":false,"tooltip":"Если заполнено, строка будет добавлена в заказ, а не в спецификацию текущей продукции","choice_groups_elm":"elm","type":{"types":["enm.specification_order_row_types"],"is_ref":true}},"is_main_elm":{"synonym":"Это основной элемент","multiline_mode":false,"tooltip":"Для профильных вставок определяет номенклатуру, размеры которой будут использованы при построении эскиза","type":{"types":["boolean"]}}}},"selection_params":{"name":"ПараметрыОтбора","synonym":"Параметры отбора","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"comparison_type":{"synonym":"Вид сравнения","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["gt","gte","lt","lte","eq","ne","in","nin","inh","ninh"]}],"choice_groups_elm":"elm","type":{"types":["enm.comparison_types"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["comparison_type"],"path":["selection_params","comparison_type"]},{"name":["selection","owner"],"path":["selection_params","param"]},{"name":["txt_row"],"path":["selection_params","txt_row"]}],"choice_type":{"path":["selection_params","param"],"elm":0},"mandatory":true,"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового реквизита либо сериализация списочного значения","type":{"types":["string"],"str_len":0}}}},"product_params":{"name":"ПараметрыИзделия","synonym":"Параметры изделия","tooltip":"Значения по умолчанию (для параметрических изделий)","fields":{"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["product_params","param"]}],"choice_groups_elm":"elm","choice_type":{"path":["product_params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"hide":{"synonym":"Скрыть","multiline_mode":false,"tooltip":"Не показывать строку параметра в диалоге свойств изделия","type":{"types":["boolean"]}},"forcibly":{"synonym":"Принудительно","multiline_mode":false,"tooltip":"Замещать установленное ранее значение при перевыборе системы","type":{"types":["boolean"]}}}}},"cachable":"ram","form":{"selection":{"fields":[],"cols":[{"id":"id","width":"140","type":"ro","align":"left","sort":"server","caption":"Код"},{"id":"insert_type","width":"200","type":"ro","align":"left","sort":"server","caption":"Тип вставки"},{"id":"presentation","width":"*","type":"ro","align":"left","sort":"server","caption":"Наименование"}]},"obj":{"head":{" ":["id","name","insert_type","sizeb","clr","clr_group","is_order_row","priority"],"Дополнительно":["lmin","lmax","hmin","hmax","smin","smax","ahmin","ahmax","mmin","mmax","for_direct_profile_only","impost_fixation","shtulp_fixation","can_rotate"]},"tabular_sections":{"specification":{"fields":["nom","clr","quantity","sz","coefficient","angle_calc_method","count_calc_method","formula","is_order_row","is_main_elm","lmin","lmax","ahmin","ahmax","smin","smax"],"headers":"Номенклатура,Цвет,Колич.,Размер,Коэфф.,Расч.угла,Расч.колич.,Формула,↑ В заказ,Осн. мат.,Длина min,Длина max,Угол min,Угол max,S min, S max","widths":"*,160,100,100,100,140,140,160,80,80,100,100,100,100,100,100","min_widths":"200,160,100,100,100,140,140,160,140,80,100,100,100,100,100,100","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na,na,na,na,na,na,na","types":"ref,ref,calck,calck,calck,ref,ref,ref,ref,ch,calck,calck,calck,calck,calck,calck"}},"tabular_sections_order":["specification"]}}},"parameters_keys":{"name":"КлючиПараметров","splitted":false,"synonym":"Ключи параметров","illustration":"Списки пар {Параметр:Значение} для фильтрации в подсистемах формирования спецификаций, планировании и ценообразовании\n","obj_presentation":"Ключ параметров","list_presentation":"Ключи параметров","input_by_string":["name"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"priority":{"synonym":"Приоритет","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"sorting_field":{"synonym":"Порядок","multiline_mode":false,"tooltip":"Используется для упорядочивания","type":{"types":["number"],"digits":5,"fraction_figits":0}},"applying":{"synonym":"Применение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.parameters_keys_applying"],"is_ref":true}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.parameters_keys"],"is_ref":true}}},"tabular_sections":{"params":{"name":"Параметры","synonym":"Параметры","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"comparison_type":{"synonym":"Вид сравнения","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["gt","gte","lt","lte","eq","ne","in","nin","inh","ninh"]}],"choice_groups_elm":"elm","type":{"types":["enm.comparison_types"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["comparison_type"],"path":["params","comparison_type"]},{"name":["selection","owner"],"path":["params","property"]},{"name":["txt_row"],"path":["params","txt_row"]}],"choice_type":{"path":["params","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового реквизита либо сериализация списочного значения","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc_ram"},"production_params":{"name":"пзПараметрыПродукции","splitted":false,"synonym":"Параметры продукции","illustration":"Настройки системы профилей и фурнитуры","obj_presentation":"Система","list_presentation":"Параметры продукции","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"default_clr":{"synonym":"Осн цвет","multiline_mode":false,"tooltip":"Основной цвет изделия","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"clr_group":{"synonym":"Доступность цветов","multiline_mode":false,"tooltip":"","choice_params":[{"name":"color_price_group_destination","path":"ДляОграниченияДоступности"}],"choice_groups_elm":"elm","type":{"types":["cat.color_price_groups"],"is_ref":true}},"tmin":{"synonym":"Толщина заполнения min ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"tmax":{"synonym":"Толщина заполнения max ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"allow_open_cnn":{"synonym":"Незамкн. контуры","multiline_mode":false,"tooltip":"Допускаются незамкнутые контуры","type":{"types":["boolean"]}},"flap_pos_by_impost":{"synonym":"Положение ств. по имп.","multiline_mode":false,"tooltip":"Использовать положения Центр, Центр вертикаль и Центр горизонталь для створок","type":{"types":["boolean"]}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"","type":{"types":["cat.production_params"],"is_ref":true}}},"tabular_sections":{"elmnts":{"name":"Элементы","synonym":"Элементы","tooltip":"Типовые рама, створка, импост и заполнение для данной системы","fields":{"by_default":{"synonym":"По умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"elm_type":{"synonym":"Тип элемента","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Рама","Створка","Импост","Штульп","Заполнение","Раскладка","Добор","Соединитель","Москитка","Водоотлив","Стекло"]}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.elm_types"],"is_ref":true}},"nom":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.inserts"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"pos":{"synonym":"Положение","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Лев","Прав","Верх","Низ","ЦентрВертикаль","ЦентрГоризонталь","Центр","Любое"]}],"choice_groups_elm":"elm","type":{"types":["enm.positions"],"is_ref":true}}}},"production":{"name":"Продукция","synonym":"Продукция","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["production","param"]}],"choice_groups_elm":"elm","choice_type":{"path":["production","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}}}},"product_params":{"name":"ПараметрыИзделия","synonym":"Параметры изделия","tooltip":"Значения параметров изделия по умолчанию","fields":{"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["product_params","param"]}],"choice_groups_elm":"elm","choice_type":{"path":["product_params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"hide":{"synonym":"Скрыть","multiline_mode":false,"tooltip":"Не показывать строку параметра в диалоге свойств изделия","type":{"types":["boolean"]}},"forcibly":{"synonym":"Принудительно","multiline_mode":false,"tooltip":"Замещать установленное ранее значение при перевыборе системы","type":{"types":["boolean"]}}}},"furn_params":{"name":"ПараметрыФурнитуры","synonym":"Параметры фурнитуры","tooltip":"Значения параметров фурнитуры по умолчанию","fields":{"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["furn_params","param"]}],"choice_groups_elm":"elm","choice_type":{"path":["furn_params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"hide":{"synonym":"Скрыть","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"forcibly":{"synonym":"Принудительно","multiline_mode":false,"tooltip":"Замещать установленное ранее значение при перевыборе системы","type":{"types":["boolean"]}}}},"base_blocks":{"name":"ТиповыеБлоки","synonym":"Шаблоны","tooltip":"","fields":{"calc_order":{"synonym":"Расчет","multiline_mode":false,"tooltip":"","choice_params":[{"name":"obj_delivery_state","path":"Шаблон"}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["doc.calc_order"],"is_ref":true}}}}},"cachable":"ram","form":{"obj":{"head":{" ":["id","name","parent","clr_group","tmin","tmax","allow_open_cnn"]},"tabular_sections":{"elmnts":{"fields":["by_default","elm_type","nom","clr","pos"],"headers":"√,Тип,Номенклатура,Цвет,Положение","widths":"70,160,*,160,160","min_widths":"70,160,200,160,160","aligns":"","sortings":"na,na,na,na,na","types":"ch,ref,ref,ref,ref"},"production":{"fields":["nom","param","value"],"headers":"Номенклатура,Параметр,Значение","widths":"*,160,160","min_widths":"200,160,160","aligns":"","sortings":"na,na,na","types":"ref,ro,ro"},"product_params":{"fields":["param","value","hide","forcibly"],"headers":"Параметр,Значение,Скрыть,Принудительно","widths":"*,*,80,80","min_widths":"200,200,80,80","aligns":"","sortings":"na,na,na,na","types":"ro,ro,ch,ch"},"furn_params":{"fields":["param","value","hide","forcibly"],"headers":"Параметр,Значение,Скрыть,Принудительно","widths":"*,*,80,80","min_widths":"200,200,80,80","aligns":"","sortings":"na,na,na,na","types":"ro,ro,ch,ch"},"base_blocks":{"fields":["calc_order"],"headers":"Расчет","widths":"*","min_widths":"200","aligns":"","sortings":"na","types":"ref"}},"tabular_sections_order":["elmnts","production","product_params","furn_params","base_blocks"]}}},"delivery_areas":{"name":"РайоныДоставки","splitted":false,"synonym":"Районы доставки","illustration":"","obj_presentation":"Район доставки","list_presentation":"Районы доставки","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"country":{"synonym":"Страна","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.countries"],"is_ref":true}},"region":{"synonym":"Регион","multiline_mode":false,"tooltip":"Регион, край, область","mandatory":true,"type":{"types":["string"],"str_len":50}},"city":{"synonym":"Город (населенный пункт)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"latitude":{"synonym":"Гео. коорд. Широта","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":12}},"longitude":{"synonym":"Гео. коорд. Долгота","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":12}},"ind":{"synonym":"Индекс","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":6}},"delivery_area":{"synonym":"Район (внутри города)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"specify_area_by_geocoder":{"synonym":"Уточнять район геокодером","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"ram"},"cnns":{"name":"пзСоединения","splitted":false,"synonym":"Соединения элементов","illustration":"Спецификации соединений элементов","obj_presentation":"Соединение","list_presentation":"Соединения","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"priority":{"synonym":"Приоритет","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"amin":{"synonym":"Угол минимальный","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"amax":{"synonym":"Угол максимальный","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"sd1":{"synonym":"Сторона","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.cnn_sides"],"is_ref":true}},"sz":{"synonym":"Размер","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"cnn_type":{"synonym":"Тип соединения","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.cnn_types"],"is_ref":true}},"ahmin":{"synonym":"AH min (угол к горизонтали)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"ahmax":{"synonym":"AH max (угол к горизонтали)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}},"lmin":{"synonym":"Длина шва min ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"lmax":{"synonym":"Длина шва max ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"tmin":{"synonym":"Толщина min ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"tmax":{"synonym":"Толщина max ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"var_layers":{"synonym":"Разн. плоск. створок","multiline_mode":false,"tooltip":"Створки в разных плоскостях","type":{"types":["boolean"]}},"for_direct_profile_only":{"synonym":"Для прямых","multiline_mode":false,"tooltip":"Использовать только для прямых профилей (1), только для кривых (-1) или всегда(0)","type":{"types":["number"],"digits":1,"fraction_figits":0}},"art1vert":{"synonym":"Арт1 верт.","multiline_mode":false,"tooltip":"Соединение используется только в том случае, если Артикул1 - вертикальный","type":{"types":["boolean"]}},"art1glass":{"synonym":"Арт1 - стеклопакет","multiline_mode":false,"tooltip":"Артикул1 может быть составным стеклопакетом","type":{"types":["boolean"]}},"art2glass":{"synonym":"Арт2 - стеклопакет","multiline_mode":false,"tooltip":"Артикул2 может быть составным стеклопакетом","type":{"types":["boolean"]}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{"specification":{"name":"Спецификация","synonym":"Спецификация","tooltip":"","fields":{"elm":{"synonym":"№","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.inserts","cat.nom"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"nom_characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["specification","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"coefficient":{"synonym":"Коэффициент","multiline_mode":false,"tooltip":"коэффициент (кол-во комплектующего на 1мм профиля)","type":{"types":["number"],"digits":14,"fraction_figits":8}},"sz":{"synonym":"Размер","multiline_mode":false,"tooltip":"размер (в мм, на которое компл. заходит на Артикул 2)","type":{"types":["number"],"digits":8,"fraction_figits":1}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":8}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"","choice_params":[{"name":"parent","path":["3220e259-ffcd-11e5-8303-e67fda7f6b46","3220e251-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"sz_min":{"synonym":"Размер min","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"sz_max":{"synonym":"Размер max","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"amin":{"synonym":"Угол min","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"amax":{"synonym":"Угол max","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"set_specification":{"synonym":"Устанавливать","multiline_mode":false,"tooltip":"Устанавливать спецификацию","choice_groups_elm":"elm","type":{"types":["enm.specification_installation_methods"],"is_ref":true}},"for_direct_profile_only":{"synonym":"Для прямых","multiline_mode":false,"tooltip":"Использовать только для прямых профилей (1), только для кривых (-1) или всегда(0)","type":{"types":["number"],"digits":1,"fraction_figits":0}},"by_contour":{"synonym":"По контуру","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"contraction_by_contour":{"synonym":"Укорочение по контуру","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"on_aperture":{"synonym":"На проем","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"angle_calc_method":{"synonym":"Расчет угла","multiline_mode":false,"tooltip":"Способ расчета угла","choice_groups_elm":"elm","type":{"types":["enm.angle_calculating_ways"],"is_ref":true}},"contour_number":{"synonym":"Контур №","multiline_mode":false,"tooltip":"Номер контура (доп)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"is_order_row":{"synonym":"Это строка заказа","multiline_mode":false,"tooltip":"Если \"Истина\", строка будет добавлена в заказ, а не в спецификацию текущей продукции","type":{"types":["boolean"]}}}},"cnn_elmnts":{"name":"СоединяемыеЭлементы","synonym":"Соединяемые элементы","tooltip":"","fields":{"nom1":{"synonym":"Номенклатура1","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"clr1":{"synonym":"Цвет1","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"nom2":{"synonym":"Номенклатура2","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"clr2":{"synonym":"Цвет2","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"varclr":{"synonym":"Разные цвета","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"is_nom_combinations_row":{"synonym":"Это строка сочетания номенклатур","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"selection_params":{"name":"ПараметрыОтбора","synonym":"Параметры отбора","tooltip":"","fields":{"elm":{"synonym":"№","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"comparison_type":{"synonym":"Вид сравнения","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["gt","gte","lt","lte","eq","ne","in","nin","inh","ninh"]}],"choice_groups_elm":"elm","type":{"types":["enm.comparison_types"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["comparison_type"],"path":["selection_params","comparison_type"]},{"name":["selection","owner"],"path":["selection_params","param"]},{"name":["txt_row"],"path":["selection_params","txt_row"]}],"choice_type":{"path":["selection_params","param"],"elm":0},"mandatory":true,"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового реквизита либо сериализация списочного значения","type":{"types":["string"],"str_len":0}}}}},"cachable":"ram","form":{"selection":{"fields":[],"cols":[{"id":"id","width":"140","type":"ro","align":"left","sort":"server","caption":"Код"},{"id":"cnn_type","width":"200","type":"ro","align":"left","sort":"server","caption":"Тип"},{"id":"presentation","width":"*","type":"ro","align":"left","sort":"server","caption":"Наименование"}]},"obj":{"head":{" ":["id","name","cnn_type","sz","priority"],"Дополнительно":["sd1","amin","amax","ahmin","ahmax","lmin","lmax","tmin","tmax","var_layers","for_direct_profile_only","art1vert","art1glass","art2glass"]},"tabular_sections":{"specification":{"fields":["nom","clr","quantity","sz","coefficient","angle_calc_method","formula","is_order_row","sz_min","sz_max","amin","amax","set_specification","for_direct_profile_only"],"headers":"Номенклатура,Цвет,Колич.,Размер,Коэфф.,Расч.угла,Формула,↑ В заказ,Размер min,Размер max,Угол min,Угол max,Устанавливать,Для прямых","widths":"*,160,100,100,100,140,160,140,100,100,100,100,140,140","min_widths":"200,160,100,100,100,140,160,140,100,100,100,100,140,140","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na,na,na,na,na","types":"ref,ref,calck,calck,calck,ref,ref,ref,calck,calck,calck,calck,ref,calck"},"cnn_elmnts":{"fields":["nom1","clr1","nom2","clr2","varclr","is_nom_combinations_row"],"headers":"Номенклатура1,Цвет1,Номенклатура2,Цвет2,Разные цвета","widths":"*,*,*,*,100","min_widths":"160,160,160,160,100","aligns":"","sortings":"na,na,na,na,na","types":"ref,ref,ref,ref,ch"}},"tabular_sections_order":["specification","cnn_elmnts"]}}},"color_price_groups":{"name":"ЦветоЦеновыеГруппы","splitted":false,"synonym":"Цвето-ценовые группы","illustration":"","obj_presentation":"Цвето-ценовая группа","list_presentation":"Цвето-ценовые группы","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"color_price_group_destination":{"synonym":"Назначение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.color_price_group_destinations"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{"price_groups":{"name":"ЦеновыеГруппы","synonym":"Ценовые группы","tooltip":"","fields":{"price_group":{"synonym":"Ценовая гр. или номенклатура","multiline_mode":false,"tooltip":"Ссылка на ценовую группу или номенклатуру или папку (родитель - первый уровень иерархии) номенклатуры, для которой действует соответствие цветов","type":{"types":["cat.price_groups","cat.nom"],"is_ref":true}}}},"clr_conformity":{"name":"СоответствиеЦветов","synonym":"Соответствие цветов","tooltip":"","fields":{"clr1":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","type":{"types":["cat.color_price_groups","cat.clrs"],"is_ref":true}},"clr2":{"synonym":"Соответствие","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}}}}},"cachable":"ram"},"divisions":{"name":"Подразделения","splitted":false,"synonym":"Подразделения","illustration":"Перечень подразделений предприятия","obj_presentation":"Подразделение","list_presentation":"Подразделения","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":false,"main_presentation_name":true,"code_length":9,"fields":{"main_project":{"synonym":"Основной проект","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.projects"],"is_ref":true}},"sorting_field":{"synonym":"Порядок","multiline_mode":false,"tooltip":"Используется для упорядочивания (служебный)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Входит в подразделение","multiline_mode":false,"tooltip":"","type":{"types":["cat.divisions"],"is_ref":true}}},"tabular_sections":{"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Набор реквизитов, состав которого определяется компанией.","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc_ram"},"users":{"name":"Пользователи","splitted":false,"synonym":"Пользователи","illustration":"","obj_presentation":"Пользователь","list_presentation":"","input_by_string":["name"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"invalid":{"synonym":"Недействителен","multiline_mode":false,"tooltip":"Пользователь больше не работает в программе, но сведения о нем сохранены.\nНедействительные пользователи скрываются из всех списков\nпри выборе или подборе в документах и других местах программы.","type":{"types":["boolean"]}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"Подразделение, в котором работает пользователь","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"individual_person":{"synonym":"Физическое лицо","multiline_mode":false,"tooltip":"Физическое лицо, с которым связан пользователь","choice_groups_elm":"elm","type":{"types":["cat.individuals"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":true,"tooltip":"Произвольная строка","type":{"types":["string"],"str_len":0}},"ancillary":{"synonym":"Служебный","multiline_mode":false,"tooltip":"Неразделенный или разделенный служебный пользователь, права к которому устанавливаются непосредственно и программно.","type":{"types":["boolean"]}},"user_ib_uid":{"synonym":"Идентификатор пользователя ИБ","multiline_mode":false,"tooltip":"Уникальный идентификатор пользователя информационной базы, с которым сопоставлен этот элемент справочника.","choice_groups_elm":"elm","type":{"types":["string"],"str_len":36,"str_fix":true}},"user_fresh_uid":{"synonym":"Идентификатор пользователя сервиса","multiline_mode":false,"tooltip":"Уникальный идентификатор пользователя сервиса, с которым сопоставлен этот элемент справочника.","choice_groups_elm":"elm","type":{"types":["string"],"str_len":36,"str_fix":true}},"id":{"synonym":"Логин","multiline_mode":true,"tooltip":"Произвольная строка","type":{"types":["string"],"str_len":50}},"prefix":{"synonym":"Префикс нумерации документов","multiline_mode":false,"tooltip":"Префикс номеров документов текущего пользователя","mandatory":true,"type":{"types":["string"],"str_len":2}},"branch":{"synonym":"Отдел","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.branches"],"is_ref":true}},"push_only":{"synonym":"Только push репликация","multiline_mode":false,"tooltip":"Для пользователя установлен режим push-only (изменения мигрируют в одну сторону - от пользователя на сервер)","type":{"types":["boolean"]}},"suffix":{"synonym":"Суффикс CouchDB","multiline_mode":false,"tooltip":"Для разделения данных в CouchDB","mandatory":true,"type":{"types":["string"],"str_len":4}},"direct":{"synonym":"Direct","multiline_mode":false,"tooltip":"Для пользователя запрещен режим offline","type":{"types":["boolean"]}}},"tabular_sections":{"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Дополнительные реквизиты объекта","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}},"contact_information":{"name":"КонтактнаяИнформация","synonym":"Контактная информация","tooltip":"Хранение контактной информации (адреса, веб-страницы, номера телефонов и др.)","fields":{"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"Тип контактной информации (телефон, адрес и т.п.)","choice_groups_elm":"elm","type":{"types":["enm.contact_information_types"],"is_ref":true}},"kind":{"synonym":"Вид","multiline_mode":false,"tooltip":"Вид контактной информации","choice_params":[{"name":"parent","path":"8cbaa30d-faab-45ad-880e-84f8b421f448"}],"choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}},"presentation":{"synonym":"Представление","multiline_mode":false,"tooltip":"Представление контактной информации для отображения в формах","type":{"types":["string"],"str_len":500}},"values_fields":{"synonym":"Значения полей","multiline_mode":false,"tooltip":"Служебное поле, для хранения контактной информации","type":{"types":["string"],"str_len":0}},"country":{"synonym":"Страна","multiline_mode":false,"tooltip":"Страна (заполняется для адреса)","type":{"types":["string"],"str_len":100}},"region":{"synonym":"Регион","multiline_mode":false,"tooltip":"Регион (заполняется для адреса)","type":{"types":["string"],"str_len":50}},"city":{"synonym":"Город","multiline_mode":false,"tooltip":"Город (заполняется для адреса)","type":{"types":["string"],"str_len":50}},"email_address":{"synonym":"Адрес ЭП","multiline_mode":false,"tooltip":"Адрес электронной почты","type":{"types":["string"],"str_len":100}},"server_domain_name":{"synonym":"Доменное имя сервера","multiline_mode":false,"tooltip":"Доменное имя сервера электронной почты или веб-страницы","type":{"types":["string"],"str_len":100}},"phone_number":{"synonym":"Номер телефона","multiline_mode":false,"tooltip":"Полный номер телефона","type":{"types":["string"],"str_len":20}},"phone_without_codes":{"synonym":"Номер телефона без кодов","multiline_mode":false,"tooltip":"Номер телефона без кодов и добавочного номера","type":{"types":["string"],"str_len":20}},"ВидДляСписка":{"synonym":"Вид для списка","multiline_mode":false,"tooltip":"Вид контактной информации для списка","choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}}}},"acl_objs":{"name":"ОбъектыДоступа","synonym":"Объекты доступа","tooltip":"","fields":{"acl_obj":{"synonym":"Объект доступа","multiline_mode":false,"tooltip":"","type":{"types":["cat.individuals","cat.users","cat.nom_prices_types","cat.divisions","cat.parameters_keys","cat.partners","cat.organizations","cat.cashboxes","cat.meta_ids","cat.stores"],"is_ref":true}},"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"by_default":{"synonym":"По умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}}},"cachable":"ram","form":{"obj":{"head":{" ":["id","name","individual_person"],"Дополнительно":["ancillary","invalid",{"id":"user_ib_uid","path":"o.user_ib_uid","synonym":"Идентификатор пользователя ИБ","type":"ro"},{"id":"user_fresh_uid","path":"o.user_fresh_uid","synonym":"Идентификатор пользователя сервиса","type":"ro"},"note"]},"tabular_sections":{"contact_information":{"fields":["kind","presentation"],"headers":"Вид,Представление","widths":"200,*","min_widths":"100,200","aligns":"","sortings":"na,na","types":"ref,txt"}},"tabular_sections_order":["contact_information"]}}},"projects":{"name":"Проекты","splitted":false,"synonym":"Проекты","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":11,"fields":{"start":{"synonym":"Старт","multiline_mode":false,"tooltip":"Плановая дата начала работ по проекту.","type":{"types":["date"],"date_part":"date"}},"finish":{"synonym":"Финиш","multiline_mode":false,"tooltip":"Плановая дата окончания работ по проекту.","type":{"types":["date"],"date_part":"date"}},"launch":{"synonym":"Запуск","multiline_mode":false,"tooltip":"Фактическая дата начала работ по проекту.","type":{"types":["date"],"date_part":"date_time"}},"readiness":{"synonym":"Готовность","multiline_mode":false,"tooltip":"Фактическая дата окончания  работ по проекту.","type":{"types":["date"],"date_part":"date_time"}},"finished":{"synonym":"Завершен","multiline_mode":false,"tooltip":"Признак, указывающий на то, что работы по проекту завершены.","type":{"types":["boolean"]}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Ответственный за реализацию проекта.","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"Любые комментарии по проекту","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.projects"],"is_ref":true}}},"tabular_sections":{"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Набор реквизитов, состав которого определяется компанией.","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc"},"stores":{"name":"Склады","splitted":false,"synonym":"Склады (места хранения)","illustration":"Сведения о местах хранения товаров (складах), их структуре и физических лицах, назначенных материально ответственными (МОЛ) за тот или иной склад","obj_presentation":"Склад","list_presentation":"Склады","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Группа","multiline_mode":false,"tooltip":"","type":{"types":["cat.stores"],"is_ref":true}}},"tabular_sections":{"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"Набор реквизитов, состав которого определяется компанией.","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc_ram"},"cash_flow_articles":{"name":"СтатьиДвиженияДенежныхСредств","splitted":false,"synonym":"Статьи движения денежных средств","illustration":"Перечень статей движения денежных средств (ДДС), используемых в предприятии для проведения анализа поступлений и расходов в разрезе статей движения денежных средств. ","obj_presentation":"Статья движения денежных средств","list_presentation":"Статьи движения денежных средств","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"definition":{"synonym":"Описание","multiline_mode":true,"tooltip":"Рекомендации по выбору статьи движения денежных средств в документах","type":{"types":["string"],"str_len":1024}},"sorting_field":{"synonym":"Порядок","multiline_mode":false,"tooltip":"Определяет порядок вывода вариантов анализа в мониторе целевых показателей при группировке по категориям целей.","type":{"types":["number"],"digits":6,"fraction_figits":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"В группе статей","multiline_mode":false,"tooltip":"Группа статей движения денежных средств","type":{"types":["cat.cash_flow_articles"],"is_ref":true}}},"tabular_sections":{},"cachable":"doc"},"nom_prices_types":{"name":"ТипыЦенНоменклатуры","splitted":false,"synonym":"Типы цен номенклатуры","illustration":"Перечень типов отпускных цен предприятия","obj_presentation":"Тип цен номенклатуры","list_presentation":"Типы цен номенклатуры","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"price_currency":{"synonym":"Валюта цены по умолчанию","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.currencies"],"is_ref":true}},"discount_percent":{"synonym":"Процент скидки или наценки по умолчанию","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"vat_price_included":{"synonym":"Цена включает НДС","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"rounding_order":{"synonym":"Порядок округления","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":10}},"rounding_in_a_big_way":{"synonym":"Округлять в большую сторону","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"doc_ram"},"individuals":{"name":"ФизическиеЛица","splitted":false,"synonym":"Физические лица","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":10,"fields":{"birth_date":{"synonym":"Дата рождения","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"inn":{"synonym":"ИНН","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":12}},"imns_code":{"synonym":"Код ИФНС","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":4}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"pfr_number":{"synonym":"Страховой номер ПФР","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":14}},"sex":{"synonym":"Пол","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.gender"],"is_ref":true}},"birth_place":{"synonym":"Место рождения","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":240}},"ОсновноеИзображение":{"synonym":"Основное изображение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.Файлы"],"is_ref":true}},"Фамилия":{"synonym":"Фамилия","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"Имя":{"synonym":"Имя","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"Отчество":{"synonym":"Отчество","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"ФамилияРП":{"synonym":"Фамилия (родительный падеж)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"ИмяРП":{"synonym":"Имя (родительный падеж)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"ОтчествоРП":{"synonym":"Отчество (родительный падеж)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"ОснованиеРП":{"synonym":"Основание (родительный падеж)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"ДолжностьРП":{"synonym":"Должность (родительный падеж)","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"Должность":{"synonym":"Должность","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.individuals"],"is_ref":true}}},"tabular_sections":{"contact_information":{"name":"КонтактнаяИнформация","synonym":"Контактная информация","tooltip":"Хранение контактной информации (адреса, веб-страницы, номера телефонов и др.)","fields":{"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"Тип контактной информации (телефон, адрес и т.п.)","choice_groups_elm":"elm","type":{"types":["enm.contact_information_types"],"is_ref":true}},"kind":{"synonym":"Вид","multiline_mode":false,"tooltip":"Вид контактной информации","choice_params":[{"name":"parent","path":"822f19bc-09ab-4913-b283-b5461382a75d"}],"choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}},"presentation":{"synonym":"Представление","multiline_mode":false,"tooltip":"Представление контактной информации для отображения в формах","type":{"types":["string"],"str_len":500}},"values_fields":{"synonym":"Значения полей","multiline_mode":false,"tooltip":"Служебное поле, для хранения контактной информации","type":{"types":["string"],"str_len":0}},"country":{"synonym":"Страна","multiline_mode":false,"tooltip":"Страна (заполняется для адреса)","type":{"types":["string"],"str_len":100}},"region":{"synonym":"Регион","multiline_mode":false,"tooltip":"Регион (заполняется для адреса)","type":{"types":["string"],"str_len":50}},"city":{"synonym":"Город","multiline_mode":false,"tooltip":"Город (заполняется для адреса)","type":{"types":["string"],"str_len":50}},"email_address":{"synonym":"Адрес ЭП","multiline_mode":false,"tooltip":"Адрес электронной почты","type":{"types":["string"],"str_len":100}},"server_domain_name":{"synonym":"Доменное имя сервера","multiline_mode":false,"tooltip":"Доменное имя сервера электронной почты или веб-страницы","type":{"types":["string"],"str_len":100}},"phone_number":{"synonym":"Номер телефона","multiline_mode":false,"tooltip":"Полный номер телефона","type":{"types":["string"],"str_len":20}},"phone_without_codes":{"synonym":"Номер телефона без кодов","multiline_mode":false,"tooltip":"Номер телефона без кодов и добавочного номера","type":{"types":["string"],"str_len":20}},"ВидДляСписка":{"synonym":"Вид для списка","multiline_mode":false,"tooltip":"Вид контактной информации для списка","choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}}}}},"cachable":"ram","form":{"obj":{"head":{" ":[{"id":"id","path":"o.id","synonym":"Код","type":"ro"},"name","sex","birth_date",{"id":"parent","path":"o.parent","synonym":"Группа","type":"ref"}],"Коды":["inn","imns_code","pfr_number"],"Для печатных форм":["Фамилия","Имя","Отчество","ФамилияРП","ИмяРП","ОтчествоРП","Должность","ДолжностьРП","ОснованиеРП"]},"tabular_sections":{"contact_information":{"fields":["kind","presentation"],"headers":"Вид,Представление","widths":"200,*","min_widths":"100,200","aligns":"","sortings":"na,na","types":"ref,txt"}},"tabular_sections_order":["contact_information"]}}},"characteristics":{"name":"ХарактеристикиНоменклатуры","splitted":false,"synonym":"Характеристики номенклатуры","illustration":"Дополнительные характеристики элементов номенклатуры: цвет, размер и т.п.","obj_presentation":"Характеристика номенклатуры","list_presentation":"Характеристики номенклатуры","input_by_string":["name"],"hierarchical":false,"has_owners":true,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"x":{"synonym":"Длина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"y":{"synonym":"Высота, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"z":{"synonym":"Толщина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"s":{"synonym":"Площадь, м²","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"weight":{"synonym":"Масса, кг","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"calc_order":{"synonym":"Расчет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"product":{"synonym":"Изделие","multiline_mode":false,"tooltip":"Для продукции - номер строки заказа, для характеристики стеклопакета - номер элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"leading_product":{"synonym":"Ведущая продукция","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"leading_elm":{"synonym":"Ведущий элемент","multiline_mode":false,"tooltip":"Для москиток и стеклопакетов - номер элемента ведущей продукции","type":{"types":["number"],"digits":6,"fraction_figits":0}},"origin":{"synonym":"Происхождение","multiline_mode":false,"tooltip":"Используется в связке с ведущей продукцией и ведущим элементом","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"base_block":{"synonym":"Типовой блок","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"sys":{"synonym":"Система","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.production_params"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":512}},"obj_delivery_state":{"synonym":"Этап согласования","multiline_mode":false,"tooltip":"Для целей RLS","choice_params":[{"name":"ref","path":["Подтвержден","Отклонен","Архив","Шаблон","Черновик"]}],"choice_groups_elm":"elm","type":{"types":["enm.obj_delivery_states"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"Для целей RLS","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"department":{"synonym":"Офис продаж","multiline_mode":false,"tooltip":"Для целей RLS","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"builder_props":{"synonym":"Доп. свойства построителя","multiline_mode":false,"tooltip":"Объект JSON-строкой","type":{"types":["string"],"str_len":1000}},"svg":{"synonym":"Миниэскиз","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0},"compress":true},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"owner":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}}},"tabular_sections":{"constructions":{"name":"Конструкции","synonym":"Конструкции","tooltip":"Конструкции изделия. Они же - слои или контуры","fields":{"cnstr":{"synonym":"№ Конструкции","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"parent":{"synonym":"Внешн. констр.","multiline_mode":false,"tooltip":"№ внешней конструкции","type":{"types":["number"],"digits":6,"fraction_figits":0}},"x":{"synonym":"Ширина, м","multiline_mode":false,"tooltip":"Габаритная ширина контура","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y":{"synonym":"Высота, м","multiline_mode":false,"tooltip":"Габаритная высота контура","type":{"types":["number"],"digits":8,"fraction_figits":1}},"z":{"synonym":"Глубина","multiline_mode":false,"tooltip":"Z-координата плоскости (z-index) длч многослойных конструкций","type":{"types":["number"],"digits":8,"fraction_figits":1}},"w":{"synonym":"Ширина фурн","multiline_mode":false,"tooltip":"Ширина фурнитуры (по фальцу)","type":{"types":["number"],"digits":8,"fraction_figits":1}},"h":{"synonym":"Высота фурн","multiline_mode":false,"tooltip":"Высота фурнитуры (по фальцу)","type":{"types":["number"],"digits":8,"fraction_figits":1}},"furn":{"synonym":"Фурнитура","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_folder","path":false},{"name":"is_set","path":false}],"choice_groups_elm":"elm","type":{"types":["cat.furns"],"is_ref":true}},"clr_furn":{"synonym":"Цвет фурнитуры","multiline_mode":false,"tooltip":"Цвет москитной сетки","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"direction":{"synonym":"Направл. откр.","multiline_mode":false,"tooltip":"Направление открывания","choice_params":[{"name":"ref","path":["Левое","Правое"]}],"choice_groups_elm":"elm","type":{"types":["enm.open_directions"],"is_ref":true}},"h_ruch":{"synonym":"Высота ручки","multiline_mode":false,"tooltip":"Высота ручки в координатах контура (от габарита створки)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"fix_ruch":{"synonym":"Высота ручки фиксирована","multiline_mode":false,"tooltip":"Вычисляется по свойствам фурнитуры","type":{"types":["number"],"digits":6,"fraction_figits":0}},"is_rectangular":{"synonym":"Есть кривые","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"coordinates":{"name":"Координаты","synonym":"Координаты","tooltip":"Координаты элементов","fields":{"cnstr":{"synonym":"Конструкция","multiline_mode":false,"tooltip":"Номер конструкции (слоя)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"parent":{"synonym":"Родитель","multiline_mode":false,"tooltip":"Дополнительная иерархия. Например, номер стеклопакета для раскладки или внешняя примыкающая палка для створки или доборного профиля","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Номер элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm_type":{"synonym":"Тип элемента","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.elm_types"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"inset":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"path_data":{"synonym":"Путь SVG","multiline_mode":false,"tooltip":"Данные пути образующей в терминах svg или json элемента","type":{"types":["string"],"str_len":1000}},"x1":{"synonym":"X1","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y1":{"synonym":"Y1","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"x2":{"synonym":"X2","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y2":{"synonym":"Y2","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"r":{"synonym":"Радиус","multiline_mode":false,"tooltip":"Вспомогательное поле - частный случай криволинейного элемента","type":{"types":["number"],"digits":8,"fraction_figits":1}},"arc_ccw":{"synonym":"Против часов.","multiline_mode":false,"tooltip":"Вспомогательное поле - частный случай криволинейного элемента - дуга против часовой стрелки","type":{"types":["boolean"]}},"s":{"synonym":"Площадь","multiline_mode":false,"tooltip":"Вычисляемое","type":{"types":["number"],"digits":14,"fraction_figits":6}},"angle_hor":{"synonym":"Угол к горизонту","multiline_mode":false,"tooltip":"Вычисляется для прямой, проходящей через узлы","type":{"types":["number"],"digits":8,"fraction_figits":1}},"alp1":{"synonym":"Угол 1, °","multiline_mode":false,"tooltip":"Вычисляемое - угол реза в первом узле","type":{"types":["number"],"digits":8,"fraction_figits":1}},"alp2":{"synonym":"Угол 2, °","multiline_mode":false,"tooltip":"Вычисляемое - угол реза во втором узле","type":{"types":["number"],"digits":8,"fraction_figits":1}},"len":{"synonym":"Длина, м","multiline_mode":false,"tooltip":"Вычисляется по координатам и соединениям","type":{"types":["number"],"digits":8,"fraction_figits":1}},"pos":{"synonym":"Положение","multiline_mode":false,"tooltip":"Вычисляется во соседним элементам","choice_groups_elm":"elm","type":{"types":["enm.positions"],"is_ref":true}},"orientation":{"synonym":"Ориентация","multiline_mode":false,"tooltip":"Вычисляется по углу к горизонту","choice_groups_elm":"elm","type":{"types":["enm.orientations"],"is_ref":true}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"Вычисляется по вставке, геометрии и параметрам","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}}}},"inserts":{"name":"Вставки","synonym":"Вставки","tooltip":"Дополнительные вставки в изделие и контуры","fields":{"cnstr":{"synonym":"Конструкция","multiline_mode":false,"tooltip":"Номер конструкции (слоя)\nЕсли 0, вставка относится к изделию.\nЕсли >0 - к контуру\nЕсли <0 - к элементу","type":{"types":["number"],"digits":6,"fraction_figits":0}},"inset":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_params":[{"name":"insert_type","path":["МоскитнаяСетка","Контур","Изделие"]},{"name":"available","path":true}],"choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}}}},"params":{"name":"Параметры","synonym":"Параметры","tooltip":"Параметры изделий и фурнитуры","fields":{"cnstr":{"synonym":"Конструкция","multiline_mode":false,"tooltip":"Если 0, параметр относится к изделию.\nЕсли >0 - к фурнитуре створки или контуру\nЕсли <0 - к элементу","type":{"types":["number"],"digits":6,"fraction_figits":0}},"inset":{"synonym":"Вставка","multiline_mode":false,"tooltip":"Фильтр для дополнительных вставок","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["params","param"]}],"choice_groups_elm":"elm","choice_type":{"path":["params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"hide":{"synonym":"Скрыть","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"cnn_elmnts":{"name":"СоединяемыеЭлементы","synonym":"Соединяемые элементы","tooltip":"Соединения элементов","fields":{"elm1":{"synonym":"Элем 1","multiline_mode":false,"tooltip":"Номер первого элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"node1":{"synonym":"Узел 1","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":1}},"elm2":{"synonym":"Элем 2","multiline_mode":false,"tooltip":"Номер второго элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"node2":{"synonym":"Узел 2","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":1}},"cnn":{"synonym":"Соединение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.cnns"],"is_ref":true}},"aperture_len":{"synonym":"Длина шва/проема","multiline_mode":false,"tooltip":"Для соединений с заполнениями: длина светового проема примыкающего элемента","type":{"types":["number"],"digits":8,"fraction_figits":1}}}},"glass_specification":{"name":"СпецификацияЗаполнений","synonym":"Спецификация заполнений (ORDGLP)","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"gno":{"synonym":"Порядок","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"inset":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_params":[{"name":"insert_type","path":["Заполнение","Элемент"]}],"choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}},"glasses":{"name":"Заполнения","synonym":"Заполнения","tooltip":"Стеклопакеты и сэндвичи - вычисляемая табличная часть (кеш) для упрощения отчетов","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"№ элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["string","cat.nom"],"str_len":50,"is_ref":true}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics","string"],"is_ref":true,"str_len":50}},"width":{"synonym":"Ширина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}},"height":{"synonym":"Высота, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}},"s":{"synonym":"Площадь, м ²","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}},"is_rectangular":{"synonym":"Прямоуг.","multiline_mode":false,"tooltip":"Прямоугольное заполнение","type":{"types":["boolean"]}},"is_sandwich":{"synonym":"Листовые","multiline_mode":false,"tooltip":"Непрозрачное заполнение - сэндвич","type":{"types":["boolean"]}},"thickness":{"synonym":"Толщина","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":2,"fraction_figits":0}},"coffer":{"synonym":"Камеры","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}}}},"specification":{"name":"Спецификация","compress":true,"synonym":"Спецификация","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Номер элемента, если значение > 0, либо номер конструкции, если значение < 0","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["specification","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"qty":{"synonym":"Количество (шт)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"len":{"synonym":"Длина/высота, м","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"width":{"synonym":"Ширина, м","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"s":{"synonym":"Площадь, м²","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"alp1":{"synonym":"Угол 1, °","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"alp2":{"synonym":"Угол 2, °","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"totqty":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":4}},"totqty1":{"synonym":"Количество (+%)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":4}},"price":{"synonym":"Себест.план","multiline_mode":false,"tooltip":"Цена плановой себестоимости строки спецификации","type":{"types":["number"],"digits":15,"fraction_figits":4}},"amount":{"synonym":"Сумма себест.","multiline_mode":false,"tooltip":"Сумма плановой себестоимости строки спецификации","type":{"types":["number"],"digits":15,"fraction_figits":4}},"amount_marged":{"synonym":"Сумма с наценкой","multiline_mode":false,"tooltip":"Вклад строки спецификации в стоимость изделия для сценария КМАРЖ_В_СПЕЦИФИКАЦИИ","type":{"types":["number"],"digits":15,"fraction_figits":4}},"origin":{"synonym":"Происхождение","multiline_mode":false,"tooltip":"Ссылка на настройки построителя, из которых возникла строка спецификации","choice_groups_elm":"elm","type":{"types":["cat.inserts","number","cat.cnns","cat.furns"],"is_ref":true,"digits":6,"fraction_figits":0}},"changed":{"synonym":"Запись изменена","multiline_mode":false,"tooltip":"Запись изменена оператором (1) или добавлена корректировкой спецификации (-1)","type":{"types":["number"],"digits":1,"fraction_figits":0}},"dop":{"synonym":"Это акс. или визуализ.","multiline_mode":false,"tooltip":"Содержит (1) для строк аксессуаров и (-1) для строк с визуализацией","type":{"types":["number"],"digits":1,"fraction_figits":0}}}}},"cachable":"doc","form":{"obj":{"head":{" ":["name","owner","calc_order","product","leading_product","leading_elm"],"Дополнительно":["x","y","z","s","clr","weight","condition_products"]},"tabular_sections":{"specification":{"fields":["elm","nom","clr","characteristic","qty","len","width","s","alp1","alp2","totqty1","price","amount","amount_marged"],"headers":"Эл.,Номенклатура,Цвет,Характеристика,Колич.,Длина&nbsp;выс.,Ширина,Площадь,Угол1,Угол2,Колич++,Цена,Сумма,Сумма++","widths":"50,*,70,*,50,70,70,80,70,70,70,70,70,80","min_widths":"50,180,70,180,50,80,70,70,70,70,70,70,70,70","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na,na,na,na,na","types":"ron,ref,ref,ref,calck,calck,calck,calck,calck,calck,ron,ron,ron,ron"},"constructions":{"fields":["cnstr","parent","x","y","w","h","furn","clr_furn","direction","h_ruch"],"headers":"Констр.,Внешн.,Ширина,Высота,Ширина фурн.,Высота фурн.,Фурнитура,Цвет фурн.,Открывание,Высота ручки","widths":"50,50,70,70,70,70,*,80,80,70","min_widths":"50,50,70,70,70,70,120,80,80,70","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na","types":"ron,ron,ron,ron,ron,ron,ref,ro,ro,ro"},"coordinates":{"fields":["cnstr","parent","elm","elm_type","clr","inset","path_data","x1","y1","x2","y2","len","alp1","alp2","angle_hor","s","pos","orientation"],"headers":"Констр.,Внешн.,Эл.,Тип,Цвет,Вставка,Путь,x1,y1,x2,y2,Длина,Угол1,Угол2,Горизонт,Площадь,Положение,Ориентация","widths":"50,50,50,70,80,*,70,70,70,70,70,70,70,70,70,70,70,70","min_widths":"50,50,50,70,80,120,70,70,70,70,70,70,70,70,70,70,70,70","aligns":"","sortings":"na,na,na,na,na,na,na,na,na,na,na,na,na,na,na,na,na,na","types":"ron,ron,ron,ref,ref,ref,ro,ron,ron,ron,ron,ron,ron,ron,ron,ron,ro,ro"},"inserts":{"fields":["cnstr","inset","clr"],"headers":"Констр.,Вставка,Цвет","widths":"50,*,*","min_widths":"50,100,100","aligns":"","sortings":"na,na,na","types":"calck,ref,ref"},"cnn_elmnts":{"fields":["elm1","elm2","node1","node2","aperture_len","cnn"],"headers":"Эл1,Эл2,Узел1,Узел2,Длина,Соединение","widths":"50,50,50,50,160,*","min_widths":"50,50,50,50,100,200","aligns":"","sortings":"na,na,na,na,na,na","types":"calck,calck,ed,ed,calck,ref"},"params":{"fields":["cnstr","inset","param","value","hide"],"headers":"Констр.,Вставка,Параметр,Значение,Скрыть","widths":"50,80,*,*,50","min_widths":"50,70,200,200,50","aligns":"","sortings":"na,na,na,na,na","types":"ron,ro,ro,ro,ch"}},"tabular_sections_order":["specification","constructions","coordinates","inserts","cnn_elmnts","params"]}}},"price_groups":{"name":"ЦеновыеГруппы","splitted":false,"synonym":"Ценовые группы","illustration":"","obj_presentation":"Ценовая группа","list_presentation":"Ценовые группы","input_by_string":["name"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"definition":{"synonym":"Описание","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":1024}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"ram"},"nom_groups":{"name":"ГруппыФинансовогоУчетаНоменклатуры","splitted":false,"synonym":"Группы фин. учета номенклатуры","illustration":"Перечень номенклатурных групп для учета затрат и укрупненного планирования продаж, закупок и производства","obj_presentation":"Номенклатурная группа","list_presentation":"Номенклатурные группы","input_by_string":["name","id"],"hierarchical":true,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.vat_rates"],"is_ref":true}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"Раздел","multiline_mode":false,"tooltip":"","type":{"types":["cat.nom_groups"],"is_ref":true}}},"tabular_sections":{},"cachable":"ram"},"insert_bind":{"name":"ПривязкиВставок","splitted":false,"synonym":"Привязки вставок","illustration":"Замена регистра \"Корректировка спецификации\"","obj_presentation":"Привязка вставки","list_presentation":"Привязки вставок","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"Если указано, привязка распространяется только на продукцию, параметры окружения которой, совпадают с параметрами ключа параметров","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"captured":{"synonym":"Захвачен","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"editor":{"synonym":"Редактор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"zone":{"synonym":"Область","multiline_mode":false,"tooltip":"Разделитель (префикс) данных","type":{"types":["number"],"digits":6,"fraction_figits":0}},"zones":{"synonym":"Абоненты-получатели","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{"production":{"name":"Продукция","synonym":"Продукция","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["cat.production_params","cat.nom"],"is_ref":true}}}},"inserts":{"name":"Вставки","synonym":"Вставки","tooltip":"Дополнительные вставки в изделие и контуры","fields":{"inset":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_params":[{"name":"insert_type","path":["МоскитнаяСетка","Контур","Изделие","Водоотлив","Откос","Подоконник"]}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.inserts"],"is_ref":true}},"elm_type":{"synonym":"Контур","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Рама","Створка","Продукция"]}],"choice_groups_elm":"elm","type":{"types":["enm.elm_types"],"is_ref":true}}}}},"cachable":"ram"},"nonstandard_attributes":{"name":"ПризнакиНестандартов","splitted":false,"synonym":"Признаки нестандартов","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["name"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":0,"fields":{"crooked":{"synonym":"Кривой","multiline_mode":false,"tooltip":"Есть гнутые или наклонные элементы","type":{"types":["boolean"]}},"colored":{"synonym":"Цветной","multiline_mode":false,"tooltip":"Есть покраска или ламинация","type":{"types":["boolean"]}},"lay":{"synonym":"Раскладка","multiline_mode":false,"tooltip":"Содержит стеклопакеты с раскладкой","type":{"types":["boolean"]}},"made_to_order":{"synonym":"Заказной","multiline_mode":false,"tooltip":"Специальный материал под заказ","type":{"types":["boolean"]}},"packing":{"synonym":"Упаковка","multiline_mode":false,"tooltip":"Дополнительная услуга","type":{"types":["boolean"]}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{},"cachable":"doc"},"delivery_directions":{"name":"НаправленияДоставки","splitted":false,"synonym":"Направления доставки","illustration":"Объединяет районы, территории или подразделения продаж","obj_presentation":"Направление доставки","list_presentation":"Направления доставки","input_by_string":["name","id"],"hierarchical":false,"has_owners":false,"group_hierarchy":true,"main_presentation_name":true,"code_length":9,"fields":{"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}}},"tabular_sections":{"composition":{"name":"Состав","synonym":"Состав","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.delivery_areas","cat.divisions"],"is_ref":true}}}}},"cachable":"doc"}},"dp":{"scheme_settings":{"name":"scheme_settings","synonym":"Варианты настроек","fields":{"scheme":{"synonym":"Текущая настройка","tooltip":"Текущий вариант настроек","mandatory":true,"type":{"types":["cat.scheme_settings"],"is_ref":true}}}},"builder_price":{"name":"builder_price","splitted":false,"synonym":"Цены номенклатуры","illustration":"Метаданные карточки цен номенклатуры","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"department":{"synonym":"Офис продаж","multiline_mode":false,"tooltip":"Подразделение продаж","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}}},"tabular_sections":{"goods":{"name":"Товары","synonym":"Цены","tooltip":"","fields":{"price_type":{"synonym":"Тип Цен","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_prices_types"],"is_ref":true}},"date":{"synonym":"Дата","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"nom_characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"currency":{"synonym":"Валюта","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.currencies"],"is_ref":true}}}}}},"builder_size":{"name":"builder_size","splitted":false,"synonym":"Размерная линия","illustration":"Метаданные инструмента ruler","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"offset":{"synonym":"Отступ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"angle":{"synonym":"Поворот","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"fix_angle":{"synonym":"Фикс. угол","multiline_mode":false,"tooltip":"Направлять размерную линию под заданным углом, вместо кратчайшего пути между точками","type":{"types":["boolean"]}},"align":{"synonym":"Выравнивание","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.text_aligns"],"is_ref":true}},"hide_c1":{"synonym":"Скрыть выноску1","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"hide_c2":{"synonym":"Скрыть выноску2","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"hide_line":{"synonym":"Скрыть линию","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"text":{"synonym":"Текст","multiline_mode":true,"tooltip":"","type":{"types":["string"],"str_len":0}},"font_family":{"synonym":"Шрифт","multiline_mode":true,"tooltip":"Имя шрифта","type":{"types":["string"],"str_len":50}},"bold":{"synonym":"Жирный","multiline_mode":true,"tooltip":"","type":{"types":["boolean"]}},"font_size":{"synonym":"Размер","multiline_mode":true,"tooltip":"Размер шрифта","type":{"types":["number"],"digits":3,"fraction_figits":0}}},"tabular_sections":{}},"buyers_order":{"name":"ЗаказПокупателя","splitted":false,"synonym":"Рисовалка","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"sys":{"synonym":"Система","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.production_params"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"len":{"synonym":"Длина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"height":{"synonym":"Высота, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"depth":{"synonym":"Глубина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"s":{"synonym":"Площадь, м²","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"quantity":{"synonym":"Колич., шт","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":150}},"first_cost":{"synonym":"Себест. ед.","multiline_mode":false,"tooltip":"Плановая себестоимость единицы продукции","type":{"types":["number"],"digits":15,"fraction_figits":2}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"discount_percent":{"synonym":"Скидка %","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"discount_percent_internal":{"synonym":"Скидка внутр. %","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"discount":{"synonym":"Скидка","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"shipping_date":{"synonym":"Дата доставки","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"client_number":{"synonym":"Номер клиента","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":20}},"inn":{"synonym":"ИНН Клиента","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":20}},"shipping_address":{"synonym":"Адрес доставки","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":255}},"phone":{"synonym":"Телефон","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":100}},"price_internal":{"synonym":"Цена внутр.","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_internal":{"synonym":"Сумма внутр.","multiline_mode":false,"tooltip":"Сумма внутренней реализации (холдинг) или внешней (от дилера конечному клиенту)","type":{"types":["number"],"digits":15,"fraction_figits":2}},"base_block":{"synonym":"Типовой блок","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}}},"tabular_sections":{"product_params":{"name":"ПараметрыИзделия","synonym":"Параметры продукции","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"param":{"synonym":"Параметр","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["product_params","param"]}],"choice_groups_elm":"elm","choice_type":{"path":["product_params","param"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"hide":{"synonym":"Скрыть","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"production":{"name":"Продукция","synonym":"Продукция","tooltip":"","fields":{"inset":{"synonym":"Продукция","multiline_mode":false,"tooltip":"","choice_params":[{"name":"insert_type","path":["Изделие","МоскитнаяСетка","Подоконник","Откос","Заполнение","Монтаж","Доставка"]},{"name":"available","path":true}],"choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["production","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"len":{"synonym":"Длина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"height":{"synonym":"Высота, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"depth":{"synonym":"Глубина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"s":{"synonym":"Площадь, м²","multiline_mode":false,"tooltip":"Площадь изделия","type":{"types":["number"],"digits":10,"fraction_figits":4}},"quantity":{"synonym":"Количество, шт","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":150}},"first_cost":{"synonym":"Себест. ед.","multiline_mode":false,"tooltip":"Плановая себестоимость единицы продукции","type":{"types":["number"],"digits":15,"fraction_figits":2}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"discount_percent":{"synonym":"Скидка %","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"ordn":{"synonym":"Ведущая продукция","multiline_mode":false,"tooltip":"ссылка на продукциию, к которой относится материал","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"qty":{"synonym":"Количество, шт","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}}}},"glass_specification":{"name":"СпецификацияЗаполнений","synonym":"Спецификация заполнений (ORDGLP)","tooltip":"","fields":{"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"sorting":{"synonym":"Порядок","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"inset":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}}}},"specification":{"name":"Спецификация","synonym":"Спецификация","tooltip":"","fields":{"elm":{"synonym":"№","multiline_mode":false,"tooltip":"Идентификатор строки спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"dop":{"synonym":"Доп","multiline_mode":false,"tooltip":"Элемент дополнительной спецификации","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура/Набор","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_set","path":true}],"choice_groups_elm":"elm","type":{"types":["cat.inserts","cat.nom","cat.furns"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"handle_height_base":{"synonym":"Выс. ручк.","multiline_mode":false,"tooltip":"Стандартная высота ручки","type":{"types":["number"],"digits":6,"fraction_figits":0}},"handle_height_min":{"synonym":"Выс. ручк. min","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"handle_height_max":{"synonym":"Выс. ручк. max","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"contraction":{"synonym":"Укорочение","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"contraction_option":{"synonym":"Укороч. от","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.contraction_options"],"is_ref":true}},"coefficient":{"synonym":"Коэффициент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"flap_weight_min":{"synonym":"Масса створки min","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"flap_weight_max":{"synonym":"Масса створки max","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"side":{"synonym":"Сторона","multiline_mode":false,"tooltip":"Сторона фурнитуры, на которую устанавливается элемент или на которой выполняется операция","type":{"types":["number"],"digits":1,"fraction_figits":0}},"cnn_side":{"synonym":"Сторона соед.","multiline_mode":false,"tooltip":"Фильтр: выполнять операцию, если примыкающий элемент примыкает с заданной стороны","choice_groups_elm":"elm","type":{"types":["enm.cnn_sides"],"is_ref":true}},"offset_option":{"synonym":"Смещ. от","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.offset_options"],"is_ref":true}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}},"transfer_option":{"synonym":"Перенос опер.","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.transfer_operations_options"],"is_ref":true}},"is_main_specification_row":{"synonym":"Это строка основной спецификации","multiline_mode":false,"tooltip":"Интерфейсное поле (доп=0) для редактирования без кода","type":{"types":["boolean"]}},"is_set_row":{"synonym":"Это строка набора","multiline_mode":false,"tooltip":"Интерфейсное поле (Номенклатура=Фурнитура) для редактирования без кода","type":{"types":["number"],"digits":1,"fraction_figits":0}},"is_procedure_row":{"synonym":"Это строка операции","multiline_mode":false,"tooltip":"Интерфейсное поле (Номенклатура=Номенклатура И ТипНоменклатуры = Техоперация) для редактирования без кода","type":{"types":["number"],"digits":1,"fraction_figits":0}},"is_order_row":{"synonym":"Это строка заказа","multiline_mode":false,"tooltip":"Если \"Истина\", строка будет добавлена в заказ, а не в спецификацию текущей продукции","type":{"types":["boolean"]}},"origin":{"synonym":"Происхождение","multiline_mode":false,"tooltip":"Ссылка на настройки построителя, из которых возникла строка спецификации","choice_groups_elm":"elm","type":{"types":["cat.inserts","number","cat.cnns","cat.furns"],"is_ref":true,"digits":6,"fraction_figits":0}}}},"charges_discounts":{"name":"СкидкиНаценки","synonym":"Скидки наценки","tooltip":"","fields":{"nom_kind":{"synonym":"Группа","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom_kinds"],"is_ref":true}},"discount_percent":{"synonym":"Скидка %","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}}}}},"form":{"obj":{"head":{" ":["calc_order"]},"tabular_sections":{"production":{"fields":["row","inset","clr","len","height","depth","s","quantity","note"],"headers":"№,Продукция,Цвет,Длина,Высота,Глубина,Площадь,Колич.,Комментарий","widths":"40,*,120,80,75,75,75,75,*","min_widths":"30,200,100,70,70,70,70,70,80","aligns":"center,left,left,right,right,right,right,right,left","sortings":"na,na,na,na,na,na,na,na,na","types":"cntr,ref,ref,calck,calck,calck,calck,calck,txt"},"inserts":{"fields":["inset","clr"],"headers":"Вставка,Цвет","widths":"*,*","min_widths":"90,90","aligns":"","sortings":"na,na","types":"ref,ref"}}}}},"builder_lay_impost":{"name":"builder_lay_impost","splitted":false,"synonym":"Импосты и раскладки","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"elm_type":{"synonym":"Тип элемента","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Импост","Раскладка","Рама"]}],"choice_groups_elm":"elm","type":{"types":["enm.elm_types"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"split":{"synonym":"Тип деления","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["ДелениеГоризонтальных","ДелениеВертикальных","КрестВСтык","КрестПересечение"]}],"choice_groups_elm":"elm","type":{"types":["enm.lay_split_types"],"is_ref":true}},"elm_by_y":{"synonym":"Элементов","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":2,"fraction_figits":0}},"step_by_y":{"synonym":"Шаг","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":4,"fraction_figits":0}},"align_by_y":{"synonym":"Опора","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Низ","Верх","Центр"]}],"choice_groups_elm":"elm","type":{"types":["enm.positions"],"is_ref":true}},"inset_by_y":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"elm_by_x":{"synonym":"Элементов","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":2,"fraction_figits":0}},"step_by_x":{"synonym":"Шаг","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":4,"fraction_figits":0}},"align_by_x":{"synonym":"Опора","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Лев","Прав","Центр"]}],"choice_groups_elm":"elm","type":{"types":["enm.positions"],"is_ref":true}},"inset_by_x":{"synonym":"Вставка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"w":{"synonym":"Ширина","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"h":{"synonym":"Высота","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}}},"tabular_sections":{},"form":{"obj":{"head":{" ":["elm_type","clr","split"],"Деление Y":["inset_by_y","elm_by_y","step_by_y","align_by_y"],"Деление X":["inset_by_x","elm_by_x","step_by_x","align_by_x"],"Габариты":["w","h"]}}}},"builder_pen":{"name":"builder_pen","splitted":false,"synonym":"Рисование","illustration":"Метаданные инструмента pen (рисование профилей)","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"elm_type":{"synonym":"Тип элемента","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Рама","Импост","Раскладка","Добор","Соединитель","Водоотлив","Линия"]}],"choice_groups_elm":"elm","type":{"types":["enm.elm_types"],"is_ref":true}},"inset":{"synonym":"Материал профиля","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.inserts"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"bind_generatrix":{"synonym":"Магнит к профилю","multiline_mode":true,"tooltip":"","type":{"types":["boolean"]}},"bind_node":{"synonym":"Магнит к узлам","multiline_mode":true,"tooltip":"","type":{"types":["boolean"]}}},"tabular_sections":{}},"builder_text":{"name":"builder_text","splitted":false,"synonym":"Произвольный текст","illustration":"Метаданные инструмента text","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"text":{"synonym":"Текст","multiline_mode":true,"tooltip":"","type":{"types":["string"],"str_len":0}},"font_family":{"synonym":"Шрифт","multiline_mode":true,"tooltip":"Имя шрифта","type":{"types":["string"],"str_len":50}},"bold":{"synonym":"Жирный","multiline_mode":true,"tooltip":"","type":{"types":["boolean"]}},"font_size":{"synonym":"Размер","multiline_mode":true,"tooltip":"Размер шрифта","type":{"types":["number"],"digits":3,"fraction_figits":0}},"angle":{"synonym":"Поворот","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"align":{"synonym":"Выравнивание","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.text_aligns"],"is_ref":true}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"x":{"synonym":"X коорд.","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y":{"synonym":"Y коорд.","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}}},"tabular_sections":{}},"builder_coordinates":{"name":"builder_coordinates","splitted":false,"synonym":"Таблица координат","illustration":"Метаданные инструмента coordinates","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"bind":{"synonym":"Приязка координат","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["b","e"]}],"choice_groups_elm":"elm","type":{"types":["enm.bind_coordinates"],"is_ref":true}},"path":{"synonym":"Путь","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["generatrix","inner","outer"]}],"choice_groups_elm":"elm","type":{"types":["enm.path_kind"],"is_ref":true}},"offset":{"synonym":"Отступ","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"step":{"synonym":"Шаг","multiline_mode":false,"tooltip":"Шаг (расчет по точкам)","type":{"types":["number"],"digits":10,"fraction_figits":3}},"step_angle":{"synonym":"Угол","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":3,"fraction_figits":0}}},"tabular_sections":{"coordinates":{"name":"Координаты","synonym":"Координаты","tooltip":"","fields":{"x":{"synonym":"X","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y":{"synonym":"Y","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}}}}}}},"doc":{"registers_correction":{"name":"КорректировкаРегистров","splitted":false,"synonym":"Корректировка регистров","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"original_doc_type":{"synonym":"Тип исходного документа","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":255}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"Произвольный комментарий. ","type":{"types":["string"],"str_len":0}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"Для целей RLS","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}}},"tabular_sections":{"registers_table":{"name":"ТаблицаРегистров","synonym":"Таблица регистров","tooltip":"","fields":{"Имя":{"synonym":"Имя","multiline_mode":false,"tooltip":"Имя регистра, которому скорректированы записи.","mandatory":true,"type":{"types":["string"],"str_len":255}}}}},"cachable":"doc"},"purchase":{"name":"ПоступлениеТоваровУслуг","splitted":false,"synonym":"Поступление товаров и услуг","illustration":"Документы отражают поступление товаров и услуг","obj_presentation":"Поступление товаров и услуг","list_presentation":"Поступление товаров и услуг","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_supplier","path":true}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"warehouse":{"synonym":"Склад","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.stores"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"goods":{"name":"Товары","synonym":"Товары","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_params":[{"name":"Услуга","path":false},{"name":"set","path":false}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":3}},"unit":{"synonym":"Единица измерения","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["goods","nom"]}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom_units"],"is_ref":true}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.vat_rates"],"is_ref":true}},"vat_amount":{"synonym":"Сумма НДС","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"trans":{"synonym":"Заказ резерв","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}}}},"services":{"name":"Услуги","synonym":"Услуги","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_params":[{"name":"Услуга","path":true},{"name":"set","path":false}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"content":{"synonym":"Содержание услуги, доп. сведения","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["string"],"str_len":0}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":3}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.vat_rates"],"is_ref":true}},"vat_amount":{"synonym":"Сумма НДС","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"nom_group":{"synonym":"Номенклатурная группа","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_groups"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"cost_item":{"synonym":"Статья затрат","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":10}},"project":{"synonym":"Проект","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.projects"],"is_ref":true}},"buyers_order":{"synonym":"Заказ затрат","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc"},"work_centers_task":{"name":"НарядРЦ","splitted":false,"synonym":"Задание рабочему центру","illustration":"","obj_presentation":"Наряд","list_presentation":"Задания рабочим центрам","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"Участок производства","choice_params":[{"name":"applying","path":"РабочийЦентр"}],"choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"recipient":{"synonym":"Получатель","multiline_mode":false,"tooltip":"СГП или след. передел","choice_params":[{"name":"applying","path":"РабочийЦентр"}],"choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"biz_cuts":{"synonym":"Деловая обрезь","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.use_cut"],"is_ref":true}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"planning":{"name":"Планирование","synonym":"Планирование","tooltip":"","fields":{"obj":{"synonym":"Объект","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"specimen":{"synonym":"Экземпляр","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"power":{"synonym":"Мощность","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}}}},"demand":{"name":"Потребность","synonym":"Материалы","tooltip":"Потребность в материалах","fields":{"production":{"synonym":"Продукция","multiline_mode":false,"tooltip":"Ссылка на характеристику продукции или объект планирования. Указывает, к чему относится материал текущей строки","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"specimen":{"synonym":"Экземпляр","multiline_mode":false,"tooltip":"Номер экземпляра","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Номер элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"Номенклатура потребности. По умолчанию, совпадает с номенклатурой спецификации, но может содержать аналог","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"Характеристика потребности. По умолчанию, совпадает с характеристикой спецификации, но может содержать аналог","choice_links":[{"name":["selection","owner"],"path":["demand","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"final_balance":{"synonym":"Остаток потребности","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":3}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":3}},"from_cut":{"synonym":"Из обрези","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":3}},"close":{"synonym":"Закрыть","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}},"cuts":{"name":"Обрезь","synonym":"Обрезь","tooltip":"Приход и расход деловой обрези","fields":{"record_kind":{"synonym":"Вид движения","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["enm.debit_credit_kinds"],"is_ref":true}},"stick":{"synonym":"№ хлыста","multiline_mode":false,"tooltip":"№ листа (хлыста, заготовки)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"pair":{"synonym":"№ пары","multiline_mode":false,"tooltip":"№ парной заготовки","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["cuts","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"len":{"synonym":"Длина","multiline_mode":false,"tooltip":"длина в мм","type":{"types":["number"],"digits":8,"fraction_figits":1}},"width":{"synonym":"Ширина","multiline_mode":false,"tooltip":"ширина в мм","type":{"types":["number"],"digits":8,"fraction_figits":1}},"x":{"synonym":"Координата X","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y":{"synonym":"Координата Y","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"Количество в единицах хранения","type":{"types":["number"],"digits":8,"fraction_figits":1}},"cell":{"synonym":"Ячейка","multiline_mode":false,"tooltip":"№ ячейки (откуда брать заготовку или куда помещать деловой обрезок)","type":{"types":["string"],"str_len":9}}}},"cutting":{"name":"Раскрой","synonym":"Раскрой","tooltip":"","fields":{"production":{"synonym":"Продукция","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"specimen":{"synonym":"Экземпляр","multiline_mode":false,"tooltip":"Номер экземпляра","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Номер элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["cutting","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"len":{"synonym":"Длина","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"width":{"synonym":"Ширина","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"stick":{"synonym":"№ хлыста","multiline_mode":false,"tooltip":"№ листа (заготовки), на котором размещать изделие","type":{"types":["number"],"digits":6,"fraction_figits":0}},"pair":{"synonym":"№ пары","multiline_mode":false,"tooltip":"№ парного изделия","type":{"types":["number"],"digits":6,"fraction_figits":0}},"orientation":{"synonym":"Ориентация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.orientations"],"is_ref":true}},"elm_type":{"synonym":"Тип элемента","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.elm_types"],"is_ref":true}},"alp1":{"synonym":"Угол реза1","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":2}},"alp2":{"synonym":"Угол реза2","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":2}},"cell":{"synonym":"Ячейка","multiline_mode":false,"tooltip":"№ ячейки (куда помещать изделие)","type":{"types":["string"],"str_len":9}},"part":{"synonym":"Партия","multiline_mode":false,"tooltip":"Партия (такт, группа раскроя)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"x":{"synonym":"Координата X","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"y":{"synonym":"Y","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"rotated":{"synonym":"Поворот","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"nonstandard":{"synonym":"Это нестандарт","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}}}}},"cachable":"doc"},"calc_order":{"name":"Расчет","splitted":false,"synonym":"Расчет-заказ","illustration":"Аналог заказа покупателя типовых конфигураций.\nСодержит инструменты для формирования спецификаций и подготовки данных производства и диспетчеризации","obj_presentation":"Расчет-заказ","list_presentation":"Расчеты-заказы","input_by_string":["number_doc","number_internal"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"number_internal":{"synonym":"Номер внутр","multiline_mode":false,"tooltip":"Дополнительный (внутренний) номер документа","type":{"types":["string"],"str_len":20}},"project":{"synonym":"Проект","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.projects"],"is_ref":true}},"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_folder","path":false}],"choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_buyer","path":true},{"name":"is_folder","path":false}],"choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"client_of_dealer":{"synonym":"Клиент дилера","multiline_mode":false,"tooltip":"Наименование конечного клиента в дилерских заказах","type":{"types":["string"],"str_len":255}},"contract":{"synonym":"Договор контрагента","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["cat.contracts"],"is_ref":true}},"bank_account":{"synonym":"Банковский счет","multiline_mode":false,"tooltip":"Банковский счет организации, на который планируется поступление денежных средств","choice_links":[{"name":["selection","owner"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["cat.organization_bank_accounts"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"Дополнительная информация","type":{"types":["string"],"str_len":255}},"manager":{"synonym":"Менеджер","multiline_mode":false,"tooltip":"Менеджер, оформивший заказ","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"leading_manager":{"synonym":"Ведущий менеджер","multiline_mode":false,"tooltip":"Куратор, ведущий менеджер","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"department":{"synonym":"Офис продаж","multiline_mode":false,"tooltip":"Подразделение продаж","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"warehouse":{"synonym":"Склад","multiline_mode":false,"tooltip":"Склад отгрузки товаров по заказу","type":{"types":["cat.stores"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_operation":{"synonym":"Сумма упр","multiline_mode":false,"tooltip":"Сумма в валюте управленческого учета","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_internal":{"synonym":"Сумма внутр.","multiline_mode":false,"tooltip":"Сумма внутренней реализации","type":{"types":["number"],"digits":15,"fraction_figits":2}},"accessory_characteristic":{"synonym":"Характеристика аксессуаров","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"sys_profile":{"synonym":"Профиль","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":255}},"sys_furn":{"synonym":"Фурнитура","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":255}},"phone":{"synonym":"Телефон","multiline_mode":false,"tooltip":"Телефон по адресу доставки","type":{"types":["string"],"str_len":100}},"delivery_area":{"synonym":"Район","multiline_mode":false,"tooltip":"Район (зона, направление) доставки для группировки при планировании и оптимизации маршрута геокодером","choice_groups_elm":"elm","type":{"types":["cat.delivery_areas"],"is_ref":true}},"shipping_address":{"synonym":"Адрес доставки","multiline_mode":false,"tooltip":"Адрес доставки изделий заказа","type":{"types":["string"],"str_len":255}},"coordinates":{"synonym":"Координаты","multiline_mode":false,"tooltip":"Гео - координаты адреса доставки","type":{"types":["string"],"str_len":50}},"address_fields":{"synonym":"Значения полей адреса","multiline_mode":false,"tooltip":"Служебный реквизит","type":{"types":["string"],"str_len":0}},"difficult":{"synonym":"Сложный","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"vat_consider":{"synonym":"Учитывать НДС","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"vat_included":{"synonym":"Сумма включает НДС","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"settlements_course":{"synonym":"Курс взаиморасчетов","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":4}},"settlements_multiplicity":{"synonym":"Кратность взаиморасчетов","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":0}},"extra_charge_external":{"synonym":"Наценка внешн.","multiline_mode":false,"tooltip":"Наценка внешней (дилерской) продажи по отношению к цене производителя, %.","type":{"types":["number"],"digits":5,"fraction_figits":2}},"obj_delivery_state":{"synonym":"Этап согласования","multiline_mode":false,"tooltip":"","choice_params":[{"name":"ref","path":["Подтвержден","Отклонен","Архив","Шаблон","Черновик"]}],"choice_groups_elm":"elm","type":{"types":["enm.obj_delivery_states"],"is_ref":true}},"category":{"synonym":"Категория заказа","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.order_categories"],"is_ref":true}}},"tabular_sections":{"production":{"name":"Продукция","synonym":"Продукция","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["production","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":255}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}},"unit":{"synonym":"Ед.","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["production","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.nom_units"],"is_ref":true}},"qty":{"synonym":"Количество, шт","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"len":{"synonym":"Длина/высота, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"width":{"synonym":"Ширина, мм","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"s":{"synonym":"Площадь, м²","multiline_mode":false,"tooltip":"Площадь изделия","type":{"types":["number"],"digits":10,"fraction_figits":6}},"first_cost":{"synonym":"Себест. ед.","multiline_mode":false,"tooltip":"Плановая себестоимость единицы продукции","type":{"types":["number"],"digits":15,"fraction_figits":4}},"marginality":{"synonym":"К. марж","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":3}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"discount_percent":{"synonym":"Скидка %","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"discount_percent_internal":{"synonym":"Скидка внутр. %","multiline_mode":false,"tooltip":"Процент скидки для внутренней перепродажи (холдинг) или внешней (дилеры)","type":{"types":["number"],"digits":5,"fraction_figits":2}},"discount":{"synonym":"Скидка","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"margin":{"synonym":"Маржа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"price_internal":{"synonym":"Цена внутр.","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_internal":{"synonym":"Сумма внутр.","multiline_mode":false,"tooltip":"Сумма внутренней реализации (холдинг) или внешней (от дилера конечному клиенту)","type":{"types":["number"],"digits":15,"fraction_figits":2}},"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.vat_rates"],"is_ref":true}},"vat_amount":{"synonym":"Сумма НДС","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"ordn":{"synonym":"Ведущая продукция","multiline_mode":false,"tooltip":"ссылка на продукциию, к которой относится материал","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"changed":{"synonym":"Запись изменена","multiline_mode":false,"tooltip":"Запись изменена оператором (1, -2) или добавлена корректировкой спецификации (-1)","type":{"types":["number"],"digits":1,"fraction_figits":0}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}},"contact_information":{"name":"КонтактнаяИнформация","synonym":"Контактная информация","tooltip":"Хранение контактной информации (адреса, веб-страницы, номера телефонов и др.)","fields":{"type":{"synonym":"Тип","multiline_mode":false,"tooltip":"Тип контактной информации (телефон, адрес и т.п.)","choice_groups_elm":"elm","type":{"types":["enm.contact_information_types"],"is_ref":true}},"kind":{"synonym":"Вид","multiline_mode":false,"tooltip":"Вид контактной информации","choice_groups_elm":"elm","type":{"types":["cat.contact_information_kinds"],"is_ref":true}},"presentation":{"synonym":"Представление","multiline_mode":false,"tooltip":"Представление контактной информации для отображения в формах","type":{"types":["string"],"str_len":500}},"values_fields":{"synonym":"Значения полей","multiline_mode":false,"tooltip":"Служебное поле, для хранения контактной информации","type":{"types":["string"],"str_len":0}},"country":{"synonym":"Страна","multiline_mode":false,"tooltip":"Страна (заполняется для адреса)","type":{"types":["string"],"str_len":100}},"region":{"synonym":"Регион","multiline_mode":false,"tooltip":"Регион (заполняется для адреса)","type":{"types":["string"],"str_len":50}},"city":{"synonym":"Город","multiline_mode":false,"tooltip":"Город (заполняется для адреса)","type":{"types":["string"],"str_len":50}},"email_address":{"synonym":"Адрес ЭП","multiline_mode":false,"tooltip":"Адрес электронной почты","type":{"types":["string"],"str_len":100}},"server_domain_name":{"synonym":"Доменное имя сервера","multiline_mode":false,"tooltip":"Доменное имя сервера электронной почты или веб-страницы","type":{"types":["string"],"str_len":100}},"phone_number":{"synonym":"Номер телефона","multiline_mode":false,"tooltip":"Полный номер телефона","type":{"types":["string"],"str_len":20}},"phone_without_codes":{"synonym":"Номер телефона без кодов","multiline_mode":false,"tooltip":"Номер телефона без кодов и добавочного номера","type":{"types":["string"],"str_len":20}}}},"planning":{"name":"Планирование","synonym":"Планирование","tooltip":"","fields":{"phase":{"synonym":"Фаза","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.planning_phases"],"is_ref":true}},"date":{"synonym":"Дата","multiline_mode":false,"tooltip":"Плановая дата доставки или начала операции","type":{"types":["date"],"date_part":"date"}},"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"Ключ по графику доставок","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"obj":{"synonym":"Объект","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","calc_order"],"path":["ref"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"specimen":{"synonym":"Экземпляр","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"power":{"synonym":"Мощность","multiline_mode":false,"tooltip":"Трудоемкость или время операции","type":{"types":["number"],"digits":8,"fraction_figits":1}}}}},"cachable":"doc","form":{"selection":{"fields":["posted","date","number_doc","number_internal","partner","client_of_dealer","manager","doc_amount","obj_delivery_state","note"],"cols":[{"id":"date","width":"160","type":"ro","align":"left","sort":"server","caption":"Дата"},{"id":"number_doc","width":"120","type":"ro","align":"left","sort":"na","caption":"№"},{"id":"number_internal","width":"160","type":"ro","align":"left","sort":"na","caption":"№ внутр"},{"id":"partner","width":"180","type":"ro","align":"left","sort":"na","caption":"Контрагент"},{"id":"client_of_dealer","width":"*","type":"ro","align":"left","sort":"na","caption":"Клиент"},{"id":"manager","width":"180","type":"ro","align":"left","sort":"na","caption":"Автор"},{"id":"doc_amount","width":"120","type":"ron","align":"right","sort":"na","caption":"Сумма"},{"id":"obj_delivery_state","width":"120","type":"ro","align":"left","sort":"na","caption":"Статус"},{"id":"note","width":"*","type":"ro","align":"left","sort":"na","caption":"Комментарий"}]},"obj":{"head":{" ":["name","owner","calc_order","product","leading_product","leading_elm"]},"tabular_sections":{"production":{"fields":["row","nom","characteristic","note","qty","len","width","s","quantity","unit","discount_percent","price","amount","discount_percent_internal","price_internal","amount_internal"],"aligns":"center,left,left,left,right,right,right,right,right,left,right,right,right,right,right,right","sortings":"na,na,na,na,na,na,na,na,na,na,na,na,na,na,na,na","types":""},"planning":{"fields":["obj","elm","specimen","key","date","performance"],"aligns":"left,right,right,left,left,right","sortings":"na,na,na,na,na,na","headers":"Продукция,Элемент,Экземпляр,Ключ,Дата,Мощность","widths":"*,70,70,*,120,90","min_widths":"180,60,60,180,110,80","types":"ref,calck,calck,ref,dhxCalendar,calck"}},"tabular_sections_order":["production","planning"]}}},"credit_card_order":{"name":"ОплатаОтПокупателяПлатежнойКартой","splitted":false,"synonym":"Оплата от покупателя платежной картой","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Контрагент, подотчетник, касса ККМ","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"payment_details":{"name":"РасшифровкаПлатежа","synonym":"Расшифровка платежа","tooltip":"","fields":{"cash_flow_article":{"synonym":"Статья движения денежных средств","multiline_mode":false,"tooltip":"Статья движения денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.cash_flow_articles"],"is_ref":true}},"trans":{"synonym":"Объект расчетов","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order","cat.contracts"],"is_ref":true}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"Сумма платежа","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":2}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc","form":{"selection":{"fields":["posted","date","number_doc","organization","partner","doc_amount","note"],"cols":[{"id":"date","width":"160","type":"ro","align":"left","sort":"server","caption":"Дата"},{"id":"number_doc","width":"120","type":"ro","align":"left","sort":"na","caption":"№"},{"id":"organization","width":"*","type":"ro","align":"left","sort":"na","caption":"Организация"},{"id":"partner","width":"*","type":"ro","align":"left","sort":"na","caption":"Контрагент"},{"id":"doc_amount","width":"160","type":"ro","align":"left","sort":"na","caption":"Сумма"},{"id":"note","width":"*","type":"ro","align":"left","sort":"na","caption":"Комментарий"}]},"obj":{"head":{" ":[{"id":"number_doc","path":"o.number_doc","type":"ro","synonym":"Номер"},"date","organization","partner","department","responsible","note",{"id":"doc_amount","path":"o.doc_amount","type":"ro","synonym":"Сумма документа"}]},"tabular_sections":{"payment_details":{"fields":["row","cash_flow_article","trans","amount"],"headers":"№,Статья,Заказ,Сумма","aligns":"center,left,left,right","sortings":"na,na,na,na","types":"cntr,ref,ref,calck","widths":"50,*,*,120","min_widths":"40,140,140,80"}}}}},"work_centers_performance":{"name":"МощностиРЦ","splitted":false,"synonym":"Мощности рабочих центров","illustration":"","obj_presentation":"Мощность рабочих центров","list_presentation":"Мощности рабочих центров","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"start_date":{"synonym":"Дата начала","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"expiration_date":{"synonym":"Дата окончания","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"planning":{"name":"Планирование","synonym":"Планирование","tooltip":"","fields":{"date":{"synonym":"Дата","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"power":{"synonym":"Мощность","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}}}}},"cachable":"doc"},"debit_bank_order":{"name":"ПлатежноеПоручениеВходящее","splitted":false,"synonym":"Платежное поручение входящее","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Плательщик","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"payment_details":{"name":"РасшифровкаПлатежа","synonym":"Расшифровка платежа","tooltip":"","fields":{"cash_flow_article":{"synonym":"Статья движения денежных средств","multiline_mode":false,"tooltip":"Статья движения денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.cash_flow_articles"],"is_ref":true}},"trans":{"synonym":"Объект расчетов","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order","cat.contracts"],"is_ref":true}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"Сумма платежа","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":2}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc","form":{"selection":{"fields":["posted","date","number_doc","organization","partner","doc_amount","note"],"cols":[{"id":"date","width":"160","type":"ro","align":"left","sort":"server","caption":"Дата"},{"id":"number_doc","width":"120","type":"ro","align":"left","sort":"na","caption":"№"},{"id":"organization","width":"*","type":"ro","align":"left","sort":"na","caption":"Организация"},{"id":"partner","width":"*","type":"ro","align":"left","sort":"na","caption":"Контрагент"},{"id":"doc_amount","width":"160","type":"ro","align":"left","sort":"na","caption":"Сумма"},{"id":"note","width":"*","type":"ro","align":"left","sort":"na","caption":"Комментарий"}]},"obj":{"head":{" ":[{"id":"number_doc","path":"o.number_doc","type":"ro","synonym":"Номер"},"date","organization","partner","department","responsible","note",{"id":"doc_amount","path":"o.doc_amount","type":"ro","synonym":"Сумма документа"}]},"tabular_sections":{"payment_details":{"fields":["row","cash_flow_article","trans","amount"],"headers":"№,Статья,Заказ,Сумма","aligns":"center,left,left,right","sortings":"na,na,na,na","types":"cntr,ref,ref,calck","widths":"50,*,*,120","min_widths":"40,140,140,80"}}}}},"credit_bank_order":{"name":"ПлатежноеПоручениеИсходящее","splitted":false,"synonym":"Платежное поручение исходящее","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Получатель","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"payment_details":{"name":"РасшифровкаПлатежа","synonym":"Расшифровка платежа","tooltip":"","fields":{"cash_flow_article":{"synonym":"Статья движения денежных средств","multiline_mode":false,"tooltip":"Статья движения денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.cash_flow_articles"],"is_ref":true}},"trans":{"synonym":"Объект расчетов","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order","cat.contracts"],"is_ref":true}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"Сумма платежа","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":2}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc"},"debit_cash_order":{"name":"ПриходныйКассовыйОрдер","splitted":false,"synonym":"Приходный кассовый ордер","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Контрагент, подотчетник, касса ККМ","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.individuals","cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"cashbox":{"synonym":"Касса","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["cat.cashboxes"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"payment_details":{"name":"РасшифровкаПлатежа","synonym":"Расшифровка платежа","tooltip":"","fields":{"cash_flow_article":{"synonym":"Статья движения денежных средств","multiline_mode":false,"tooltip":"Статья движения денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.cash_flow_articles"],"is_ref":true}},"trans":{"synonym":"Объект расчетов","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order","cat.contracts"],"is_ref":true}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"Сумма платежа","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":2}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc","form":{"selection":{"fields":["posted","date","number_doc","organization","partner","doc_amount","note"],"cols":[{"id":"date","width":"160","type":"ro","align":"left","sort":"server","caption":"Дата"},{"id":"number_doc","width":"120","type":"ro","align":"left","sort":"na","caption":"№"},{"id":"organization","width":"*","type":"ro","align":"left","sort":"na","caption":"Организация"},{"id":"partner","width":"*","type":"ro","align":"left","sort":"na","caption":"Контрагент"},{"id":"doc_amount","width":"160","type":"ro","align":"left","sort":"na","caption":"Сумма"},{"id":"note","width":"*","type":"ro","align":"left","sort":"na","caption":"Комментарий"}]},"obj":{"head":{" ":[{"id":"number_doc","path":"o.number_doc","type":"ro","synonym":"Номер"},"date","organization","partner","department","cashbox","responsible","note",{"id":"doc_amount","path":"o.doc_amount","type":"ro","synonym":"Сумма документа"}]},"tabular_sections":{"payment_details":{"fields":["row","cash_flow_article","trans","amount"],"headers":"№,Статья,Заказ,Сумма","aligns":"center,left,left,right","sortings":"na,na,na,na","types":"cntr,ref,ref,calck","widths":"50,*,*,120","min_widths":"40,140,140,80"}}}}},"credit_cash_order":{"name":"РасходныйКассовыйОрдер","splitted":false,"synonym":"Расходный кассовый ордер","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Контрагент, подотчетник, Касса ККМ","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.individuals","cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"cashbox":{"synonym":"Касса","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["cat.cashboxes"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"payment_details":{"name":"РасшифровкаПлатежа","synonym":"Расшифровка платежа","tooltip":"","fields":{"cash_flow_article":{"synonym":"Статья движения денежных средств","multiline_mode":false,"tooltip":"Статья движения денежных средств","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.cash_flow_articles"],"is_ref":true}},"trans":{"synonym":"Объект расчетов","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order","cat.contracts"],"is_ref":true}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"Сумма платежа","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":2}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc"},"selling":{"name":"РеализацияТоваровУслуг","splitted":false,"synonym":"Реализация товаров и услуг","illustration":"Документы отражают факт реализации (отгрузки) товаров","obj_presentation":"Реализация товаров и услуг","list_presentation":"Реализация товаров и услуг","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.organizations"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_buyer","path":true}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.partners"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.divisions"],"is_ref":true}},"warehouse":{"synonym":"Склад","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.stores"],"is_ref":true}},"doc_amount":{"synonym":"Сумма документа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"Пользователь, ответственный за  документ.","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"goods":{"name":"Товары","synonym":"Товары","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_params":[{"name":"Услуга","path":false},{"name":"set","path":false}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":3}},"unit":{"synonym":"Единица измерения","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["goods","nom"]}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom_units"],"is_ref":true}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"discount_percent":{"synonym":"Процент скидки или наценки","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.vat_rates"],"is_ref":true}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"vat_amount":{"synonym":"Сумма НДС","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"trans":{"synonym":"Сделка","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}}}},"services":{"name":"Услуги","synonym":"Услуги","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_params":[{"name":"Услуга","path":true},{"name":"set","path":false}],"choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"content":{"synonym":"Содержание услуги, доп. сведения","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["string"],"str_len":0}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":3}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"discount_percent":{"synonym":"Процент скидки или наценки","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":5,"fraction_figits":2}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"vat_rate":{"synonym":"Ставка НДС","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.vat_rates"],"is_ref":true}},"vat_amount":{"synonym":"Сумма НДС","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"trans":{"synonym":"Сделка","multiline_mode":false,"tooltip":"Документ расчетов с партнером","choice_links":[{"name":["selection","partner"],"path":["partner"]},{"name":["selection","organization"],"path":["organization"]}],"choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}}}},"extra_fields":{"name":"ДополнительныеРеквизиты","synonym":"Дополнительные реквизиты","tooltip":"","fields":{"property":{"synonym":"Свойство","multiline_mode":false,"tooltip":"Дополнительный реквизит","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"Значение дополнительного реквизита","choice_links":[{"name":["selection","owner"],"path":["extra_fields","property"]}],"choice_groups_elm":"elm","choice_type":{"path":["extra_fields","property"],"elm":0},"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}},"txt_row":{"synonym":"Текстовая строка","multiline_mode":false,"tooltip":"Полный текст строкового дополнительного реквизита","type":{"types":["string"],"str_len":0}}}}},"cachable":"doc","form":{"selection":{"fields":["posted","date","number_doc","organization","partner","doc_amount","note"],"cols":[{"id":"date","width":"160","type":"ro","align":"left","sort":"server","caption":"Дата"},{"id":"number_doc","width":"120","type":"ro","align":"left","sort":"na","caption":"№"},{"id":"organization","width":"*","type":"ro","align":"left","sort":"na","caption":"Организация"},{"id":"partner","width":"*","type":"ro","align":"left","sort":"na","caption":"Контрагент"},{"id":"doc_amount","width":"160","type":"ro","align":"left","sort":"na","caption":"Сумма"},{"id":"note","width":"*","type":"ro","align":"left","sort":"na","caption":"Комментарий"}]},"obj":{"head":{" ":[{"id":"number_doc","path":"o.number_doc","type":"ro","synonym":"Номер"},"date","organization","partner","department","warehouse","responsible","note",{"id":"doc_amount","path":"o.doc_amount","type":"ro","synonym":"Сумма документа"}]},"tabular_sections":{"goods":{"fields":["row","nom","quantity","unit","price","discount_percent","vat_rate","amount","vat_amount","trans"],"headers":"№,Номенклатура,Количество,Ед.,Цена,Скидка,Ставка НДС,Сумма,Сумма НДС,Заказ","aligns":"center,left,right,left,right,right,left,right,right,left","sortings":"na,na,na,na,na,na,na,na,na,na","types":"cntr,ref,calck,ref,calck,calck,ref,calck,ron,ref","widths":"50,*,100,100,100,100,100,100,100,*","min_widths":"40,160,80,80,80,80,80,80,80,80,160"}}}}},"nom_prices_setup":{"name":"УстановкаЦенНоменклатуры","splitted":false,"synonym":"Установка цен номенклатуры","illustration":"","obj_presentation":"","list_presentation":"","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"price_type":{"synonym":"Тип Цен","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom_prices_types"],"is_ref":true}},"currency":{"synonym":"Валюта","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.currencies"],"is_ref":true}},"responsible":{"synonym":"Ответственный","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.users"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"goods":{"name":"Товары","synonym":"Товары","tooltip":"","fields":{"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom"],"is_ref":true}},"nom_characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["goods","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"price_type":{"synonym":"Тип Цен","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom_prices_types"],"is_ref":true}},"price":{"synonym":"Цена","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":4}}}}},"cachable":"doc","form":{"selection":{"fields":["posted","date","number_doc","price_type","currency","note"],"cols":[{"id":"date","width":"160","type":"ro","align":"left","sort":"server","caption":"Дата"},{"id":"number_doc","width":"120","type":"ro","align":"left","sort":"na","caption":"№"},{"id":"price_type","width":"*","type":"ro","align":"left","sort":"na","caption":"Тип цен"},{"id":"currency","width":"120","type":"ro","align":"left","sort":"na","caption":"Валюта"},{"id":"note","width":"*","type":"ro","align":"left","sort":"na","caption":"Комментарий"}]},"obj":{"head":{" ":[{"id":"number_doc","path":"o.number_doc","type":"ro","synonym":"Номер"},"date","responsible","note","price_type","currency"]},"tabular_sections":{"goods":{"fields":["row","nom","nom_characteristic","price_type","price"],"headers":"№,Номенклатура,Характеристика,Тип цен,Цена","aligns":"center,left,left,left,right","sortings":"na,na,na,na,na","types":"cntr,ref,ref,ref,calck","widths":"50,*,*,80,90","min_widths":"40,200,140,0,80"}}}}},"planning_event":{"name":"СобытиеПланирования","splitted":false,"synonym":"Событие планирования","illustration":"","obj_presentation":"Событие планирования","list_presentation":"События планирования","input_by_string":["number_doc"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":11,"fields":{"phase":{"synonym":"Фаза","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["enm.planning_phases"],"is_ref":true}},"key":{"synonym":"Ключ","multiline_mode":false,"tooltip":"","choice_params":[{"name":"applying","path":["НаправлениеДоставки","РабочийЦентр"]}],"choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"recipient":{"synonym":"Получатель","multiline_mode":false,"tooltip":"СГП или следующий передел","choice_groups_elm":"elm","type":{"types":["cat.parameters_keys"],"is_ref":true}},"trans":{"synonym":"Сделка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_params":[{"name":"is_folder","path":false}],"choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"project":{"synonym":"Проект","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.projects"],"is_ref":true}},"Основание":{"synonym":"Основание","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.planning_event"],"is_ref":true}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":0}}},"tabular_sections":{"executors":{"name":"Исполнители","synonym":"Исполнители","tooltip":"","fields":{"executor":{"synonym":"Исполнитель","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.individuals","cat.partners"],"is_ref":true}},"coefficient":{"synonym":"Коэффициент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":10,"fraction_figits":3}}}},"planning":{"name":"Планирование","synonym":"Планирование","tooltip":"","fields":{"obj":{"synonym":"Объект","multiline_mode":false,"tooltip":"Если указано - изделие, если пусто - Расчет из шапки","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"specimen":{"synonym":"Экземпляр","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"power":{"synonym":"Мощность","multiline_mode":false,"tooltip":"Трудоемкость или время операции","type":{"types":["number"],"digits":8,"fraction_figits":1}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"Номенклатура работы или услуги события","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"begin_time":{"synonym":"Время начала","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date_time"}},"end_time":{"synonym":"Время окончания","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date_time"}}}}},"cachable":"doc"}},"areg":{},"rep":{"materials_demand":{"name":"materials_demand","splitted":false,"synonym":"Потребность в материалах","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{"calc_order":{"synonym":"Расчет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"formula":{"synonym":"Формула","multiline_mode":false,"tooltip":"","choice_params":[{"name":"parent","path":["3220e252-ffcd-11e5-8303-e67fda7f6b46","3220e251-ffcd-11e5-8303-e67fda7f6b46"]}],"choice_groups_elm":"elm","type":{"types":["cat.formulas"],"is_ref":true}},"scheme":{"synonym":"Вариант настроек","multiline_mode":false,"tooltip":"","choice_params":[{"name":"obj","path":"rep.materials_demand.specification"}],"choice_groups_elm":"elm","type":{"types":["cat.scheme_settings"],"is_ref":true}}},"tabular_sections":{"production":{"name":"Продукция","synonym":"Продукция","tooltip":"","fields":{"use":{"synonym":"Использование","multiline_mode":false,"tooltip":"","type":{"types":["boolean"]}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true},"choice_params":[{"name":"calc_order","path":{"not":"00000000-0000-0000-0000-000000000000"}}]},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"№ элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"qty":{"synonym":"Количество, шт","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":3}}}},"specification":{"name":"Спецификация","synonym":"Спецификация","tooltip":"","fields":{"calc_order":{"synonym":"Расчет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"product":{"synonym":"Изделие","multiline_mode":false,"tooltip":"Для продукции - номер строки заказа, для характеристики стеклопакета - номер элемента","type":{"types":["number"],"digits":6,"fraction_figits":0}},"cnstr":{"synonym":"№ Конструкции","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":6,"fraction_figits":0}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"Номер элемента, если значение > 0, либо номер конструкции, если значение < 0","type":{"types":["number"],"digits":6,"fraction_figits":0}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"article":{"synonym":"Артикул","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"clr":{"synonym":"Цвет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.clrs"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["specification","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"nom_kind":{"synonym":"Вид номенклатуры","multiline_mode":false,"tooltip":"Указывается вид, к которому следует отнести данную позицию номенклатуры.","choice_groups_elm":"elm","mandatory":true,"type":{"types":["cat.nom_kinds"],"is_ref":true}},"qty":{"synonym":"Количество (шт)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"len":{"synonym":"Длина, м","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"width":{"synonym":"Ширина, м","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"s":{"synonym":"Площадь, м²","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":6}},"material":{"synonym":"Материал","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":255}},"grouping":{"synonym":"Группировка","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"totqty":{"synonym":"Количество","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":4}},"totqty1":{"synonym":"Количество (+%)","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":14,"fraction_figits":4}},"alp1":{"synonym":"Угол 1, °","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"alp2":{"synonym":"Угол 2, °","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":8,"fraction_figits":1}},"sz":{"synonym":"Размер","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":50}},"price":{"synonym":"Себест.план","multiline_mode":false,"tooltip":"Цена плановой себестоимости строки спецификации","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount":{"synonym":"Сумма себест.","multiline_mode":false,"tooltip":"Сумма плановой себестоимости строки спецификации","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_marged":{"synonym":"Сумма с наценкой","multiline_mode":false,"tooltip":"Вклад строки спецификации в стоимость изделия для сценария КМАРЖ_В_СПЕЦИФИКАЦИИ","type":{"types":["number"],"digits":15,"fraction_figits":2}}}}}},"cash":{"name":"cash","splitted":false,"synonym":"Денежные средства","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{},"tabular_sections":{"data":{"name":"data","synonym":"Данные","tooltip":"","fields":{"period":{"synonym":"Период","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"register":{"synonym":"Регистратор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.credit_card_order","doc.debit_bank_order","doc.registers_correction","doc.credit_cash_order","doc.debit_cash_order","doc.credit_bank_order"],"is_ref":true}},"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"bank_account_cashbox":{"synonym":"Касса или банковский счет","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organization_bank_accounts","cat.cashboxes"],"is_ref":true}},"initial_balance":{"synonym":"Начальный остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"debit":{"synonym":"Приход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"credit":{"synonym":"Расход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"final_balance":{"synonym":"Конечный остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}}}}}},"goods":{"name":"goods","splitted":false,"synonym":"Товары на складах","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{},"tabular_sections":{"data":{"name":"data","synonym":"Данные","tooltip":"","fields":{"period":{"synonym":"Период","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"register":{"synonym":"Регистратор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.registers_correction","doc.selling","doc.purchase"],"is_ref":true}},"warehouse":{"synonym":"Склад","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.stores"],"is_ref":true}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["data","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"initial_balance":{"synonym":"Начальный остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"debit":{"synonym":"Приход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"credit":{"synonym":"Расход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"final_balance":{"synonym":"Конечный остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_initial_balance":{"synonym":"Сумма начальный остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_debit":{"synonym":"Сумма приход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_credit":{"synonym":"Сумма расход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"amount_final_balance":{"synonym":"Сумма конечный остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}}}}}},"invoice_execution":{"name":"invoice_execution","splitted":false,"synonym":"Исполнение заказов","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{},"tabular_sections":{"data":{"name":"data","synonym":"Данные","tooltip":"","fields":{"period":{"synonym":"Период","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"trans":{"synonym":"Сделка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"invoice":{"synonym":"Сумма заказа","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"pay":{"synonym":"Оплачено","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"pay_total":{"synonym":"Оплатить","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"pay_percent":{"synonym":"% Оплаты","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"shipment":{"synonym":"Отгружено","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"shipment_total":{"synonym":"Отгрузить","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"shipment_percent":{"synonym":"% Отгрузки","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}}}}}},"mutual_settlements":{"name":"mutual_settlements","splitted":false,"synonym":"Взаиморасчеты","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{},"tabular_sections":{"data":{"name":"data","synonym":"Данные","tooltip":"","fields":{"period":{"synonym":"Период","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"register":{"synonym":"Регистратор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.credit_card_order","doc.debit_bank_order","doc.registers_correction","doc.credit_cash_order","doc.selling","doc.purchase","doc.debit_cash_order","doc.credit_bank_order"],"is_ref":true}},"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"trans":{"synonym":"Сделка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"initial_balance":{"synonym":"Нач. остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"debit":{"synonym":"Приход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"credit":{"synonym":"Расход","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"final_balance":{"synonym":"Кон. остаток","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}}}}}},"selling":{"name":"selling","splitted":false,"synonym":"Продажи","illustration":"","obj_presentation":"","list_presentation":"","hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":false,"code_length":0,"fields":{},"tabular_sections":{"data":{"name":"data","synonym":"Данные","tooltip":"","fields":{"period":{"synonym":"Период","multiline_mode":false,"tooltip":"","type":{"types":["date"],"date_part":"date"}},"register":{"synonym":"Регистратор","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.registers_correction","doc.selling","doc.purchase"],"is_ref":true}},"organization":{"synonym":"Организация","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.organizations"],"is_ref":true}},"department":{"synonym":"Подразделение","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.divisions"],"is_ref":true}},"partner":{"synonym":"Контрагент","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.partners"],"is_ref":true}},"trans":{"synonym":"Сделка","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["doc.calc_order"],"is_ref":true}},"nom":{"synonym":"Номенклатура","multiline_mode":false,"tooltip":"","choice_groups_elm":"elm","type":{"types":["cat.nom"],"is_ref":true}},"characteristic":{"synonym":"Характеристика","multiline_mode":false,"tooltip":"","choice_links":[{"name":["selection","owner"],"path":["data","nom"]}],"choice_groups_elm":"elm","type":{"types":["cat.characteristics"],"is_ref":true}},"quantity":{"synonym":"Количество","multiline_mode":false,"tooltip":"","mandatory":true,"type":{"types":["number"],"digits":15,"fraction_figits":3}},"amount":{"synonym":"Сумма","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"vat_amount":{"synonym":"Сумма НДС","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}},"discount":{"synonym":"Сумма скидки","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":15,"fraction_figits":2}}}}}}},"cch":{"predefined_elmnts":{"name":"ПредопределенныеЭлементы","splitted":false,"synonym":"Константы и списки","illustration":"Хранит значения настроек и параметров подсистем","obj_presentation":"Значение настроек","list_presentation":"","input_by_string":["name","synonym"],"hierarchical":true,"has_owners":false,"group_hierarchy":false,"main_presentation_name":true,"code_length":0,"fields":{"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_type":{"path":["ТипЗначения"],"elm":0},"type":{"types":["cat.production_params","cat.currencies","cat.color_price_groups","cat.formulas","boolean","cat.nom_prices_types","cat.divisions","enm.elm_types","cat.parameters_keys","string","cat.nom_kinds","date","number","enm.planning_detailing","doc.calc_order","cat.nom","cat.furns","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date","digits":8,"fraction_figits":1}},"definition":{"synonym":"Описание","multiline_mode":true,"tooltip":"","type":{"types":["string"],"str_len":0}},"synonym":{"synonym":"Синоним","multiline_mode":false,"tooltip":"Синоним предопределенного элемента","mandatory":true,"type":{"types":["string"],"str_len":50}},"list":{"synonym":"Список","multiline_mode":false,"tooltip":"","type":{"types":["number"],"digits":1,"fraction_figits":0}},"zone":{"synonym":"Область","multiline_mode":false,"tooltip":"Разделитель (префикс) данных","type":{"types":["number"],"digits":6,"fraction_figits":0}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"parent":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cch.predefined_elmnts"],"is_ref":true}},"type":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["cat.production_params","cat.currencies","cat.color_price_groups","cat.formulas","boolean","cat.nom_prices_types","cat.divisions","enm.elm_types","cat.parameters_keys","string","cat.nom_kinds","date","number","enm.planning_detailing","doc.calc_order","cat.nom","cat.furns","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date","digits":8,"fraction_figits":1}}},"tabular_sections":{"elmnts":{"name":"Элементы","synonym":"Элементы","tooltip":"","fields":{"value":{"synonym":"Значение","multiline_mode":false,"tooltip":"","choice_type":{"path":["ТипЗначения"],"elm":0},"type":{"types":["cat.production_params","cat.currencies","cat.color_price_groups","cat.formulas","boolean","cat.nom_prices_types","cat.divisions","enm.elm_types","cat.parameters_keys","string","cat.nom_kinds","date","number","enm.planning_detailing","doc.calc_order","cat.nom","cat.furns","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date","digits":8,"fraction_figits":1}},"elm":{"synonym":"Элемент","multiline_mode":false,"tooltip":"","type":{"types":["cat.production_params","cat.currencies","cat.color_price_groups","cat.formulas","boolean","cat.nom_prices_types","cat.divisions","enm.elm_types","cat.parameters_keys","string","cat.nom_kinds","date","number","enm.planning_detailing","doc.calc_order","cat.nom","cat.furns","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date","digits":8,"fraction_figits":1}}}}},"cachable":"ram","form":{"obj":{"head":{" ":[{"id":"name","path":"o.name","synonym":"Наименование","type":"ro"},{"id":"synonym","path":"o.synonym","synonym":"Синоним","type":"ro"},"list","zone","value"]},"tabular_sections":{"elmnts":{"fields":["elm","value"],"headers":"Элемент,Значение","widths":"*,*","min_widths":"150,150","aligns":"","sortings":"na,na","types":"ref,ref"}}}}},"properties":{"name":"ДополнительныеРеквизитыИСведения","splitted":false,"synonym":"Дополнительные реквизиты и сведения","illustration":"","obj_presentation":"Дополнительный реквизит / сведение","list_presentation":"","input_by_string":["name"],"hierarchical":false,"has_owners":false,"group_hierarchy":false,"main_presentation_name":true,"code_length":0,"fields":{"shown":{"synonym":"Виден","multiline_mode":false,"tooltip":"Настройка видимости дополнительного реквизита","type":{"types":["boolean"]}},"sorting_field":{"synonym":"Порядок","multiline_mode":false,"tooltip":"Используется для упорядочивания (служебный)","type":{"types":["number"],"digits":6,"fraction_figits":0}},"extra_values_owner":{"synonym":"Владелец дополнительных значений","multiline_mode":false,"tooltip":"Свойство-образец, с которым у этого свойства одинаковый список дополнительных значений","choice_groups_elm":"elm","type":{"types":["cch.properties"],"is_ref":true}},"available":{"synonym":"Доступен","multiline_mode":false,"tooltip":"Настройка доступности дополнительного реквизита","type":{"types":["boolean"]}},"mandatory":{"synonym":"Заполнять обязательно","multiline_mode":false,"tooltip":"Настройка проверки заполненности дополнительного реквизита","type":{"types":["boolean"]}},"include_to_name":{"synonym":"Включать в наименование","multiline_mode":false,"tooltip":"Добавлять значение параметра в наименование продукции","type":{"types":["boolean"]}},"list":{"synonym":"Список","multiline_mode":false,"tooltip":"Реквизит подсистемы интеграции metadata.js - реализует функциональность списка опций","type":{"types":["number"],"digits":1,"fraction_figits":0}},"caption":{"synonym":"Наименование","multiline_mode":false,"tooltip":"Краткое представление свойства, которое\nвыводится в формах редактирования его значения","mandatory":true,"type":{"types":["string"],"str_len":75}},"note":{"synonym":"Комментарий","multiline_mode":false,"tooltip":"Поясняет назначение свойства","type":{"types":["string"],"str_len":0}},"destination":{"synonym":"Набор свойств","multiline_mode":false,"tooltip":"Набор свойств, которому принадлежит уникальное свойство. Если не задан, значит свойство общее.","choice_groups_elm":"elm","type":{"types":["cat.destinations"],"is_ref":true}},"tooltip":{"synonym":"Подсказка","multiline_mode":false,"tooltip":"Показывается пользователю при редактировании свойства в форме объекта","type":{"types":["string"],"str_len":0}},"is_extra_property":{"synonym":"Это дополнительное сведение","multiline_mode":false,"tooltip":"Свойство является дополнительным сведением, а не дополнительным реквизитом","type":{"types":["boolean"]}},"include_to_description":{"synonym":"Включать в описание","multiline_mode":false,"tooltip":"Добавлять имя и значение параметра в строку описания продукции","type":{"types":["boolean"]}},"predefined_name":{"synonym":"","multiline_mode":false,"tooltip":"","type":{"types":["string"],"str_len":256}},"type":{"synonym":"","multiline_mode":false,"tooltip":"Типы значения, которое можно ввести при заполнении свойства.","mandatory":true,"type":{"types":["cat.nom_groups","cat.production_params","cat.inserts","cat.price_groups","cat.currencies","enm.open_directions","cat.projects","cat.individuals","cat.users","cat.delivery_areas","cat.color_price_groups","cat.elm_visualization","cat.property_values_hierarchy","cat.formulas","cat.delivery_directions","cat.property_values","boolean","cat.divisions","enm.align_types","cat.parameters_keys","cat.partners","cat.nonstandard_attributes","string","enm.sz_line_types","cat.organizations","date","cat.units","number","enm.planning_detailing","cat.cashboxes","cat.nom","cat.cnns","cat.furns","enm.vat_rates","cat.stores","cch.properties","cat.clrs"],"is_ref":true,"str_len":1024,"date_part":"date_time","digits":15,"fraction_figits":3}}},"tabular_sections":{},"cachable":"ram"}},"cacc":{},"bp":{},"tsk":{},"syns_1с":["arcCCW","CH","RADIUS","Автор","Адрес","АдресБанка","АдресДоставки","АдресЭП","Аксессуар","Активная","Арт1Стеклопакет","Арт1ТолькоВертикальный","Арт2Стеклопакет","Арт2ТолькоВертикальный","Артикул","Атрибуты","БазоваяЕдиницаИзмерения","Банк","БанкДляРасчетов","Банки","БанковскиеСчета","БанковскиеСчетаКонтрагентов","БанковскиеСчетаОрганизаций","БанковскийСчет","БизнесПроцесс","БИКБанка","БИКБанкаДляРасчетов","Булево","Валюта","ВалютаВзаиморасчетов","ВалютаДенежныхСредств","ВалютаДокумента","ВалютаЦены","Валюты","ВариантАтрибутов","ВариантПереноса","ВариантПути","ВариантСмещения","ВариантУкорочения","ВариантыАтрибутовВставок","ВариантыКрепленияИмпостов","ВариантыПереносаОпераций","ВариантыСмещений","ВариантыУкорочений","ВариантыУравнивания","ВводПоСтроке","ВедениеВзаиморасчетов","ВедениеВзаиморасчетовПоДоговорам","Ведомый","ВедущаяПродукция","ВедущаяФормула","Ведущие","Ведущий","ВедущийМенеджер","ВедущийЭлемент","ВерсияДанных","Вес","Вид","ВидДвижения","ВидДоговора","Виден","ВидЗатрат","ВидНоменклатуры","ВидОперации","ВидРабот","ВидРабочегоЦентра","ВидСкидкиНаценки","ВидСравнения","ВидСчета","ВидыДвиженийПриходРасход","ВидыДоговоровКонтрагентов","ВидыЗатрат","ВидыКонтактнойИнформации","ВидыНоменклатуры","ВидыПолейФормы","ВидыРабочихЦентров","ВидыТранспортныхСредств","Визуализация","ВключатьВНаименование","ВключатьВОписание","Владелец","ВладелецДополнительныхЗначений","Владельцы","ВнутренниеЗаказы","ВремяИзменения","ВремяНачала","ВремяОкончания","ВремяСобытия","Всего","Вставка","Вставки","ВходящееИсходящееСобытие","ВыборГруппИЭлементов","Выполнена","ВыпуклаяДуга","ВыравниваниеТекста","Высота","ВысотаМакс","ВысотаМин","ВысотаРучки","ВысотаРучкиМакс","ВысотаРучкиМин","ВысотаРучкиФиксирована","Глубина","Город","ГородБанка","ГородБанкаДляРасчетов","Готовность","ГрафикРаботы","Группировка","ГруппыФинансовогоУчетаНоменклатуры","ДаНет","Дата","ДатаДоставки","ДатаИзменения","ДатаНачала","ДатаОкончания","ДатаРождения","ДатаСобытия","Действие","ДеловаяОбрезь","ДержатьРезервБезОплатыОграниченноеВремя","ДетализацияПланирования","ДеятельностьПрекращена","Длина","ДлинаКода","ДлинаМакс","ДлинаМин","ДлинаНомера","ДлинаПроема","ДнейДоГотовности","ДнейОтГотовности","ДниНедели","ДоговорКонтрагента","ДоговорыКонтрагентов","Документ.Расчет","ДокументУдостоверяющийЛичность","Долгота","ДоменноеИмяСервера","Доп","ДополнительныеРеквизиты","ДополнительныеРеквизитыИСведения","ДополнительныеСведения","ДопускаютсяНезамкнутыеКонтуры","ДопустимаяСуммаЗадолженности","ДопустимоеЧислоДнейЗадолженности","Доступен","ЕдиницаИзмерения","ЕдиницаПоКлассификатору","ЕдиницаХраненияОстатков","ЕдиницыИзмерения","Завершен","Завершение","ЗависимостиДополнительныхРеквизитов","Заголовок","Заказ","Заказной","ЗаказПокупателя","ЗаказПоставщику","Закрыт","Закрыть","Запасы","Заполнения","ЗаполнятьОбязательно","Запуск","Значение","ЗначениеЗаполнения","Значения","ЗначенияПолей","ЗначенияПолейАдреса","ЗначенияСвойствОбъектов","ЗначенияСвойствОбъектовИерархия","Идентификатор","ИдентификаторПользователяИБ","ИдентификаторПользователяСервиса","ИдентификаторыОбъектовМетаданных","Иерархический","ИерархияГруппИЭлементов","Изделие","ИзОбрези","ИмяПредопределенныхДанных","Инд","Индекс","ИндивидуальныйПредприниматель","ИНН","ИнтеграцияВидыСравнений","ИнтеграцияКешСсылок","ИнтеграцияНастройкиОтчетовИСписков","ИнтеграцияОтделыАбонентов","ИнтеграцияСостоянияТранспорта","ИнтеграцияТипВыгрузки","ИнтеграцияТипКеширования","ИнтеграцияТипСвёртки","Исполнители","Исполнитель","ИспользованиеВедущих","ИспользованиеОбрези","ИтогСебестоимость","Календари","КалендариGoogle","Календарь","Камеры","Касса","Кассы","КатегорииЗаказов","Категория","КлассификаторБанковРФ","КлассификаторЕдиницИзмерения","КлиентДилера","Ключ","Ключи","КлючиПараметров","КМарж","КМаржВнутр","КМаржМин","Код","КодАльфа2","КодАльфа3","КодИМНС","КодПоОКПО","КодЦветаДляСтанка","Количество","КоличествоСторон","Комментарий","КонечныйОстаток","Конструкции","Конструкция","КонтактнаяИнформация","КонтактныеЛица","КонтактныеЛицаКонтрагентов","Контрагент","Контрагенты","КонтролироватьСуммуЗадолженности","КонтролироватьЧислоДнейЗадолженности","КонцевыеКрепления","Координата","Координаты","КоординатыЗаполнений","КорректировкаРегистров","КоррСчет","КоррСчетБанка","КоррСчетБанкаДляРасчетов","Коэффициент","КоэффициентПотерь","КПП","Кратность","КратностьВзаиморасчетов","КрепитсяШтульп","КреплениеИмпостов","КреплениеШтульпа","Кривой","Курс","КурсВзаиморасчетов","КурсыВалют","ЛеваяПравая","Листовые","Маржа","Марка","Масса","МассаМакс","МассаМин","МассаСтворкиМакс","МассаСтворкиМин","Материал","МатериалОперация","Материалы","МеждународноеСокращение","Менеджер","МестоРождения","МногострочныйРежим","МожноПоворачивать","Москитка","Москитки","МощностиРЦ","Мощность","Набор","НаборСвойств","НаборСвойствНоменклатура","НаборСвойствХарактеристика","НаборФурнитуры","НаборыДополнительныхРеквизитовИСведений","НазначениеЦветовойГруппы","НазначенияЦветовыхГрупп","Наименование","НаименованиеБанка","НаименованиеПолное","НаименованиеСокращенное","НалогообложениеНДС","Направление","НаправлениеОткрывания","НаправленияДоставки","НаправленияСортировки","НаПроем","НарядРЦ","НастройкиОткрывания","Наценка","НаценкаВнешн","НачальныйОстаток","Недействителен","НеполноеОткрывание","Нестандарт","Номенклатура","Номенклатура1","Номенклатура2","НоменклатурнаяГруппа","Номер","НомерВнутр","НомерКлиента","НомерКонтура","НомерОтдела","НомерСтроки","НомерСчета","НомерТелефона","НомерТелефонаБезКодов","ОбластиДоступаGoogle","Область","Обрезь","Объект","ОбъектДоступа","ОбъектыДоступа","Объем","ОбязательноеЗаполнение","ОграниченияСпецификации","ОкруглятьВБольшуюСторону","ОкруглятьКоличество","Описание","ОплатаОтПокупателяПлатежнойКартой","Организации","Организация","Ориентация","ОриентацияЭлемента","ОсновнаяВалюта","ОсновнаяСтатьяДвиженияДенежныхСредств","ОсновноаяКасса","ОсновноеКонтактноеЛицо","ОсновноеПредставлениеИмя","ОсновнойБанковскийСчет","ОсновнойДоговорКонтрагента","ОсновнойМенеджерПокупателя","ОсновнойПроект","ОснЦвет","ОсьПоворота","Отбор","Ответственный","Отдел","ОтражатьВБухгалтерскомУчете","ОтражатьВНалоговомУчете","Отступы","Пара","Параметр","Параметры","ПараметрыВыбора","ПараметрыИзделия","ПараметрыОтбора","ПараметрыПрописиНаРусском","ПараметрыФурнитуры","ПарныйРаскрой","Партия","Период","ПериодыСмены","пзВизуализацияЭлементов","пзМаржинальныеКоэффициентыИСкидки","пзПараметрыПродукции","пзСоединения","пзФурнитура","пзЦвета","Планирование","ПлатежноеПоручениеВходящее","ПлатежноеПоручениеИсходящее","ПлатежныйКалендарь","Плотность","Площадь","ПлощадьМакс","ПлощадьМин","ПлощадьППМ","Поворачивать","Поворот","ПоДоговоруВЦелом","Подразделение","ПодразделениеПроизводства","Подразделения","Подсказка","Подчиненый","ПоЗаказам","ПоКонтуру","Покупатель","Пол","ПолноеИмя","Положение","ПоложениеСтворокПоИмпостам","ПоложениеЭлемента","ПоложенияЗаголовка","Получатель","ПолФизическихЛиц","Пользователи","ПометкаУдаления","ПорогОкругления","Порядок","ПорядокОкругления","Поставщик","ПоступлениеТоваровУслуг","ПоСчетам","Потребность","ПоУмолчанию","Пояснение","Предоплата","ПредопределенныеЭлементы","Предопределенный","Представление","ПредставлениеИдентификатора","ПредставлениеОбъекта","ПредставлениеСписка","Префикс","Привязки","ПривязкиВставок","ПризнакиНестандартов","Применение","ПримененияКлючейПараметров","Принудительно","Приоритет","Припуск","Приход","ПриходныйКассовыйОрдер","ПриязкаКоординат","Проведен","Продукция","Проект","Проекты","Происхождение","Пропорции","Процент","ПроцентПредоплаты","ПроцентСкидкиНаценки","ПроцентСкидкиНаценкиВнутр","Прочее","Прямоугольный","ПутьSVG","РаботаетВремяНачала","РаботаетВремяОкончания","Работники","Работы","РабочиеЦентры","Разделитель","Размер","Размер_B","РазмерМакс","РазмерМин","РазмерФальца","РазмерФурнПаза","РазныеЦвета","Район","РайоныДоставки","Раскладка","Раскрой","Расход","РасходныйКассовыйОрдер","Расценка","Расчет","РасчетныйСчет","РасчетыСКонтрагентами","РасширенныйРежим","РасшифровкаПлатежа","РеализацияТоваровУслуг","Регион","Реквизит","РеквизитДопУпорядочивания","Реквизиты","Родитель","РучкаНаСтороне","СвидетельствоДатаВыдачи","СвидетельствоКодОргана","СвидетельствоНаименованиеОргана","СвидетельствоСерияНомер","СВИФТБИК","Свойство","Связи","СвязиПараметров","СвязиПараметровВыбора","СвязьПоТипу","Сделка","Себестоимость","Синоним","Система","СистемыПрофилей","СистемыФурнитуры","Скидка","СкидкаВнешн","СкидкиНаценки","Склад","Склады","СКомиссионером","СКомитентом","Скрыть","Сложный","Служебный","Смена","Смены","Смещение","Событие","СобытиеПланирования","Содержание","Соедин","СоединяемыеЭлементы","Соответствие","СоответствиеЦветов","СортировкаВЛистеКомплектации","Состав","Состояние","СостояниеТранспорта","СостоянияЗаданий","СостоянияЗаказовКлиентов","Сотрудник","Сотрудники","Спецификации","Спецификация","СпецификацияЗаполнений","Список","СПокупателем","СпособРасчетаКоличества","СпособРасчетаУгла","СпособУстановкиКурса","СпособыРасчетаКоличества","СпособыРасчетаУгла","СпособыУстановкиКурсаВалюты","СпособыУстановкиСпецификации","СПоставщиком","СрокДействия","Ссылка","СтавкаНДС","СтавкиНДС","СтандартнаяВысотаРучки","СтандартныйПериод","Старт","Стартован","СтатусыЗаказов","СтатьиДвиженияДенежныхСредств","СтатьиЗатрат","СтатьяДвиженияДенежныхСредств","СтатьяЗатрат","Створка","СтворкиВРазныхПлоскостях","Стоимость","Сторона","Сторона1","Сторона2","СторонаСоединения","СторонаЭлемента","СтороныСоединений","Страна","СтраныМира","СтраховойНомерПФР","стрНомер","Строка","СтрокаПодключения","СтруктурнаяЕдиница","Сумма","СуммаАвтоматическойСкидки","СуммаВзаиморасчетов","СуммаВключаетНДС","СуммаВнутр","СуммаДокумента","СуммаКонечныйОстаток","СуммаНачальныйОстаток","СуммаНДС","СуммаПриход","СуммаРасход","СуммаСНаценкой","СуммаУпр","Суффикс","СчетУчета","ТаблицаРегистров","ТабличнаяЧасть","ТабличныеЧасти","ТекстКорреспондента","ТекстНазначения","ТекстоваяСтрока","Телефон","Телефоны","ТелефоныБанка","Тип","ТипВставки","ТипВставкиСтеклопакета","ТипДеления","ТипДенежныхСредств","ТипИсходногоДокумента","ТипНоменклатуры","ТиповойБлок","ТиповыеБлоки","ТипОптимизации","ТипОткрывания","ТипСоединения","ТипСчета","ТипЦен","ТипЦенВнутр","ТипЦенПрайс","ТипЦенСебестоимость","ТипыВставок","ТипыВставокСтеклопакета","ТипыДеленияРаскладки","ТипыДенежныхСредств","ТипыКонтактнойИнформации","ТипыНалогообложенияНДС","ТипыНоменклатуры","ТипыОптимизацийРаскроя","ТипыОткрывания","ТипыРазмерныхЛиний","ТипыСобытий","ТипыСоединений","ТипыСтрокВЗаказ","ТипыСтруктурныхЕдиниц","ТипыСчетов","ТипыЦен","ТипыЦенНоменклатуры","ТипыЭлементов","ТипЭлемента","Товары","Толщина","ТолщинаМакс","ТолщинаМин","ТолькоДляПрямыхПрофилей","ТолькоДляЦенообразования","ТочкаМаршрута","ТранспортныеСредства","УголКГоризонту","УголКГоризонтуМакс","УголКГоризонтуМин","УголМакс","УголМин","УголРеза1","УголРеза2","УголШага","УдлинениеАрки","Узел1","Узел2","Укорочение","УкорочениеПоКонтуру","Упаковка","Управленческий","Условие","УсловныхИзделий","Услуги","УстанавливатьСпецификацию","УстановкаЦенНоменклатуры","УточнятьРайонГеокодером","УчитыватьНДС","Фаза","ФазыПланирования","ФизическиеЛица","ФизическоеЛицо","Финиш","Формула","ФормулаВнешн","ФормулаВнутр","ФормулаПродажа","ФормулаРасчетаКурса","ФормулаУсловия","Формулы","Фурнитура","ФурнитураЦвет","Характеристика","ХарактеристикаАксессуаров","ХарактеристикаНоменклатуры","ХарактеристикаПродукции","ХарактеристикиНоменклатуры","Хлыст","Цвет","Цвет1","Цвет2","ЦветRAL","Цвета","ЦветВРисовалке","ЦветИзнутри","Цветной","ЦветоваяГруппа","ЦветоЦеновыеГруппы","ЦветСнаружи","Цена","ЦенаВключаетНДС","ЦенаВнутр","ЦеноваяГруппа","ЦеновыеГруппы","Центрировать","ЦеныНоменклатуры","Число","ЧислоДнейРезерваБезОплаты","Шаблон","Шаг","Ширина","ШиринаПилы","Широта","Шкала","Штуки","ШтульпБезимпСоед","Экземпляр","Элемент","Элемент1","Элемент2","Элементы","Эскиз","ЭтоАксессуар","ЭтоГруппа","ЭтоДополнительноеСведение","ЭтоНабор","ЭтоОсновнойЭлемент","ЭтоРаздвижка","ЭтоСоединение","ЭтоСтрокаЗаказа","ЭтоСтрокаНабора","ЭтоСтрокаОперации","ЭтоСтрокаОсновнойСпецификации","ЭтоСтрокаСочетанияНоменклатур","ЭтоТехоперация","ЭтоУслуга","ЮрЛицо","ЮрФизЛицо","Ячейка","Ячейки"],"syns_js":["arc_ccw","changed","arc_r","author","address","bank_address","shipping_address","email_address","accessory","active","art1glass","art1vert","art2glass","art2vert","article","attributes","base_unit","bank","settlements_bank","banks","bank_accounts","partner_bank_accounts","organization_bank_accounts","bank_account","buisness_process","bank_bic","settlements_bank_bic","boolean","currency","settlements_currency","funds_currency","doc_currency","price_currency","currencies","attrs_option","transfer_option","path_kind","offset_option","contraction_option","inset_attrs_options","impost_mount_options","transfer_operations_options","offset_options","contraction_options","align_types","input_by_string","mutual_settlements","mutual_contract_settlements","slave","leading_product","leading_formula","leadings","master","leading_manager","leading_elm","data_version","heft","kind","record_kind","contract_kind","shown","cost_kind","nom_kind","transactions_kind","work_kind","work_center_kind","charges_discounts_kind","comparison_type","account_kind","debit_credit_kinds","contract_kinds","costs_kinds","contact_information_kinds","nom_kinds","data_field_kinds","work_center_kinds","motor_vehicle_kinds","visualization","include_to_name","include_to_description","owner","extra_values_owner","owners","internal_orders","change_time","begin_time","end_time","event_time","altogether","inset","inserts","inbound_outbound","choice_groups_elm","completed","arc_available","text_aligns","height","hmax","hmin","h_ruch","handle_height_max","handle_height_min","fix_ruch","depth","city","bank_city","settlements_bank_city","readiness","worker_schedule","grouping","nom_groups","yes_no","date","shipping_date","change_date","start_date","expiration_date","birth_date","event_date","action","biz_cuts","check_days_without_pay","planning_detailing","activity_ceased","len","code_length","lmax","lmin","number_doc_len","aperture_len","days_to_execution","days_from_execution","week_days","contract","contracts","Документ.итРасчет","identification_document","longitude","server_domain_name","dop","extra_fields","properties","extra_properties","allow_open_cnn","allowable_debts_amount","allowable_debts_days","available","unit","qualifier_unit","storage_unit","nom_units","finished","completion","extra_fields_dependencies","caption","invoice","made_to_order","buyers_order","purchase_order","closed","close","inventories","glasses","mandatory","launch","value","fill_value","values","values_fields","address_fields","property_values","property_values_hierarchy","identifier","user_ib_uid","user_fresh_uid","meta_ids","hierarchical","group_hierarchy","product","from_cut","predefined_name","icounter","ind","individual_entrepreneur","inn","comparison_types","integration_links_cache","scheme_settings","branches","obj_delivery_states","unload_type","caching_type","reduce_type","executors","executor","use_master","use_cut","first_cost_total","calendars","calendars_google","calendar","coffer","cashbox","cashboxes","order_categories","category","banks_qualifier","units","client_of_dealer","key","keys","parameters_keys","marginality","marginality_internal","marginality_min","id","alpha2","alpha3","imns_code","okpo","machine_tools_clr","quantity","side_count","note","final_balance","constructions","cnstr","contact_information","contact_persons","contact_persons_partners","partner","partners","check_debts_amount","check_debts_days","end_mount","coordinate","coordinates","glass_coordinates","registers_correction","correspondent_account","bank_correspondent_account","settlements_bank_correspondent_account","coefficient","loss_factor","kpp","multiplicity","settlements_multiplicity","shtulp_fix_here","impost_fixation","shtulp_fixation","crooked","course","settlements_course","currency_courses","left_right","is_sandwich","margin","brand","weight","mmax","mmin","flap_weight_max","flap_weight_min","material","material_operation","materials","international_short","manager","birth_place","multiline_mode","can_rotate","mskt","mosquito","work_centers_performance","power","set","destination","dnom","dcharacteristic","furn_set","destinations","color_price_group_destination","color_price_group_destinations","name","bank_name","name_full","name_short","vat","direction","open_directions","delivery_directions","sort_directions","on_aperture","work_centers_task","open_tunes","extra_charge","extra_charge_external","initial_balance","invalid","partial_opening","nonstandard","nom","nom1","nom2","nom_group","number_doc","number_internal","client_number","contour_number","number_division","row","account_number","phone_number","phone_without_codes","google_access_areas","area","cuts","obj","acl_obj","acl_objs","volume","mandatory_fields","specification_restrictions","rounding_in_a_big_way","rounding_quantity","definition","credit_card_order","organizations","organization","orientation","orientations","main_currency","main_cash_flow_article","main_cashbox","primary_contact","main_presentation_name","main_bank_account","main_contract","buyer_main_manager","main_project","default_clr","rotation_axis","selection","responsible","branch","accounting_reflect","tax_accounting_reflect","offsets","pair","param","params","choice_params","product_params","selection_params","parameters_russian_recipe","furn_params","double_cut","part","period","work_shift_periodes","elm_visualization","margin_coefficients","production_params","cnns","furns","clrs","planning","debit_bank_order","credit_bank_order","calendar_payments","density","s","smax","smin","coloration_area","rotate","rotated","by_entire_contract","department","department_manufactory","divisions","tooltip","has_owners","by_orders","by_contour","is_buyer","sex","full_moniker","pos","flap_pos_by_impost","positions","label_positions","recipient","gender","users","_deleted","rounding_threshold","sorting","rounding_order","is_supplier","purchase","by_invoices","demand","by_default","illustration","prepayment","predefined_elmnts","predefined","presentation","identifier_presentation","obj_presentation","list_presentation","prefix","bindings","insert_bind","nonstandard_attributes","applying","parameters_keys_applying","forcibly","priority","overmeasure","debit","debit_cash_order","bind_coordinates","posted","production","project","projects","origin","proportions","rate","prepayment_percent","discount_percent","discount_percent_internal","others","is_rectangular","svg_path","work_begin_time","work_end_time","workers","jobs","work_centers","delimiter","sz","sizeb","sz_max","sz_min","sizefaltz","sizefurn","varclr","delivery_area","delivery_areas","lay","cutting","credit","credit_cash_order","pricing","calc_order","current_account","invoice_payments","extended_mode","payment_details","selling","region","field","sorting_field","fields","parent","handle_side","certificate_date_issue","certificate_authority_code","certificate_authority_name","certificate_series_number","swift","property","links","params_links","choice_links","choice_type","trans","first_cost","synonym","sys","sys_profile","sys_furn","discount","discount_external","charges_discounts","warehouse","stores","with_commission_agent","with_committent","hide","difficult","ancillary","work_shift","work_shifts","offset","event","planning_event","content","cnn","cnn_elmnts","conformity","clr_conformity","complete_list_sorting","composition","state","obj_delivery_state","task_states","buyers_order_states","employee","staff","specifications","specification","glass_specification","list","with_buyer","count_calc_method","angle_calc_method","course_installation_method","count_calculating_ways","angle_calculating_ways","course_installation_methods","specification_installation_methods","with_supplier","validity","ref","vat_rate","vat_rates","handle_height_base","standard_period","start","started","invoice_conditions","cash_flow_articles","cost_items","cash_flow_article","cost_item","flap","var_layers","cost","side","sd1","sd2","cnn_side","elm_side","cnn_sides","country","countries","pfr_number","number_str","string","connection_str","organizational_unit","amount","discount_amount_automatic","amount_mutual","vat_included","amount_internal","doc_amount","amount_final_balance","amount_initial_balance","vat_amount","amount_debit","amount_credit","amount_marged","amount_operation","suffix","account_accounting","registers_table","tabular_section","tabular_sections","correspondent_text","appointments_text","txt_row","phone","phone_numbers","bank_phone_numbers","type","insert_type","insert_glass_type","split_type","cash_flow_type","original_doc_type","nom_type","base_block","base_blocks","cutting_optimization_type","open_type","cnn_type","account_type","price_type","price_type_internal","price_type_sale","price_type_first_cost","inserts_types","inserts_glass_types","lay_split_types","cash_flow_types","contact_information_types","vat_types","nom_types","cutting_optimization_types","open_types","sz_line_types","event_types","cnn_types","specification_order_row_types","structural_unit_types","account_types","price_types","nom_prices_types","elm_types","elm_type","goods","thickness","tmax","tmin","for_direct_profile_only","for_pricing_only","buisness_process_point","transport_means","angle_hor","ahmax","ahmin","amax","amin","alp1","alp2","step_angle","arc_elongation","node1","node2","contraction","contraction_by_contour","packing","managerial","condition","condition_products","services","set_specification","nom_prices_setup","specify_area_by_geocoder","vat_consider","phase","planning_phases","individuals","individual_person","finish","formula","external_formula","internal_formula","sale_formula","course_calc_formula","condition_formula","formulas","furn","clr_furn","characteristic","accessory_characteristic","nom_characteristic","product_characteristic","characteristics","stick","clr","clr1","clr2","ral","colors","clr_str","clr_in","colored","clr_group","color_price_groups","clr_out","price","vat_price_included","price_internal","price_group","price_groups","do_center","nom_prices","number","days_without_pay","template","step","width","saw_width","latitude","scale","is_pieces","shtulp_available","specimen","elm","elm1","elm2","elmnts","outline","is_accessory","is_folder","is_extra_property","is_set","is_main_elm","is_sliding","is_cnn","is_order_row","is_set_row","is_procedure_row","is_main_specification_row","is_nom_combinations_row","is_procedure","is_service","legal_person","individual_legal","cell","cells"]});(function(){const{EnumManager,CatManager,DocManager,DataProcessorsManager,ChartOfCharacteristicManager,ChartOfAccountManager,InfoRegManager,AccumRegManager,BusinessProcessManager,TaskManager,CatObj,DocObj,TabularSectionRow,DataProcessorObj,RegisterRow,BusinessProcessObj,TaskObj}=$p.constructor.classes;const _define=Object.defineProperties;$p.enm.create('accumulation_record_type');$p.enm.create('sort_directions');$p.enm.create('comparison_types');$p.enm.create('label_positions');$p.enm.create('data_field_kinds');$p.enm.create('standard_period');$p.enm.create('quick_access');$p.enm.create('report_output');$p.enm.create('path_kind');$p.enm.create('inset_attrs_options');$p.enm.create('impost_mount_options');$p.enm.create('transfer_operations_options');$p.enm.create('offset_options');$p.enm.create('contraction_options');$p.enm.create('align_types');$p.enm.create('mutual_contract_settlements');$p.enm.create('debit_credit_kinds');$p.enm.create('contract_kinds');$p.enm.create('text_aligns');$p.enm.create('planning_detailing');$p.enm.create('obj_delivery_states');$p.enm.create('use_cut');$p.enm.create('order_categories');$p.enm.create('color_price_group_destinations');$p.enm.create('open_directions');$p.enm.create('orientations');$p.enm.create('positions');$p.enm.create('gender');$p.enm.create('parameters_keys_applying');$p.enm.create('bind_coordinates');$p.enm.create('buyers_order_states');$p.enm.create('count_calculating_ways');$p.enm.create('angle_calculating_ways');$p.enm.create('specification_installation_methods');$p.enm.create('vat_rates');$p.enm.create('cnn_sides');$p.enm.create('inserts_types');$p.enm.create('inserts_glass_types');$p.enm.create('lay_split_types');$p.enm.create('contact_information_types');$p.enm.create('nom_types');$p.enm.create('cutting_optimization_types');$p.enm.create('open_types');$p.enm.create('sz_line_types');$p.enm.create('cnn_types');$p.enm.create('specification_order_row_types');$p.enm.create('elm_types');$p.enm.create('planning_phases');$p.enm.create('individual_legal');/**
* ### План видов характеристик ПредопределенныеЭлементы
* Хранит значения настроек и параметров подсистем
* @class CchPredefined_elmnts
* @extends CatObj
* @constructor 
*/class CchPredefined_elmnts extends CatObj{get value(){const{_obj,type,_manager}=this;const{utils}=_manager._owner.$p;const res=_obj?_obj.value:'';if(_obj.is_folder){return'';}if(typeof res=='object'){return res;}else if(type.is_ref){if(type.digits&&typeof res==='number'){return res;}if(type.hasOwnProperty('str_len')&&!utils.is_guid(res)){return res;}const mgr=_manager.value_mgr(_obj,'value',type);if(mgr){if(utils.is_data_mgr(mgr)){return mgr.get(res,false);}else{return utils.fetch_type(res,mgr);}}if(res){_manager._owner.$p.record_log(['value',type,_obj]);return null;}}else if(type.date_part){return utils.fix_date(_obj.value,true);}else if(type.digits){return utils.fix_number(_obj.value,!type.hasOwnProperty('str_len'));}else if(type.types[0]=='boolean'){return utils.fix_boolean(_obj.value);}else{return _obj.value||'';}return this.characteristic.clr;}set value(v){const{_obj,_data,_manager}=this;if(_obj.value!==v){_manager.emit_async('update',this,{value:_obj.value});_obj.value=v.valueOf();_data._modified=true;}}get definition(){return this._getter('definition');}set definition(v){this._setter('definition',v);}get synonym(){return this._getter('synonym');}set synonym(v){this._setter('synonym',v);}get list(){return this._getter('list');}set list(v){this._setter('list',v);}get zone(){return this._getter('zone');}set zone(v){this._setter('zone',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get type(){const{type}=this._obj;return typeof type==='object'?type:{types:[]};}set type(v){this._obj.type=typeof v==='object'?v:{types:[]};}get elmnts(){return this._getter_ts('elmnts');}set elmnts(v){this._setter_ts('elmnts',v);}}$p.CchPredefined_elmnts=CchPredefined_elmnts;class CchPredefined_elmntsElmntsRow extends TabularSectionRow{get value(){return this._getter('value');}set value(v){this._setter('value',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}}$p.CchPredefined_elmntsElmntsRow=CchPredefined_elmntsElmntsRow;class CchPredefined_elmntsManager extends ChartOfCharacteristicManager{constructor(owner,class_name){super(owner,class_name);Object.defineProperty(this,'parents',{value:{}});const{md,doc,adapters}=this._owner.$p;adapters.pouch.once('pouch_doc_ram_loaded',()=>{// загружаем предопределенные элементы
this.job_prms();// рассчеты, помеченные, как шаблоны, загрузим в память заранее
doc.calc_order.load_templates&&setTimeout(doc.calc_order.load_templates.bind(doc.calc_order),1000);// даём возможность завершиться другим обработчикам, подписанным на _pouch_load_data_loaded_
setTimeout(()=>md.emit('predefined_elmnts_inited'),100);});}// этот метод адаптер вызывает перед загрузкой doc_ram
job_prms(){// создаём константы из alatable
this.forEach(row=>this.job_prm(row));// дополним автовычисляемыми свойствами
const{job_prm:{properties}}=this._owner.$p;if(properties){const{calculated,width,length}=properties;if(width&&calculated.indexOf(width)==-1){calculated.push(width);width._calculated_value={execute:obj=>obj&&obj.calc_order_row&&obj.calc_order_row.width||0};}if(length&&calculated.indexOf(length)==-1){calculated.push(length);length._calculated_value={execute:obj=>obj&&obj.calc_order_row&&obj.calc_order_row.len||0};}}}// создаёт константу
job_prm(row){const{job_prm,md,utils}=this._owner.$p;const{parents}=this;const parent=job_prm[parents[row.parent.valueOf()]];const _mgr=row.type.is_ref&&md.mgr_by_class_name(row.type.types[0]);if(parent){if(parent.hasOwnProperty(row.synonym)){delete parent[row.synonym];}if(row.list==-1){parent.__define(row.synonym,{value:(()=>{const res={};row.elmnts.forEach(row=>{res[row.elm.valueOf()]=_mgr?_mgr.get(row.value,false,false):row.value;});return res;})(),configurable:true,enumerable:true});}else if(row.list){parent.__define(row.synonym,{value:(row.elmnts._obj||row.elmnts).map(row=>{if(_mgr){const value=_mgr.get(row.value,false,false);if(!utils.is_empty_guid(row.elm)){value._formula=row.elm;}return value;}else{return row.value;}}),configurable:true,enumerable:true});}else{parent.__define(row.synonym,{value:_mgr?_mgr.get(row.value,false,false):row.value,configurable:true,enumerable:true});}}else{$p.record_log({class:'error',note:`no parent for ${row.synonym}`});}}// переопределяем load_array
load_array(aattr,forse){const{job_prm}=this._owner.$p;const{parents}=this;const elmnts=[];for(const row of aattr){// если элемент является папкой, создаём раздел в job_prm
if(row.is_folder&&row.synonym){parents[row.ref]=row.synonym;!job_prm[row.synonym]&&job_prm.__define(row.synonym,{value:{}});}// если не задан синоним - пропускаем
else if(row.synonym){// если есть подходящая папка, стразу делаем константу
if(parents[row.parent]){!job_prm[parents[row.parent]][row.synonym]&&this.job_prm(row);}// если папки нет - сохраним элемент в alatable
else{elmnts.push(row);}}}// метод по умолчанию
elmnts.length&&super.load_array(elmnts,forse);}}$p.cch.create('predefined_elmnts',CchPredefined_elmntsManager,false);/**
* ### План видов характеристик ДополнительныеРеквизитыИСведения
* Дополнительные реквизиты и сведения
* @class CchProperties
* @extends CatObj
* @constructor 
*/class CchProperties extends CatObj{get shown(){return this._getter('shown');}set shown(v){this._setter('shown',v);}get sorting_field(){return this._getter('sorting_field');}set sorting_field(v){this._setter('sorting_field',v);}get extra_values_owner(){return this._getter('extra_values_owner');}set extra_values_owner(v){this._setter('extra_values_owner',v);}get available(){return this._getter('available');}set available(v){this._setter('available',v);}get mandatory(){return this._getter('mandatory');}set mandatory(v){this._setter('mandatory',v);}get include_to_name(){return this._getter('include_to_name');}set include_to_name(v){this._setter('include_to_name',v);}get list(){return this._getter('list');}set list(v){this._setter('list',v);}get caption(){return this._getter('caption');}set caption(v){this._setter('caption',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get destination(){return this._getter('destination');}set destination(v){this._setter('destination',v);}get tooltip(){return this._getter('tooltip');}set tooltip(v){this._setter('tooltip',v);}get is_extra_property(){return this._getter('is_extra_property');}set is_extra_property(v){this._setter('is_extra_property',v);}get include_to_description(){return this._getter('include_to_description');}set include_to_description(v){this._setter('include_to_description',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get type(){const{type}=this._obj;return typeof type==='object'?type:{types:[]};}set type(v){this._obj.type=typeof v==='object'?v:{types:[]};}/**
   * ### Является ли значение параметра вычисляемым
   *
   * @property is_calculated
   * @type Boolean
   */get is_calculated(){return($p.job_prm.properties.calculated||[]).indexOf(this)!=-1;}get show_calculated(){return($p.job_prm.properties.show_calculated||[]).indexOf(this)!=-1;}/**
   * ### Рассчитывает значение вычисляемого параметра
   * @param obj {Object}
   * @param [obj.row]
   * @param [obj.elm]
   * @param [obj.ox]
   */calculated_value(obj){if(!this._calculated_value){if(this._formula){this._calculated_value=$p.cat.formulas.get(this._formula);}else{return;}}return this._calculated_value.execute(obj);}/**
   * ### Проверяет условие в строке отбора
   */check_condition({row_spec,prm_row,elm,cnstr,origin,ox,calc_order}){const{is_calculated}=this;const{utils,enm:{comparison_types}}=$p;// значение параметра
const val=is_calculated?this.calculated_value({row:row_spec,cnstr:cnstr||0,elm,ox,calc_order}):this.extract_value(prm_row);let ok=false;// если сравнение на равенство - решаем в лоб, если вычисляемый параметр типа массив - выясняем вхождение значения в параметр
if(ox&&!Array.isArray(val)&&(prm_row.comparison_type.empty()||prm_row.comparison_type==comparison_types.eq)){if(is_calculated){ok=val==prm_row.value;}else{if(ox.params){ox.params.find_rows({cnstr:cnstr||0,inset:typeof origin!=='number'&&origin||utils.blank.guid,param:this,value:val},()=>{ok=true;return false;});}else if(ox.product_params){ox.product_params.find_rows({elm:elm.elm||0,param:this,value:val},()=>{ok=true;return false;});}}}// вычисляемый параметр - его значение уже рассчитано формулой (val) - сравниваем со значением в строке ограничений
else if(is_calculated){const value=this.extract_value(prm_row);ok=utils.check_compare(val,value,prm_row.comparison_type,comparison_types);}// параметр явно указан в табчасти параметров изделия
else{if(ox.params){ox.params.find_rows({cnstr:cnstr||0,inset:typeof origin!=='number'&&origin||utils.blank.guid,param:this},({value})=>{// value - значение из строки параметра текущей продукции, val - знаяение из параметров отбора
ok=utils.check_compare(value,val,prm_row.comparison_type,comparison_types);return false;});}else if(ox.product_params){ox.product_params.find_rows({elm:elm.elm||0,param:this},({value})=>{// value - значение из строки параметра текущей продукции, val - знаяение из параметров отбора
ok=utils.check_compare(value,val,prm_row.comparison_type,comparison_types);return false;});}}return ok;}/**
   * Извлекает значение параметра с учетом вычисляемости
   */extract_value({comparison_type,txt_row,value}){switch(comparison_type){case $p.enm.comparison_types.in:case $p.enm.comparison_types.nin:if(!txt_row){return value;}try{const arr=JSON.parse(txt_row);const{types}=this.type;if(types&&types.length==1){const mgr=$p.md.mgr_by_class_name(types[0]);return arr.map(ref=>mgr.get(ref,false));}return arr;}catch(err){return value;}default:return value;}}/**
   * Возвращает массив связей текущего параметра
   */params_links(attr){// первым делом, выясняем, есть ли ограничитель на текущий параметр
if(!this.hasOwnProperty('_params_links')){this._params_links=$p.cat.params_links.find_rows({slave:this});}return this._params_links.filter(link=>{//use_master бывает 0 - один ведущий, 1 - несколько ведущих через И, 2 - несколько ведущих через ИЛИ
const use_master=link.use_master||0;let ok=true&&use_master<2;//в зависимости от use_master у нас массив либо из одного, либо из нескольких ключей ведущиъ для проверки
const arr=!use_master?[{key:link.master}]:link.leadings;arr.forEach(row_key=>{let ok_key=true;// для всех записей ключа параметров
row_key.key.params.forEach(row=>{// выполнение условия рассчитывает объект CchProperties
ok_key=row.property.check_condition({cnstr:attr.grid.selection.cnstr,ox:attr.obj._owner._owner,prm_row:row,elm:attr.obj});//Если строка условия в ключе не выполняется, то дальше проверять его условия смысла нет
if(!ok_key){return false;}});//Для проверки через ИЛИ логика накопительная - надо проверить все ключи до единого
if(use_master==2){ok=ok||ok_key;}//Для проверки через И достаточно найти один неподходящий ключ, чтобы остановиться и признать связь неподходящей
else if(!ok_key){ok=false;return false;}});//Конечный возврат в функцию фильтрации массива связей
return ok;});}/**
   * Проверяет и при необходимости перезаполняет или устанваливает умолчание value в prow
   */linked_values(links,prow){const values=[];let changed;// собираем все доступные значения в одном массиве
links.forEach(link=>link.values.forEach(row=>values.push(row)));// если значение доступно в списке - спокойно уходим
if(values.some(row=>row._obj.value==prow.value)){return;}// если есть явный default - устанавливаем
if(values.some(row=>{if(row.forcibly){prow.value=row._obj.value;return true;}if(row.by_default&&(!prow.value||prow.value.empty&&prow.value.empty())){prow.value=row._obj.value;changed=true;}})){return true;}// если не нашли лучшего, установим первый попавшийся
if(changed){return true;}if(values.length){prow.value=values[0]._obj.value;return true;}}/**
   * ### Дополняет отбор фильтром по параметрам выбора
   * Используется в полях ввода экранных форм
   * @param filter {Object} - дополняемый фильтр
   * @param attr {Object} - атрибуты OCombo
   */filter_params_links(filter,attr,links){// для всех отфильтрованных связей параметров
if(!links){links=this.params_links(attr);}links.forEach(link=>{// если ключ найден в параметрах, добавляем фильтр
if(!filter.ref){filter.ref={in:[]};}if(filter.ref.in){link.values._obj.forEach(row=>{if(filter.ref.in.indexOf(row.value)==-1){filter.ref.in.push(row.value);}});}});}}$p.CchProperties=CchProperties;class CchPropertiesManager extends ChartOfCharacteristicManager{/**
   * ### Проверяет заполненность обязательных полей
   *
   * @method check_mandatory
   * @override
   * @param prms {Array}
   * @param title {String}
   * @return {Boolean}
   */check_mandatory(prms,title){var t,row;// проверяем заполненность полей
for(t in prms){row=prms[t];if(row.param.mandatory&&(!row.value||row.value.empty())){$p.msg.show_msg({type:'alert-error',text:$p.msg.bld_empty_param+row.param.presentation,title:title||$p.msg.bld_title});return true;}}}/**
   * ### Возвращает массив доступных для данного свойства значений
   *
   * @method slist
   * @override
   * @param prop {CatObj} - планвидовхарактеристик ссылка или объект
   * @param ret_mgr {Object} - установить в этом объекте указатель на менеджера объекта
   * @return {Array}
   */slist(prop,ret_mgr){var res=[],rt,at,pmgr,op=this.get(prop);if(op&&op.type.is_ref){// параметры получаем из локального кеша
for(rt in op.type.types)if(op.type.types[rt].indexOf('.')>-1){at=op.type.types[rt].split('.');pmgr=$p[at[0]][at[1]];if(pmgr){if(ret_mgr){ret_mgr.mgr=pmgr;}if(pmgr.class_name=='enm.open_directions'){pmgr.get_option_list().forEach(v=>v.value&&v.value!=$p.enm.tso.folding&&res.push(v));}else if(pmgr.class_name.indexOf('enm.')!=-1||!pmgr.metadata().has_owners){res=pmgr.get_option_list();}else{pmgr.find_rows({owner:prop},v=>res.push({value:v.ref,text:v.presentation}));}}}}return res;}}$p.cch.create('properties',CchPropertiesManager,false);/**
* ### Справочник СвязиПараметров
* Подчиненные параметры
* @class CatParams_links
* @extends CatObj
* @constructor 
*/class CatParams_links extends CatObj{get master(){return this._getter('master');}set master(v){this._setter('master',v);}get slave(){return this._getter('slave');}set slave(v){this._setter('slave',v);}get hide(){return this._getter('hide');}set hide(v){this._setter('hide',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get use_master(){return this._getter('use_master');}set use_master(v){this._setter('use_master',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zone(){return this._getter('zone');}set zone(v){this._setter('zone',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get leadings(){return this._getter_ts('leadings');}set leadings(v){this._setter_ts('leadings',v);}get values(){return this._getter_ts('values');}set values(v){this._setter_ts('values',v);}}$p.CatParams_links=CatParams_links;class CatParams_linksLeadingsRow extends TabularSectionRow{get key(){return this._getter('key');}set key(v){this._setter('key',v);}}$p.CatParams_linksLeadingsRow=CatParams_linksLeadingsRow;class CatParams_linksValuesRow extends TabularSectionRow{get value(){return this._getter('value');}set value(v){this._setter('value',v);}get by_default(){return this._getter('by_default');}set by_default(v){this._setter('by_default',v);}get forcibly(){return this._getter('forcibly');}set forcibly(v){this._setter('forcibly',v);}}$p.CatParams_linksValuesRow=CatParams_linksValuesRow;$p.cat.create('params_links');/**
* ### Справочник пзЦвета
* Цвета
* @class CatClrs
* @extends CatObj
* @constructor 
*/class CatClrs extends CatObj{get ral(){return this._getter('ral');}set ral(v){this._setter('ral',v);}get machine_tools_clr(){return this._getter('machine_tools_clr');}set machine_tools_clr(v){this._setter('machine_tools_clr',v);}get clr_str(){return this._getter('clr_str');}set clr_str(v){this._setter('clr_str',v);}get clr_out(){return this._getter('clr_out');}set clr_out(v){this._setter('clr_out',v);}get clr_in(){return this._getter('clr_in');}set clr_in(v){this._setter('clr_in',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatClrs=CatClrs;$p.cat.create('clrs');/**
* ### Справочник СтраныМира
* Страны мира
* @class CatCountries
* @extends CatObj
* @constructor 
*/class CatCountries extends CatObj{get name_full(){return this._getter('name_full');}set name_full(v){this._setter('name_full',v);}get alpha2(){return this._getter('alpha2');}set alpha2(v){this._setter('alpha2',v);}get alpha3(){return this._getter('alpha3');}set alpha3(v){this._setter('alpha3',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatCountries=CatCountries;$p.cat.create('countries');/**
* ### Справочник БанковскиеСчетаКонтрагентов
* Банковские счета сторонних контрагентов и физических лиц.
* @class CatPartner_bank_accounts
* @extends CatObj
* @constructor 
*/class CatPartner_bank_accounts extends CatObj{get account_number(){return this._getter('account_number');}set account_number(v){this._setter('account_number',v);}get bank(){return this._getter('bank');}set bank(v){this._setter('bank',v);}get settlements_bank(){return this._getter('settlements_bank');}set settlements_bank(v){this._setter('settlements_bank',v);}get correspondent_text(){return this._getter('correspondent_text');}set correspondent_text(v){this._setter('correspondent_text',v);}get appointments_text(){return this._getter('appointments_text');}set appointments_text(v){this._setter('appointments_text',v);}get funds_currency(){return this._getter('funds_currency');}set funds_currency(v){this._setter('funds_currency',v);}get bank_bic(){return this._getter('bank_bic');}set bank_bic(v){this._setter('bank_bic',v);}get bank_name(){return this._getter('bank_name');}set bank_name(v){this._setter('bank_name',v);}get bank_correspondent_account(){return this._getter('bank_correspondent_account');}set bank_correspondent_account(v){this._setter('bank_correspondent_account',v);}get bank_city(){return this._getter('bank_city');}set bank_city(v){this._setter('bank_city',v);}get bank_address(){return this._getter('bank_address');}set bank_address(v){this._setter('bank_address',v);}get bank_phone_numbers(){return this._getter('bank_phone_numbers');}set bank_phone_numbers(v){this._setter('bank_phone_numbers',v);}get settlements_bank_bic(){return this._getter('settlements_bank_bic');}set settlements_bank_bic(v){this._setter('settlements_bank_bic',v);}get settlements_bank_correspondent_account(){return this._getter('settlements_bank_correspondent_account');}set settlements_bank_correspondent_account(v){this._setter('settlements_bank_correspondent_account',v);}get settlements_bank_city(){return this._getter('settlements_bank_city');}set settlements_bank_city(v){this._setter('settlements_bank_city',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}}$p.CatPartner_bank_accounts=CatPartner_bank_accounts;$p.cat.create('partner_bank_accounts');/**
* ### Справочник БанковскиеСчетаОрганизаций
* Банковские счета собственных организаций. 
* @class CatOrganization_bank_accounts
* @extends CatObj
* @constructor 
*/class CatOrganization_bank_accounts extends CatObj{get bank(){return this._getter('bank');}set bank(v){this._setter('bank',v);}get bank_bic(){return this._getter('bank_bic');}set bank_bic(v){this._setter('bank_bic',v);}get funds_currency(){return this._getter('funds_currency');}set funds_currency(v){this._setter('funds_currency',v);}get account_number(){return this._getter('account_number');}set account_number(v){this._setter('account_number',v);}get settlements_bank(){return this._getter('settlements_bank');}set settlements_bank(v){this._setter('settlements_bank',v);}get settlements_bank_bic(){return this._getter('settlements_bank_bic');}set settlements_bank_bic(v){this._setter('settlements_bank_bic',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}}$p.CatOrganization_bank_accounts=CatOrganization_bank_accounts;$p.cat.create('organization_bank_accounts');/**
* ### Справочник ЗначенияСвойствОбъектовИерархия
* Дополнительные значения (иерархия)
* @class CatProperty_values_hierarchy
* @extends CatObj
* @constructor 
*/class CatProperty_values_hierarchy extends CatObj{get heft(){return this._getter('heft');}set heft(v){this._setter('heft',v);}get ПолноеНаименование(){return this._getter('ПолноеНаименование');}set ПолноеНаименование(v){this._setter('ПолноеНаименование',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatProperty_values_hierarchy=CatProperty_values_hierarchy;$p.cat.create('property_values_hierarchy');/**
* ### Справочник КлассификаторБанковРФ
* Классификатор банков РФ
* @class CatBanks_qualifier
* @extends CatObj
* @constructor 
*/class CatBanks_qualifier extends CatObj{get correspondent_account(){return this._getter('correspondent_account');}set correspondent_account(v){this._setter('correspondent_account',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get address(){return this._getter('address');}set address(v){this._setter('address',v);}get phone_numbers(){return this._getter('phone_numbers');}set phone_numbers(v){this._setter('phone_numbers',v);}get activity_ceased(){return this._getter('activity_ceased');}set activity_ceased(v){this._setter('activity_ceased',v);}get swift(){return this._getter('swift');}set swift(v){this._setter('swift',v);}get inn(){return this._getter('inn');}set inn(v){this._setter('inn',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatBanks_qualifier=CatBanks_qualifier;$p.cat.create('banks_qualifier');/**
* ### Справочник НаборыДополнительныхРеквизитовИСведений
* Наборы дополнительных реквизитов и сведений
* @class CatDestinations
* @extends CatObj
* @constructor 
*/class CatDestinations extends CatObj{get КоличествоРеквизитов(){return this._getter('КоличествоРеквизитов');}set КоличествоРеквизитов(v){this._setter('КоличествоРеквизитов',v);}get КоличествоСведений(){return this._getter('КоличествоСведений');}set КоличествоСведений(v){this._setter('КоличествоСведений',v);}get Используется(){return this._getter('Используется');}set Используется(v){this._setter('Используется',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}get extra_properties(){return this._getter_ts('extra_properties');}set extra_properties(v){this._setter_ts('extra_properties',v);}}$p.CatDestinations=CatDestinations;class CatDestinationsExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get _deleted(){return this._getter('_deleted');}set _deleted(v){this._setter('_deleted',v);}}$p.CatDestinationsExtra_fieldsRow=CatDestinationsExtra_fieldsRow;class CatDestinationsExtra_propertiesRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get _deleted(){return this._getter('_deleted');}set _deleted(v){this._setter('_deleted',v);}}$p.CatDestinationsExtra_propertiesRow=CatDestinationsExtra_propertiesRow;$p.cat.create('destinations');/**
* ### Справочник Формулы
* Формулы пользователя, для выполнения при расчете спецификаций в справочниках Вставки, Соединения, Фурнитура и регистре Корректировки спецификации
* @class CatFormulas
* @extends CatObj
* @constructor 
*/class CatFormulas extends CatObj{get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get leading_formula(){return this._getter('leading_formula');}set leading_formula(v){this._setter('leading_formula',v);}get condition_formula(){return this._getter('condition_formula');}set condition_formula(v){this._setter('condition_formula',v);}get definition(){return this._getter('definition');}set definition(v){this._setter('definition',v);}get template(){return this._getter('template');}set template(v){this._setter('template',v);}get sorting_field(){return this._getter('sorting_field');}set sorting_field(v){this._setter('sorting_field',v);}get async(){return this._getter('async');}set async(v){this._setter('async',v);}get disabled(){return this._getter('disabled');}set disabled(v){this._setter('disabled',v);}get zone(){return this._getter('zone');}set zone(v){this._setter('zone',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get params(){return this._getter_ts('params');}set params(v){this._setter_ts('params',v);}execute(obj,attr){const{_manager,_data}=this;const{$p}=_manager._owner;// создаём функцию из текста формулы
if(!_data._formula&&this.formula){try{if(this.async){const AsyncFunction=Object.getPrototypeOf(async function(){}).constructor;_data._formula=new AsyncFunction("obj,$p,attr",this.formula).bind(this);}else{_data._formula=new Function("obj,$p,attr",this.formula).bind(this);}}catch(err){_data._formula=()=>false;$p.record_log(err);}}const{_formula}=_data;if(this.parent==_manager.predefined("printing_plates")){if(!_formula){$p.msg.show_msg({title:$p.msg.bld_title,type:"alert-error",text:`Ошибка в формуле<br /><b>${this.name}</b>`});return Promise.resolve();}// получаем HTMLDivElement с отчетом
return _formula(obj,$p,attr)// показываем отчет в отдельном окне
.then(doc=>doc instanceof $p.SpreadsheetDocument&&doc.print());}else{return _formula&&_formula(obj,$p,attr);}}get _template(){const{_data}=this;if(!_data._template){_data._template=new this._manager._owner.$p.SpreadsheetDocument(this.template);}return _data._template;}}$p.CatFormulas=CatFormulas;class CatFormulasParamsRow extends TabularSectionRow{get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}}$p.CatFormulasParamsRow=CatFormulasParamsRow;class CatFormulasManager extends CatManager{constructor(owner,class_name){super(owner,class_name);this._owner.$p.adapters.pouch.once('pouch_doc_ram_start',()=>this.load_formulas());}load_formulas(){const{md,utils}=this._owner.$p;const parents=[this.predefined('printing_plates'),this.predefined('modifiers')];const filtered=[];this.forEach(v=>{!v.disabled&&parents.indexOf(v.parent)!==-1&&filtered.push(v);});filtered.sort((a,b)=>a.sorting_field-b.sorting_field).forEach(formula=>{// формируем списки печатных форм и внешних обработок
if(formula.parent==parents[0]){formula.params.find_rows({param:'destination'},dest=>{const dmgr=md.mgr_by_class_name(dest.value);if(dmgr){if(!dmgr._printing_plates){dmgr._printing_plates={};}dmgr._printing_plates[`prn_${formula.ref}`]=formula;}});}else{// выполняем модификаторы
try{utils.cron?utils.cron(formula.execute()):formula.execute();}catch(err){}}});}// переопределяем load_array - не грузим неактивные формулы
load_array(aattr,forse){super.load_array(aattr.filter(v=>{return!v.disabled||v.is_folder;}),forse);}}$p.cat.create('formulas',CatFormulasManager,false);/**
* ### Справочник пзВизуализацияЭлементов
* Строки svg для рисования петель, ручек и графических примитивов
* @class CatElm_visualization
* @extends CatObj
* @constructor 
*/class CatElm_visualization extends CatObj{get svg_path(){return this._getter('svg_path');}set svg_path(v){this._setter('svg_path',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get attributes(){return this._getter('attributes');}set attributes(v){this._setter('attributes',v);}get rotate(){return this._getter('rotate');}set rotate(v){this._setter('rotate',v);}get offset(){return this._getter('offset');}set offset(v){this._setter('offset',v);}get side(){return this._getter('side');}set side(v){this._setter('side',v);}get elm_side(){return this._getter('elm_side');}set elm_side(v){this._setter('elm_side',v);}get cx(){return this._getter('cx');}set cx(v){this._setter('cx',v);}get cy(){return this._getter('cy');}set cy(v){this._setter('cy',v);}get angle_hor(){return this._getter('angle_hor');}set angle_hor(v){this._setter('angle_hor',v);}get priority(){return this._getter('priority');}set priority(v){this._setter('priority',v);}get mode(){return this._getter('mode');}set mode(v){this._setter('mode',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatElm_visualization=CatElm_visualization;$p.cat.create('elm_visualization');/**
* ### Справочник ИнтеграцияОтделыАбонентов
* Отделы абонентов
* @class CatBranches
* @extends CatObj
* @constructor 
*/class CatBranches extends CatObj{get suffix(){return this._getter('suffix');}set suffix(v){this._setter('suffix',v);}get direct(){return this._getter('direct');}set direct(v){this._setter('direct',v);}get use(){return this._getter('use');}set use(v){this._setter('use',v);}get mode(){return this._getter('mode');}set mode(v){this._setter('mode',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get organizations(){return this._getter_ts('organizations');}set organizations(v){this._setter_ts('organizations',v);}get partners(){return this._getter_ts('partners');}set partners(v){this._setter_ts('partners',v);}get divisions(){return this._getter_ts('divisions');}set divisions(v){this._setter_ts('divisions',v);}get price_types(){return this._getter_ts('price_types');}set price_types(v){this._setter_ts('price_types',v);}get keys(){return this._getter_ts('keys');}set keys(v){this._setter_ts('keys',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatBranches=CatBranches;class CatBranchesOrganizationsRow extends TabularSectionRow{get acl_obj(){return this._getter('acl_obj');}set acl_obj(v){this._setter('acl_obj',v);}get by_default(){return this._getter('by_default');}set by_default(v){this._setter('by_default',v);}}$p.CatBranchesOrganizationsRow=CatBranchesOrganizationsRow;class CatBranchesPartnersRow extends TabularSectionRow{get acl_obj(){return this._getter('acl_obj');}set acl_obj(v){this._setter('acl_obj',v);}get by_default(){return this._getter('by_default');}set by_default(v){this._setter('by_default',v);}}$p.CatBranchesPartnersRow=CatBranchesPartnersRow;class CatBranchesDivisionsRow extends TabularSectionRow{get acl_obj(){return this._getter('acl_obj');}set acl_obj(v){this._setter('acl_obj',v);}get by_default(){return this._getter('by_default');}set by_default(v){this._setter('by_default',v);}}$p.CatBranchesDivisionsRow=CatBranchesDivisionsRow;class CatBranchesPrice_typesRow extends TabularSectionRow{get acl_obj(){return this._getter('acl_obj');}set acl_obj(v){this._setter('acl_obj',v);}}$p.CatBranchesPrice_typesRow=CatBranchesPrice_typesRow;class CatBranchesKeysRow extends TabularSectionRow{get acl_obj(){return this._getter('acl_obj');}set acl_obj(v){this._setter('acl_obj',v);}}$p.CatBranchesKeysRow=CatBranchesKeysRow;class CatBranchesExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatBranchesExtra_fieldsRow=CatBranchesExtra_fieldsRow;class CatBranchesManager extends CatManager{constructor(owner,class_name){super(owner,class_name);// после загрузки данных, надо настроить отборы в метаданных полей рисовалки
$p.adapters.pouch.once("pouch_complete_loaded",()=>{if($p.job_prm.properties&&$p.current_user&&!$p.current_user.branch.empty()&&$p.job_prm.builder){const{ПараметрВыбора}=$p.enm.parameters_keys_applying;const{furn,sys}=$p.job_prm.properties;// накапливаем
$p.current_user.branch.load().then(({keys})=>{const branch_filter=$p.job_prm.builder.branch_filter={furn:[],sys:[]};keys.forEach(({acl_obj})=>{if(acl_obj.applying==ПараметрВыбора){acl_obj.params.forEach(({property,value})=>{if(property===furn){branch_filter.furn.push(value);}else if(property===sys){branch_filter.sys.push(value);}});}});return branch_filter;}).then(branch_filter=>{// применяем
if(branch_filter.furn.length){const mf=$p.cat.characteristics.metadata('constructions').fields.furn;mf.choice_params.push({name:"ref",path:{inh:branch_filter.furn}});}if(branch_filter.sys.length){const mf=$p.dp.buyers_order.metadata().fields.sys;mf.choice_params=[{name:"ref",path:{inh:branch_filter.sys}}];}});}});}}$p.cat.create('branches',CatBranchesManager,false);/**
* ### Справочник пзФурнитура
* Описывает ограничения и правила формирования спецификаций фурнитуры
* @class CatFurns
* @extends CatObj
* @constructor 
*/class CatFurns extends CatObj{get flap_weight_max(){return this._getter('flap_weight_max');}set flap_weight_max(v){this._setter('flap_weight_max',v);}get left_right(){return this._getter('left_right');}set left_right(v){this._setter('left_right',v);}get is_set(){return this._getter('is_set');}set is_set(v){this._setter('is_set',v);}get is_sliding(){return this._getter('is_sliding');}set is_sliding(v){this._setter('is_sliding',v);}get furn_set(){return this._getter('furn_set');}set furn_set(v){this._setter('furn_set',v);}get side_count(){return this._getter('side_count');}set side_count(v){this._setter('side_count',v);}get handle_side(){return this._getter('handle_side');}set handle_side(v){this._setter('handle_side',v);}get open_type(){return this._getter('open_type');}set open_type(v){this._setter('open_type',v);}get name_short(){return this._getter('name_short');}set name_short(v){this._setter('name_short',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get open_tunes(){return this._getter_ts('open_tunes');}set open_tunes(v){this._setter_ts('open_tunes',v);}get specification(){return this._getter_ts('specification');}set specification(v){this._setter_ts('specification',v);}get selection_params(){return this._getter_ts('selection_params');}set selection_params(v){this._setter_ts('selection_params',v);}get specification_restrictions(){return this._getter_ts('specification_restrictions');}set specification_restrictions(v){this._setter_ts('specification_restrictions',v);}get colors(){return this._getter_ts('colors');}set colors(v){this._setter_ts('colors',v);}}$p.CatFurns=CatFurns;class CatFurnsOpen_tunesRow extends TabularSectionRow{get side(){return this._getter('side');}set side(v){this._setter('side',v);}get lmin(){return this._getter('lmin');}set lmin(v){this._setter('lmin',v);}get lmax(){return this._getter('lmax');}set lmax(v){this._setter('lmax',v);}get amin(){return this._getter('amin');}set amin(v){this._setter('amin',v);}get amax(){return this._getter('amax');}set amax(v){this._setter('amax',v);}get arc_available(){return this._getter('arc_available');}set arc_available(v){this._setter('arc_available',v);}get shtulp_available(){return this._getter('shtulp_available');}set shtulp_available(v){this._setter('shtulp_available',v);}get shtulp_fix_here(){return this._getter('shtulp_fix_here');}set shtulp_fix_here(v){this._setter('shtulp_fix_here',v);}get rotation_axis(){return this._getter('rotation_axis');}set rotation_axis(v){this._setter('rotation_axis',v);}get partial_opening(){return this._getter('partial_opening');}set partial_opening(v){this._setter('partial_opening',v);}get outline(){return this._getter('outline');}set outline(v){this._setter('outline',v);}}$p.CatFurnsOpen_tunesRow=CatFurnsOpen_tunesRow;class CatFurnsSpecificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get dop(){return this._getter('dop');}set dop(v){this._setter('dop',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get nom_characteristic(){return this._getter('nom_characteristic');}set nom_characteristic(v){this._setter('nom_characteristic',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get handle_height_base(){return this._getter('handle_height_base');}set handle_height_base(v){this._setter('handle_height_base',v);}get fix_ruch(){return this._getter('fix_ruch');}set fix_ruch(v){this._setter('fix_ruch',v);}get handle_height_min(){return this._getter('handle_height_min');}set handle_height_min(v){this._setter('handle_height_min',v);}get handle_height_max(){return this._getter('handle_height_max');}set handle_height_max(v){this._setter('handle_height_max',v);}get contraction(){return this._getter('contraction');}set contraction(v){this._setter('contraction',v);}get contraction_option(){return this._getter('contraction_option');}set contraction_option(v){this._setter('contraction_option',v);}get coefficient(){return this._getter('coefficient');}set coefficient(v){this._setter('coefficient',v);}get flap_weight_min(){return this._getter('flap_weight_min');}set flap_weight_min(v){this._setter('flap_weight_min',v);}get flap_weight_max(){return this._getter('flap_weight_max');}set flap_weight_max(v){this._setter('flap_weight_max',v);}get side(){return this._getter('side');}set side(v){this._setter('side',v);}get cnn_side(){return this._getter('cnn_side');}set cnn_side(v){this._setter('cnn_side',v);}get offset_option(){return this._getter('offset_option');}set offset_option(v){this._setter('offset_option',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get transfer_option(){return this._getter('transfer_option');}set transfer_option(v){this._setter('transfer_option',v);}get overmeasure(){return this._getter('overmeasure');}set overmeasure(v){this._setter('overmeasure',v);}get is_main_specification_row(){return this._getter('is_main_specification_row');}set is_main_specification_row(v){this._setter('is_main_specification_row',v);}get is_set_row(){return this._getter('is_set_row');}set is_set_row(v){this._setter('is_set_row',v);}get is_procedure_row(){return this._getter('is_procedure_row');}set is_procedure_row(v){this._setter('is_procedure_row',v);}get is_order_row(){return this._getter('is_order_row');}set is_order_row(v){this._setter('is_order_row',v);}}$p.CatFurnsSpecificationRow=CatFurnsSpecificationRow;class CatFurnsSelection_paramsRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get dop(){return this._getter('dop');}set dop(v){this._setter('dop',v);}get param(){return this._getter('param');}set param(v){this._setter('param',v);}get comparison_type(){return this._getter('comparison_type');}set comparison_type(v){this._setter('comparison_type',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatFurnsSelection_paramsRow=CatFurnsSelection_paramsRow;class CatFurnsSpecification_restrictionsRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get dop(){return this._getter('dop');}set dop(v){this._setter('dop',v);}get side(){return this._getter('side');}set side(v){this._setter('side',v);}get lmin(){return this._getter('lmin');}set lmin(v){this._setter('lmin',v);}get lmax(){return this._getter('lmax');}set lmax(v){this._setter('lmax',v);}get amin(){return this._getter('amin');}set amin(v){this._setter('amin',v);}get amax(){return this._getter('amax');}set amax(v){this._setter('amax',v);}get for_direct_profile_only(){return this._getter('for_direct_profile_only');}set for_direct_profile_only(v){this._setter('for_direct_profile_only',v);}}$p.CatFurnsSpecification_restrictionsRow=CatFurnsSpecification_restrictionsRow;class CatFurnsColorsRow extends TabularSectionRow{get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}}$p.CatFurnsColorsRow=CatFurnsColorsRow;$p.cat.create('furns');/**
* ### Справочник Валюты
* Валюты, используемые при расчетах
* @class CatCurrencies
* @extends CatObj
* @constructor 
*/class CatCurrencies extends CatObj{get name_full(){return this._getter('name_full');}set name_full(v){this._setter('name_full',v);}get extra_charge(){return this._getter('extra_charge');}set extra_charge(v){this._setter('extra_charge',v);}get main_currency(){return this._getter('main_currency');}set main_currency(v){this._setter('main_currency',v);}get parameters_russian_recipe(){return this._getter('parameters_russian_recipe');}set parameters_russian_recipe(v){this._setter('parameters_russian_recipe',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatCurrencies=CatCurrencies;$p.cat.create('currencies');/**
* ### Справочник ВидыКонтактнойИнформации
* Виды контактной информации
* @class CatContact_information_kinds
* @extends CatObj
* @constructor 
*/class CatContact_information_kinds extends CatObj{get mandatory_fields(){return this._getter('mandatory_fields');}set mandatory_fields(v){this._setter('mandatory_fields',v);}get type(){return this._getter('type');}set type(v){this._setter('type',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatContact_information_kinds=CatContact_information_kinds;$p.cat.create('contact_information_kinds');/**
* ### Справочник ВидыНоменклатуры
* Виды номенклатуры
* @class CatNom_kinds
* @extends CatObj
* @constructor 
*/class CatNom_kinds extends CatObj{get nom_type(){return this._getter('nom_type');}set nom_type(v){this._setter('nom_type',v);}get dnom(){return this._getter('dnom');}set dnom(v){this._setter('dnom',v);}get dcharacteristic(){return this._getter('dcharacteristic');}set dcharacteristic(v){this._setter('dcharacteristic',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatNom_kinds=CatNom_kinds;$p.cat.create('nom_kinds');/**
* ### Справочник ДоговорыКонтрагентов
* Перечень договоров, заключенных с контрагентами
* @class CatContracts
* @extends CatObj
* @constructor 
*/class CatContracts extends CatObj{get settlements_currency(){return this._getter('settlements_currency');}set settlements_currency(v){this._setter('settlements_currency',v);}get mutual_settlements(){return this._getter('mutual_settlements');}set mutual_settlements(v){this._setter('mutual_settlements',v);}get contract_kind(){return this._getter('contract_kind');}set contract_kind(v){this._setter('contract_kind',v);}get date(){return this._getter('date');}set date(v){this._setter('date',v);}get check_days_without_pay(){return this._getter('check_days_without_pay');}set check_days_without_pay(v){this._setter('check_days_without_pay',v);}get allowable_debts_amount(){return this._getter('allowable_debts_amount');}set allowable_debts_amount(v){this._setter('allowable_debts_amount',v);}get allowable_debts_days(){return this._getter('allowable_debts_days');}set allowable_debts_days(v){this._setter('allowable_debts_days',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get check_debts_amount(){return this._getter('check_debts_amount');}set check_debts_amount(v){this._setter('check_debts_amount',v);}get check_debts_days(){return this._getter('check_debts_days');}set check_debts_days(v){this._setter('check_debts_days',v);}get number_doc(){return this._getter('number_doc');}set number_doc(v){this._setter('number_doc',v);}get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get main_cash_flow_article(){return this._getter('main_cash_flow_article');}set main_cash_flow_article(v){this._setter('main_cash_flow_article',v);}get main_project(){return this._getter('main_project');}set main_project(v){this._setter('main_project',v);}get accounting_reflect(){return this._getter('accounting_reflect');}set accounting_reflect(v){this._setter('accounting_reflect',v);}get tax_accounting_reflect(){return this._getter('tax_accounting_reflect');}set tax_accounting_reflect(v){this._setter('tax_accounting_reflect',v);}get prepayment_percent(){return this._getter('prepayment_percent');}set prepayment_percent(v){this._setter('prepayment_percent',v);}get validity(){return this._getter('validity');}set validity(v){this._setter('validity',v);}get vat_included(){return this._getter('vat_included');}set vat_included(v){this._setter('vat_included',v);}get price_type(){return this._getter('price_type');}set price_type(v){this._setter('price_type',v);}get vat_consider(){return this._getter('vat_consider');}set vat_consider(v){this._setter('vat_consider',v);}get days_without_pay(){return this._getter('days_without_pay');}set days_without_pay(v){this._setter('days_without_pay',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatContracts=CatContracts;$p.cat.create('contracts');/**
* ### Справочник ЕдиницыИзмерения
* Перечень единиц измерения номенклатуры и номенклатурных групп
* @class CatNom_units
* @extends CatObj
* @constructor 
*/class CatNom_units extends CatObj{get qualifier_unit(){return this._getter('qualifier_unit');}set qualifier_unit(v){this._setter('qualifier_unit',v);}get heft(){return this._getter('heft');}set heft(v){this._setter('heft',v);}get volume(){return this._getter('volume');}set volume(v){this._setter('volume',v);}get coefficient(){return this._getter('coefficient');}set coefficient(v){this._setter('coefficient',v);}get rounding_threshold(){return this._getter('rounding_threshold');}set rounding_threshold(v){this._setter('rounding_threshold',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}}$p.CatNom_units=CatNom_units;$p.cat.create('nom_units');/**
* ### Справочник ЗначенияСвойствОбъектов
* Дополнительные значения
* @class CatProperty_values
* @extends CatObj
* @constructor 
*/class CatProperty_values extends CatObj{get heft(){return this._getter('heft');}set heft(v){this._setter('heft',v);}get ПолноеНаименование(){return this._getter('ПолноеНаименование');}set ПолноеНаименование(v){this._setter('ПолноеНаименование',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatProperty_values=CatProperty_values;$p.cat.create('property_values');/**
* ### Справочник ИдентификаторыОбъектовМетаданных
* Идентификаторы объектов метаданных для использования в базе данных.
* @class CatMeta_ids
* @extends CatObj
* @constructor 
*/class CatMeta_ids extends CatObj{get full_moniker(){return this._getter('full_moniker');}set full_moniker(v){this._setter('full_moniker',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatMeta_ids=CatMeta_ids;$p.cat.create('meta_ids');/**
* ### Справочник Кассы
* Список мест фактического хранения и движения наличных денежных средств предприятия. Кассы разделены по организациям и валютам денежных средств. 
* @class CatCashboxes
* @extends CatObj
* @constructor 
*/class CatCashboxes extends CatObj{get funds_currency(){return this._getter('funds_currency');}set funds_currency(v){this._setter('funds_currency',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get current_account(){return this._getter('current_account');}set current_account(v){this._setter('current_account',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}}$p.CatCashboxes=CatCashboxes;$p.cat.create('cashboxes');/**
* ### Справочник КлассификаторЕдиницИзмерения
* Классификатор единиц измерения
* @class CatUnits
* @extends CatObj
* @constructor 
*/class CatUnits extends CatObj{get name_full(){return this._getter('name_full');}set name_full(v){this._setter('name_full',v);}get international_short(){return this._getter('international_short');}set international_short(v){this._setter('international_short',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatUnits=CatUnits;$p.cat.create('units');/**
* ### Справочник Контрагенты
* Список юридических или физических лиц клиентов (поставщиков, покупателей).
* @class CatPartners
* @extends CatObj
* @constructor 
*/class CatPartners extends CatObj{get name_full(){return this._getter('name_full');}set name_full(v){this._setter('name_full',v);}get main_bank_account(){return this._getter('main_bank_account');}set main_bank_account(v){this._setter('main_bank_account',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get kpp(){return this._getter('kpp');}set kpp(v){this._setter('kpp',v);}get okpo(){return this._getter('okpo');}set okpo(v){this._setter('okpo',v);}get inn(){return this._getter('inn');}set inn(v){this._setter('inn',v);}get individual_legal(){return this._getter('individual_legal');}set individual_legal(v){this._setter('individual_legal',v);}get main_contract(){return this._getter('main_contract');}set main_contract(v){this._setter('main_contract',v);}get identification_document(){return this._getter('identification_document');}set identification_document(v){this._setter('identification_document',v);}get buyer_main_manager(){return this._getter('buyer_main_manager');}set buyer_main_manager(v){this._setter('buyer_main_manager',v);}get is_buyer(){return this._getter('is_buyer');}set is_buyer(v){this._setter('is_buyer',v);}get is_supplier(){return this._getter('is_supplier');}set is_supplier(v){this._setter('is_supplier',v);}get primary_contact(){return this._getter('primary_contact');}set primary_contact(v){this._setter('primary_contact',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get contact_information(){return this._getter_ts('contact_information');}set contact_information(v){this._setter_ts('contact_information',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatPartners=CatPartners;class CatPartnersContact_informationRow extends TabularSectionRow{get type(){return this._getter('type');}set type(v){this._setter('type',v);}get kind(){return this._getter('kind');}set kind(v){this._setter('kind',v);}get presentation(){return this._getter('presentation');}set presentation(v){this._setter('presentation',v);}get values_fields(){return this._getter('values_fields');}set values_fields(v){this._setter('values_fields',v);}get country(){return this._getter('country');}set country(v){this._setter('country',v);}get region(){return this._getter('region');}set region(v){this._setter('region',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get email_address(){return this._getter('email_address');}set email_address(v){this._setter('email_address',v);}get server_domain_name(){return this._getter('server_domain_name');}set server_domain_name(v){this._setter('server_domain_name',v);}get phone_number(){return this._getter('phone_number');}set phone_number(v){this._setter('phone_number',v);}get phone_without_codes(){return this._getter('phone_without_codes');}set phone_without_codes(v){this._setter('phone_without_codes',v);}}$p.CatPartnersContact_informationRow=CatPartnersContact_informationRow;class CatPartnersExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatPartnersExtra_fieldsRow=CatPartnersExtra_fieldsRow;$p.cat.create('partners');/**
* ### Справочник Номенклатура
* Перечень товаров, продукции, материалов, полуфабрикатов, тары, услуг
* @class CatNom
* @extends CatObj
* @constructor 
*/class CatNom extends CatObj{get article(){return this._getter('article');}set article(v){this._setter('article',v);}get name_full(){return this._getter('name_full');}set name_full(v){this._setter('name_full',v);}get base_unit(){return this._getter('base_unit');}set base_unit(v){this._setter('base_unit',v);}get storage_unit(){return this._getter('storage_unit');}set storage_unit(v){this._setter('storage_unit',v);}get nom_kind(){return this._getter('nom_kind');}set nom_kind(v){this._setter('nom_kind',v);}get nom_group(){return this._getter('nom_group');}set nom_group(v){this._setter('nom_group',v);}get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get price_group(){return this._getter('price_group');}set price_group(v){this._setter('price_group',v);}get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get thickness(){return this._getter('thickness');}set thickness(v){this._setter('thickness',v);}get sizefurn(){return this._getter('sizefurn');}set sizefurn(v){this._setter('sizefurn',v);}get sizefaltz(){return this._getter('sizefaltz');}set sizefaltz(v){this._setter('sizefaltz',v);}get density(){return this._getter('density');}set density(v){this._setter('density',v);}get volume(){return this._getter('volume');}set volume(v){this._setter('volume',v);}get arc_elongation(){return this._getter('arc_elongation');}set arc_elongation(v){this._setter('arc_elongation',v);}get loss_factor(){return this._getter('loss_factor');}set loss_factor(v){this._setter('loss_factor',v);}get rounding_quantity(){return this._getter('rounding_quantity');}set rounding_quantity(v){this._setter('rounding_quantity',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get cutting_optimization_type(){return this._getter('cutting_optimization_type');}set cutting_optimization_type(v){this._setter('cutting_optimization_type',v);}get crooked(){return this._getter('crooked');}set crooked(v){this._setter('crooked',v);}get colored(){return this._getter('colored');}set colored(v){this._setter('colored',v);}get lay(){return this._getter('lay');}set lay(v){this._setter('lay',v);}get made_to_order(){return this._getter('made_to_order');}set made_to_order(v){this._setter('made_to_order',v);}get packing(){return this._getter('packing');}set packing(v){this._setter('packing',v);}get days_to_execution(){return this._getter('days_to_execution');}set days_to_execution(v){this._setter('days_to_execution',v);}get days_from_execution(){return this._getter('days_from_execution');}set days_from_execution(v){this._setter('days_from_execution',v);}get pricing(){return this._getter('pricing');}set pricing(v){this._setter('pricing',v);}get visualization(){return this._getter('visualization');}set visualization(v){this._setter('visualization',v);}get complete_list_sorting(){return this._getter('complete_list_sorting');}set complete_list_sorting(v){this._setter('complete_list_sorting',v);}get is_accessory(){return this._getter('is_accessory');}set is_accessory(v){this._setter('is_accessory',v);}get is_procedure(){return this._getter('is_procedure');}set is_procedure(v){this._setter('is_procedure',v);}get is_service(){return this._getter('is_service');}set is_service(v){this._setter('is_service',v);}get is_pieces(){return this._getter('is_pieces');}set is_pieces(v){this._setter('is_pieces',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatNom=CatNom;class CatNomExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatNomExtra_fieldsRow=CatNomExtra_fieldsRow;$p.cat.create('nom');/**
* ### Справочник Организации
* Организации
* @class CatOrganizations
* @extends CatObj
* @constructor 
*/class CatOrganizations extends CatObj{get prefix(){return this._getter('prefix');}set prefix(v){this._setter('prefix',v);}get individual_legal(){return this._getter('individual_legal');}set individual_legal(v){this._setter('individual_legal',v);}get individual_entrepreneur(){return this._getter('individual_entrepreneur');}set individual_entrepreneur(v){this._setter('individual_entrepreneur',v);}get inn(){return this._getter('inn');}set inn(v){this._setter('inn',v);}get kpp(){return this._getter('kpp');}set kpp(v){this._setter('kpp',v);}get main_bank_account(){return this._getter('main_bank_account');}set main_bank_account(v){this._setter('main_bank_account',v);}get main_cashbox(){return this._getter('main_cashbox');}set main_cashbox(v){this._setter('main_cashbox',v);}get certificate_series_number(){return this._getter('certificate_series_number');}set certificate_series_number(v){this._setter('certificate_series_number',v);}get certificate_date_issue(){return this._getter('certificate_date_issue');}set certificate_date_issue(v){this._setter('certificate_date_issue',v);}get certificate_authority_name(){return this._getter('certificate_authority_name');}set certificate_authority_name(v){this._setter('certificate_authority_name',v);}get certificate_authority_code(){return this._getter('certificate_authority_code');}set certificate_authority_code(v){this._setter('certificate_authority_code',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get contact_information(){return this._getter_ts('contact_information');}set contact_information(v){this._setter_ts('contact_information',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatOrganizations=CatOrganizations;class CatOrganizationsContact_informationRow extends TabularSectionRow{get type(){return this._getter('type');}set type(v){this._setter('type',v);}get kind(){return this._getter('kind');}set kind(v){this._setter('kind',v);}get presentation(){return this._getter('presentation');}set presentation(v){this._setter('presentation',v);}get values_fields(){return this._getter('values_fields');}set values_fields(v){this._setter('values_fields',v);}get country(){return this._getter('country');}set country(v){this._setter('country',v);}get region(){return this._getter('region');}set region(v){this._setter('region',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get email_address(){return this._getter('email_address');}set email_address(v){this._setter('email_address',v);}get server_domain_name(){return this._getter('server_domain_name');}set server_domain_name(v){this._setter('server_domain_name',v);}get phone_number(){return this._getter('phone_number');}set phone_number(v){this._setter('phone_number',v);}get phone_without_codes(){return this._getter('phone_without_codes');}set phone_without_codes(v){this._setter('phone_without_codes',v);}get ВидДляСписка(){return this._getter('ВидДляСписка');}set ВидДляСписка(v){this._setter('ВидДляСписка',v);}get ДействуетС(){return this._getter('ДействуетС');}set ДействуетС(v){this._setter('ДействуетС',v);}}$p.CatOrganizationsContact_informationRow=CatOrganizationsContact_informationRow;class CatOrganizationsExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatOrganizationsExtra_fieldsRow=CatOrganizationsExtra_fieldsRow;$p.cat.create('organizations');/**
* ### Справочник Вставки
* Армирование, пленки, вставки - дополнение спецификации, которое зависит от одного элемента
* @class CatInserts
* @extends CatObj
* @constructor 
*/class CatInserts extends CatObj{get article(){return this._getter('article');}set article(v){this._setter('article',v);}get insert_type(){return this._getter('insert_type');}set insert_type(v){this._setter('insert_type',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get lmin(){return this._getter('lmin');}set lmin(v){this._setter('lmin',v);}get lmax(){return this._getter('lmax');}set lmax(v){this._setter('lmax',v);}get hmin(){return this._getter('hmin');}set hmin(v){this._setter('hmin',v);}get hmax(){return this._getter('hmax');}set hmax(v){this._setter('hmax',v);}get smin(){return this._getter('smin');}set smin(v){this._setter('smin',v);}get smax(){return this._getter('smax');}set smax(v){this._setter('smax',v);}get for_direct_profile_only(){return this._getter('for_direct_profile_only');}set for_direct_profile_only(v){this._setter('for_direct_profile_only',v);}get ahmin(){return this._getter('ahmin');}set ahmin(v){this._setter('ahmin',v);}get ahmax(){return this._getter('ahmax');}set ahmax(v){this._setter('ahmax',v);}get priority(){return this._getter('priority');}set priority(v){this._setter('priority',v);}get mmin(){return this._getter('mmin');}set mmin(v){this._setter('mmin',v);}get mmax(){return this._getter('mmax');}set mmax(v){this._setter('mmax',v);}get impost_fixation(){return this._getter('impost_fixation');}set impost_fixation(v){this._setter('impost_fixation',v);}get shtulp_fixation(){return this._getter('shtulp_fixation');}set shtulp_fixation(v){this._setter('shtulp_fixation',v);}get can_rotate(){return this._getter('can_rotate');}set can_rotate(v){this._setter('can_rotate',v);}get sizeb(){return this._getter('sizeb');}set sizeb(v){this._setter('sizeb',v);}get clr_group(){return this._getter('clr_group');}set clr_group(v){this._setter('clr_group',v);}get is_order_row(){return this._getter('is_order_row');}set is_order_row(v){this._setter('is_order_row',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get insert_glass_type(){return this._getter('insert_glass_type');}set insert_glass_type(v){this._setter('insert_glass_type',v);}get available(){return this._getter('available');}set available(v){this._setter('available',v);}get slave(){return this._getter('slave');}set slave(v){this._setter('slave',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get specification(){return this._getter_ts('specification');}set specification(v){this._setter_ts('specification',v);}get selection_params(){return this._getter_ts('selection_params');}set selection_params(v){this._setter_ts('selection_params',v);}get product_params(){return this._getter_ts('product_params');}set product_params(v){this._setter_ts('product_params',v);}}$p.CatInserts=CatInserts;class CatInsertsSpecificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get nom_characteristic(){return this._getter('nom_characteristic');}set nom_characteristic(v){this._setter('nom_characteristic',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get sz(){return this._getter('sz');}set sz(v){this._setter('sz',v);}get coefficient(){return this._getter('coefficient');}set coefficient(v){this._setter('coefficient',v);}get angle_calc_method(){return this._getter('angle_calc_method');}set angle_calc_method(v){this._setter('angle_calc_method',v);}get count_calc_method(){return this._getter('count_calc_method');}set count_calc_method(v){this._setter('count_calc_method',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get lmin(){return this._getter('lmin');}set lmin(v){this._setter('lmin',v);}get lmax(){return this._getter('lmax');}set lmax(v){this._setter('lmax',v);}get ahmin(){return this._getter('ahmin');}set ahmin(v){this._setter('ahmin',v);}get ahmax(){return this._getter('ahmax');}set ahmax(v){this._setter('ahmax',v);}get smin(){return this._getter('smin');}set smin(v){this._setter('smin',v);}get smax(){return this._getter('smax');}set smax(v){this._setter('smax',v);}get for_direct_profile_only(){return this._getter('for_direct_profile_only');}set for_direct_profile_only(v){this._setter('for_direct_profile_only',v);}get step(){return this._getter('step');}set step(v){this._setter('step',v);}get step_angle(){return this._getter('step_angle');}set step_angle(v){this._setter('step_angle',v);}get offsets(){return this._getter('offsets');}set offsets(v){this._setter('offsets',v);}get do_center(){return this._getter('do_center');}set do_center(v){this._setter('do_center',v);}get attrs_option(){return this._getter('attrs_option');}set attrs_option(v){this._setter('attrs_option',v);}get end_mount(){return this._getter('end_mount');}set end_mount(v){this._setter('end_mount',v);}get is_order_row(){return this._getter('is_order_row');}set is_order_row(v){this._setter('is_order_row',v);}get is_main_elm(){return this._getter('is_main_elm');}set is_main_elm(v){this._setter('is_main_elm',v);}}$p.CatInsertsSpecificationRow=CatInsertsSpecificationRow;class CatInsertsSelection_paramsRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get param(){return this._getter('param');}set param(v){this._setter('param',v);}get comparison_type(){return this._getter('comparison_type');}set comparison_type(v){this._setter('comparison_type',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatInsertsSelection_paramsRow=CatInsertsSelection_paramsRow;class CatInsertsProduct_paramsRow extends TabularSectionRow{get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get hide(){return this._getter('hide');}set hide(v){this._setter('hide',v);}get forcibly(){return this._getter('forcibly');}set forcibly(v){this._setter('forcibly',v);}}$p.CatInsertsProduct_paramsRow=CatInsertsProduct_paramsRow;$p.cat.create('inserts');/**
* ### Справочник КлючиПараметров
* Списки пар {Параметр:Значение} для фильтрации в подсистемах формирования спецификаций, планировании и ценообразовании

* @class CatParameters_keys
* @extends CatObj
* @constructor 
*/class CatParameters_keys extends CatObj{get priority(){return this._getter('priority');}set priority(v){this._setter('priority',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get sorting_field(){return this._getter('sorting_field');}set sorting_field(v){this._setter('sorting_field',v);}get applying(){return this._getter('applying');}set applying(v){this._setter('applying',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get params(){return this._getter_ts('params');}set params(v){this._setter_ts('params',v);}}$p.CatParameters_keys=CatParameters_keys;class CatParameters_keysParamsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get comparison_type(){return this._getter('comparison_type');}set comparison_type(v){this._setter('comparison_type',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatParameters_keysParamsRow=CatParameters_keysParamsRow;$p.cat.create('parameters_keys');/**
* ### Справочник пзПараметрыПродукции
* Настройки системы профилей и фурнитуры
* @class CatProduction_params
* @extends CatObj
* @constructor 
*/class CatProduction_params extends CatObj{get default_clr(){return this._getter('default_clr');}set default_clr(v){this._setter('default_clr',v);}get clr_group(){return this._getter('clr_group');}set clr_group(v){this._setter('clr_group',v);}get tmin(){return this._getter('tmin');}set tmin(v){this._setter('tmin',v);}get tmax(){return this._getter('tmax');}set tmax(v){this._setter('tmax',v);}get allow_open_cnn(){return this._getter('allow_open_cnn');}set allow_open_cnn(v){this._setter('allow_open_cnn',v);}get flap_pos_by_impost(){return this._getter('flap_pos_by_impost');}set flap_pos_by_impost(v){this._setter('flap_pos_by_impost',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get elmnts(){return this._getter_ts('elmnts');}set elmnts(v){this._setter_ts('elmnts',v);}get production(){return this._getter_ts('production');}set production(v){this._setter_ts('production',v);}get product_params(){return this._getter_ts('product_params');}set product_params(v){this._setter_ts('product_params',v);}get furn_params(){return this._getter_ts('furn_params');}set furn_params(v){this._setter_ts('furn_params',v);}get base_blocks(){return this._getter_ts('base_blocks');}set base_blocks(v){this._setter_ts('base_blocks',v);}}$p.CatProduction_params=CatProduction_params;class CatProduction_paramsElmntsRow extends TabularSectionRow{get by_default(){return this._getter('by_default');}set by_default(v){this._setter('by_default',v);}get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get pos(){return this._getter('pos');}set pos(v){this._setter('pos',v);}}$p.CatProduction_paramsElmntsRow=CatProduction_paramsElmntsRow;class CatProduction_paramsProductionRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}}$p.CatProduction_paramsProductionRow=CatProduction_paramsProductionRow;class CatProduction_paramsProduct_paramsRow extends TabularSectionRow{get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get hide(){return this._getter('hide');}set hide(v){this._setter('hide',v);}get forcibly(){return this._getter('forcibly');}set forcibly(v){this._setter('forcibly',v);}}$p.CatProduction_paramsProduct_paramsRow=CatProduction_paramsProduct_paramsRow;class CatProduction_paramsFurn_paramsRow extends TabularSectionRow{get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get hide(){return this._getter('hide');}set hide(v){this._setter('hide',v);}get forcibly(){return this._getter('forcibly');}set forcibly(v){this._setter('forcibly',v);}}$p.CatProduction_paramsFurn_paramsRow=CatProduction_paramsFurn_paramsRow;class CatProduction_paramsBase_blocksRow extends TabularSectionRow{get calc_order(){return this._getter('calc_order');}set calc_order(v){this._setter('calc_order',v);}}$p.CatProduction_paramsBase_blocksRow=CatProduction_paramsBase_blocksRow;$p.cat.create('production_params');/**
* ### Справочник РайоныДоставки
* Районы доставки
* @class CatDelivery_areas
* @extends CatObj
* @constructor 
*/class CatDelivery_areas extends CatObj{get country(){return this._getter('country');}set country(v){this._setter('country',v);}get region(){return this._getter('region');}set region(v){this._setter('region',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get latitude(){return this._getter('latitude');}set latitude(v){this._setter('latitude',v);}get longitude(){return this._getter('longitude');}set longitude(v){this._setter('longitude',v);}get ind(){return this._getter('ind');}set ind(v){this._setter('ind',v);}get delivery_area(){return this._getter('delivery_area');}set delivery_area(v){this._setter('delivery_area',v);}get specify_area_by_geocoder(){return this._getter('specify_area_by_geocoder');}set specify_area_by_geocoder(v){this._setter('specify_area_by_geocoder',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatDelivery_areas=CatDelivery_areas;$p.cat.create('delivery_areas');/**
* ### Справочник пзСоединения
* Спецификации соединений элементов
* @class CatCnns
* @extends CatObj
* @constructor 
*/class CatCnns extends CatObj{get priority(){return this._getter('priority');}set priority(v){this._setter('priority',v);}get amin(){return this._getter('amin');}set amin(v){this._setter('amin',v);}get amax(){return this._getter('amax');}set amax(v){this._setter('amax',v);}get sd1(){return this._getter('sd1');}set sd1(v){this._setter('sd1',v);}get sz(){return this._getter('sz');}set sz(v){this._setter('sz',v);}get cnn_type(){return this._getter('cnn_type');}set cnn_type(v){this._setter('cnn_type',v);}get ahmin(){return this._getter('ahmin');}set ahmin(v){this._setter('ahmin',v);}get ahmax(){return this._getter('ahmax');}set ahmax(v){this._setter('ahmax',v);}get lmin(){return this._getter('lmin');}set lmin(v){this._setter('lmin',v);}get lmax(){return this._getter('lmax');}set lmax(v){this._setter('lmax',v);}get tmin(){return this._getter('tmin');}set tmin(v){this._setter('tmin',v);}get tmax(){return this._getter('tmax');}set tmax(v){this._setter('tmax',v);}get var_layers(){return this._getter('var_layers');}set var_layers(v){this._setter('var_layers',v);}get for_direct_profile_only(){return this._getter('for_direct_profile_only');}set for_direct_profile_only(v){this._setter('for_direct_profile_only',v);}get art1vert(){return this._getter('art1vert');}set art1vert(v){this._setter('art1vert',v);}get art1glass(){return this._getter('art1glass');}set art1glass(v){this._setter('art1glass',v);}get art2glass(){return this._getter('art2glass');}set art2glass(v){this._setter('art2glass',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get specification(){return this._getter_ts('specification');}set specification(v){this._setter_ts('specification',v);}get cnn_elmnts(){return this._getter_ts('cnn_elmnts');}set cnn_elmnts(v){this._setter_ts('cnn_elmnts',v);}get selection_params(){return this._getter_ts('selection_params');}set selection_params(v){this._setter_ts('selection_params',v);}}$p.CatCnns=CatCnns;class CatCnnsSpecificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get nom_characteristic(){return this._getter('nom_characteristic');}set nom_characteristic(v){this._setter('nom_characteristic',v);}get coefficient(){return this._getter('coefficient');}set coefficient(v){this._setter('coefficient',v);}get sz(){return this._getter('sz');}set sz(v){this._setter('sz',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get sz_min(){return this._getter('sz_min');}set sz_min(v){this._setter('sz_min',v);}get sz_max(){return this._getter('sz_max');}set sz_max(v){this._setter('sz_max',v);}get amin(){return this._getter('amin');}set amin(v){this._setter('amin',v);}get amax(){return this._getter('amax');}set amax(v){this._setter('amax',v);}get set_specification(){return this._getter('set_specification');}set set_specification(v){this._setter('set_specification',v);}get for_direct_profile_only(){return this._getter('for_direct_profile_only');}set for_direct_profile_only(v){this._setter('for_direct_profile_only',v);}get by_contour(){return this._getter('by_contour');}set by_contour(v){this._setter('by_contour',v);}get contraction_by_contour(){return this._getter('contraction_by_contour');}set contraction_by_contour(v){this._setter('contraction_by_contour',v);}get on_aperture(){return this._getter('on_aperture');}set on_aperture(v){this._setter('on_aperture',v);}get angle_calc_method(){return this._getter('angle_calc_method');}set angle_calc_method(v){this._setter('angle_calc_method',v);}get contour_number(){return this._getter('contour_number');}set contour_number(v){this._setter('contour_number',v);}get is_order_row(){return this._getter('is_order_row');}set is_order_row(v){this._setter('is_order_row',v);}}$p.CatCnnsSpecificationRow=CatCnnsSpecificationRow;class CatCnnsCnn_elmntsRow extends TabularSectionRow{get nom1(){return this._getter('nom1');}set nom1(v){this._setter('nom1',v);}get clr1(){return this._getter('clr1');}set clr1(v){this._setter('clr1',v);}get nom2(){return this._getter('nom2');}set nom2(v){this._setter('nom2',v);}get clr2(){return this._getter('clr2');}set clr2(v){this._setter('clr2',v);}get varclr(){return this._getter('varclr');}set varclr(v){this._setter('varclr',v);}get is_nom_combinations_row(){return this._getter('is_nom_combinations_row');}set is_nom_combinations_row(v){this._setter('is_nom_combinations_row',v);}}$p.CatCnnsCnn_elmntsRow=CatCnnsCnn_elmntsRow;class CatCnnsSelection_paramsRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get param(){return this._getter('param');}set param(v){this._setter('param',v);}get comparison_type(){return this._getter('comparison_type');}set comparison_type(v){this._setter('comparison_type',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatCnnsSelection_paramsRow=CatCnnsSelection_paramsRow;$p.cat.create('cnns');/**
* ### Справочник ЦветоЦеновыеГруппы
* Цвето-ценовые группы
* @class CatColor_price_groups
* @extends CatObj
* @constructor 
*/class CatColor_price_groups extends CatObj{get color_price_group_destination(){return this._getter('color_price_group_destination');}set color_price_group_destination(v){this._setter('color_price_group_destination',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get price_groups(){return this._getter_ts('price_groups');}set price_groups(v){this._setter_ts('price_groups',v);}get clr_conformity(){return this._getter_ts('clr_conformity');}set clr_conformity(v){this._setter_ts('clr_conformity',v);}}$p.CatColor_price_groups=CatColor_price_groups;class CatColor_price_groupsPrice_groupsRow extends TabularSectionRow{get price_group(){return this._getter('price_group');}set price_group(v){this._setter('price_group',v);}}$p.CatColor_price_groupsPrice_groupsRow=CatColor_price_groupsPrice_groupsRow;class CatColor_price_groupsClr_conformityRow extends TabularSectionRow{get clr1(){return this._getter('clr1');}set clr1(v){this._setter('clr1',v);}get clr2(){return this._getter('clr2');}set clr2(v){this._setter('clr2',v);}}$p.CatColor_price_groupsClr_conformityRow=CatColor_price_groupsClr_conformityRow;$p.cat.create('color_price_groups');/**
* ### Справочник Подразделения
* Перечень подразделений предприятия
* @class CatDivisions
* @extends CatObj
* @constructor 
*/class CatDivisions extends CatObj{get main_project(){return this._getter('main_project');}set main_project(v){this._setter('main_project',v);}get sorting_field(){return this._getter('sorting_field');}set sorting_field(v){this._setter('sorting_field',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatDivisions=CatDivisions;class CatDivisionsExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatDivisionsExtra_fieldsRow=CatDivisionsExtra_fieldsRow;$p.cat.create('divisions');/**
* ### Справочник Пользователи
* Пользователи
* @class CatUsers
* @extends CatObj
* @constructor 
*/class CatUsers extends CatObj{get invalid(){return this._getter('invalid');}set invalid(v){this._setter('invalid',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get individual_person(){return this._getter('individual_person');}set individual_person(v){this._setter('individual_person',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get ancillary(){return this._getter('ancillary');}set ancillary(v){this._setter('ancillary',v);}get user_ib_uid(){return this._getter('user_ib_uid');}set user_ib_uid(v){this._setter('user_ib_uid',v);}get user_fresh_uid(){return this._getter('user_fresh_uid');}set user_fresh_uid(v){this._setter('user_fresh_uid',v);}get id(){return this._getter('id');}set id(v){this._setter('id',v);}get prefix(){return this._getter('prefix');}set prefix(v){this._setter('prefix',v);}get branch(){return this._getter('branch');}set branch(v){this._setter('branch',v);}get push_only(){return this._getter('push_only');}set push_only(v){this._setter('push_only',v);}get suffix(){return this._getter('suffix');}set suffix(v){this._setter('suffix',v);}get direct(){return this._getter('direct');}set direct(v){this._setter('direct',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}get contact_information(){return this._getter_ts('contact_information');}set contact_information(v){this._setter_ts('contact_information',v);}get acl_objs(){return this._getter_ts('acl_objs');}set acl_objs(v){this._setter_ts('acl_objs',v);}}$p.CatUsers=CatUsers;class CatUsersExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatUsersExtra_fieldsRow=CatUsersExtra_fieldsRow;class CatUsersContact_informationRow extends TabularSectionRow{get type(){return this._getter('type');}set type(v){this._setter('type',v);}get kind(){return this._getter('kind');}set kind(v){this._setter('kind',v);}get presentation(){return this._getter('presentation');}set presentation(v){this._setter('presentation',v);}get values_fields(){return this._getter('values_fields');}set values_fields(v){this._setter('values_fields',v);}get country(){return this._getter('country');}set country(v){this._setter('country',v);}get region(){return this._getter('region');}set region(v){this._setter('region',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get email_address(){return this._getter('email_address');}set email_address(v){this._setter('email_address',v);}get server_domain_name(){return this._getter('server_domain_name');}set server_domain_name(v){this._setter('server_domain_name',v);}get phone_number(){return this._getter('phone_number');}set phone_number(v){this._setter('phone_number',v);}get phone_without_codes(){return this._getter('phone_without_codes');}set phone_without_codes(v){this._setter('phone_without_codes',v);}get ВидДляСписка(){return this._getter('ВидДляСписка');}set ВидДляСписка(v){this._setter('ВидДляСписка',v);}}$p.CatUsersContact_informationRow=CatUsersContact_informationRow;class CatUsersAcl_objsRow extends TabularSectionRow{get acl_obj(){return this._getter('acl_obj');}set acl_obj(v){this._setter('acl_obj',v);}get type(){return this._getter('type');}set type(v){this._setter('type',v);}get by_default(){return this._getter('by_default');}set by_default(v){this._setter('by_default',v);}}$p.CatUsersAcl_objsRow=CatUsersAcl_objsRow;class CatUsersManager extends CatManager{// при загрузке пользователей, морозим объект, чтобы его невозможно было изменить из интерфейса
load_array(aattr,forse){const res=[];for(let aobj of aattr){if(this.by_ref[aobj.ref]){continue;}if(!aobj.acl_objs){aobj.acl_objs=[];}const{acl}=aobj;delete aobj.acl;const obj=new $p.CatUsers(aobj,this,true);const{_obj}=obj;if(_obj&&!_obj._acl){_obj._acl=acl;obj._set_loaded();Object.freeze(obj);Object.freeze(_obj);for(let j in _obj){if(typeof _obj[j]=='object'){Object.freeze(_obj[j]);for(let k in _obj[j]){typeof _obj[j][k]=='object'&&Object.freeze(_obj[j][k]);}}}res.push(obj);}}return res;}// пользователей не выгружаем
unload_obj(){}}$p.cat.create('users',CatUsersManager,true);/**
* ### Справочник Проекты
* Проекты
* @class CatProjects
* @extends CatObj
* @constructor 
*/class CatProjects extends CatObj{get start(){return this._getter('start');}set start(v){this._setter('start',v);}get finish(){return this._getter('finish');}set finish(v){this._setter('finish',v);}get launch(){return this._getter('launch');}set launch(v){this._setter('launch',v);}get readiness(){return this._getter('readiness');}set readiness(v){this._setter('readiness',v);}get finished(){return this._getter('finished');}set finished(v){this._setter('finished',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatProjects=CatProjects;class CatProjectsExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatProjectsExtra_fieldsRow=CatProjectsExtra_fieldsRow;$p.cat.create('projects');/**
* ### Справочник Склады
* Сведения о местах хранения товаров (складах), их структуре и физических лицах, назначенных материально ответственными (МОЛ) за тот или иной склад
* @class CatStores
* @extends CatObj
* @constructor 
*/class CatStores extends CatObj{get note(){return this._getter('note');}set note(v){this._setter('note',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.CatStores=CatStores;class CatStoresExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatStoresExtra_fieldsRow=CatStoresExtra_fieldsRow;$p.cat.create('stores');/**
* ### Справочник СтатьиДвиженияДенежныхСредств
* Перечень статей движения денежных средств (ДДС), используемых в предприятии для проведения анализа поступлений и расходов в разрезе статей движения денежных средств. 
* @class CatCash_flow_articles
* @extends CatObj
* @constructor 
*/class CatCash_flow_articles extends CatObj{get definition(){return this._getter('definition');}set definition(v){this._setter('definition',v);}get sorting_field(){return this._getter('sorting_field');}set sorting_field(v){this._setter('sorting_field',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatCash_flow_articles=CatCash_flow_articles;$p.cat.create('cash_flow_articles');/**
* ### Справочник ТипыЦенНоменклатуры
* Перечень типов отпускных цен предприятия
* @class CatNom_prices_types
* @extends CatObj
* @constructor 
*/class CatNom_prices_types extends CatObj{get price_currency(){return this._getter('price_currency');}set price_currency(v){this._setter('price_currency',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}get vat_price_included(){return this._getter('vat_price_included');}set vat_price_included(v){this._setter('vat_price_included',v);}get rounding_order(){return this._getter('rounding_order');}set rounding_order(v){this._setter('rounding_order',v);}get rounding_in_a_big_way(){return this._getter('rounding_in_a_big_way');}set rounding_in_a_big_way(v){this._setter('rounding_in_a_big_way',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatNom_prices_types=CatNom_prices_types;$p.cat.create('nom_prices_types');/**
* ### Справочник ФизическиеЛица
* Физические лица
* @class CatIndividuals
* @extends CatObj
* @constructor 
*/class CatIndividuals extends CatObj{get birth_date(){return this._getter('birth_date');}set birth_date(v){this._setter('birth_date',v);}get inn(){return this._getter('inn');}set inn(v){this._setter('inn',v);}get imns_code(){return this._getter('imns_code');}set imns_code(v){this._setter('imns_code',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get pfr_number(){return this._getter('pfr_number');}set pfr_number(v){this._setter('pfr_number',v);}get sex(){return this._getter('sex');}set sex(v){this._setter('sex',v);}get birth_place(){return this._getter('birth_place');}set birth_place(v){this._setter('birth_place',v);}get ОсновноеИзображение(){return this._getter('ОсновноеИзображение');}set ОсновноеИзображение(v){this._setter('ОсновноеИзображение',v);}get Фамилия(){return this._getter('Фамилия');}set Фамилия(v){this._setter('Фамилия',v);}get Имя(){return this._getter('Имя');}set Имя(v){this._setter('Имя',v);}get Отчество(){return this._getter('Отчество');}set Отчество(v){this._setter('Отчество',v);}get ФамилияРП(){return this._getter('ФамилияРП');}set ФамилияРП(v){this._setter('ФамилияРП',v);}get ИмяРП(){return this._getter('ИмяРП');}set ИмяРП(v){this._setter('ИмяРП',v);}get ОтчествоРП(){return this._getter('ОтчествоРП');}set ОтчествоРП(v){this._setter('ОтчествоРП',v);}get ОснованиеРП(){return this._getter('ОснованиеРП');}set ОснованиеРП(v){this._setter('ОснованиеРП',v);}get ДолжностьРП(){return this._getter('ДолжностьРП');}set ДолжностьРП(v){this._setter('ДолжностьРП',v);}get Должность(){return this._getter('Должность');}set Должность(v){this._setter('Должность',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get contact_information(){return this._getter_ts('contact_information');}set contact_information(v){this._setter_ts('contact_information',v);}}$p.CatIndividuals=CatIndividuals;class CatIndividualsContact_informationRow extends TabularSectionRow{get type(){return this._getter('type');}set type(v){this._setter('type',v);}get kind(){return this._getter('kind');}set kind(v){this._setter('kind',v);}get presentation(){return this._getter('presentation');}set presentation(v){this._setter('presentation',v);}get values_fields(){return this._getter('values_fields');}set values_fields(v){this._setter('values_fields',v);}get country(){return this._getter('country');}set country(v){this._setter('country',v);}get region(){return this._getter('region');}set region(v){this._setter('region',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get email_address(){return this._getter('email_address');}set email_address(v){this._setter('email_address',v);}get server_domain_name(){return this._getter('server_domain_name');}set server_domain_name(v){this._setter('server_domain_name',v);}get phone_number(){return this._getter('phone_number');}set phone_number(v){this._setter('phone_number',v);}get phone_without_codes(){return this._getter('phone_without_codes');}set phone_without_codes(v){this._setter('phone_without_codes',v);}get ВидДляСписка(){return this._getter('ВидДляСписка');}set ВидДляСписка(v){this._setter('ВидДляСписка',v);}}$p.CatIndividualsContact_informationRow=CatIndividualsContact_informationRow;$p.cat.create('individuals');/**
* ### Справочник ХарактеристикиНоменклатуры
* Дополнительные характеристики элементов номенклатуры: цвет, размер и т.п.
* @class CatCharacteristics
* @extends CatObj
* @constructor 
*/class CatCharacteristics extends CatObj{get x(){return this._getter('x');}set x(v){this._setter('x',v);}get y(){return this._getter('y');}set y(v){this._setter('y',v);}get z(){return this._getter('z');}set z(v){this._setter('z',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get weight(){return this._getter('weight');}set weight(v){this._setter('weight',v);}get calc_order(){return this._getter('calc_order');}set calc_order(v){this._setter('calc_order',v);}get product(){return this._getter('product');}set product(v){this._setter('product',v);}get leading_product(){return this._getter('leading_product');}set leading_product(v){this._setter('leading_product',v);}get leading_elm(){return this._getter('leading_elm');}set leading_elm(v){this._setter('leading_elm',v);}get origin(){return this._getter('origin');}set origin(v){this._setter('origin',v);}get base_block(){return this._getter('base_block');}set base_block(v){this._setter('base_block',v);}get sys(){return this._getter('sys');}set sys(v){this._setter('sys',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get obj_delivery_state(){return this._getter('obj_delivery_state');}set obj_delivery_state(v){this._setter('obj_delivery_state',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get builder_props(){return this._getter('builder_props');}set builder_props(v){this._setter('builder_props',v);}get svg(){return this._getter('svg');}set svg(v){this._setter('svg',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get owner(){return this._getter('owner');}set owner(v){this._setter('owner',v);}get constructions(){return this._getter_ts('constructions');}set constructions(v){this._setter_ts('constructions',v);}get coordinates(){return this._getter_ts('coordinates');}set coordinates(v){this._setter_ts('coordinates',v);}get inserts(){return this._getter_ts('inserts');}set inserts(v){this._setter_ts('inserts',v);}get params(){return this._getter_ts('params');}set params(v){this._setter_ts('params',v);}get cnn_elmnts(){return this._getter_ts('cnn_elmnts');}set cnn_elmnts(v){this._setter_ts('cnn_elmnts',v);}get glass_specification(){return this._getter_ts('glass_specification');}set glass_specification(v){this._setter_ts('glass_specification',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}get glasses(){return this._getter_ts('glasses');}set glasses(v){this._setter_ts('glasses',v);}get specification(){return this._getter_ts('specification');}set specification(v){this._setter_ts('specification',v);}}$p.CatCharacteristics=CatCharacteristics;class CatCharacteristicsConstructionsRow extends TabularSectionRow{get cnstr(){return this._getter('cnstr');}set cnstr(v){this._setter('cnstr',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get x(){return this._getter('x');}set x(v){this._setter('x',v);}get y(){return this._getter('y');}set y(v){this._setter('y',v);}get z(){return this._getter('z');}set z(v){this._setter('z',v);}get w(){return this._getter('w');}set w(v){this._setter('w',v);}get h(){return this._getter('h');}set h(v){this._setter('h',v);}get furn(){return this._getter('furn');}set furn(v){this._setter('furn',v);}get clr_furn(){return this._getter('clr_furn');}set clr_furn(v){this._setter('clr_furn',v);}get direction(){return this._getter('direction');}set direction(v){this._setter('direction',v);}get h_ruch(){return this._getter('h_ruch');}set h_ruch(v){this._setter('h_ruch',v);}get fix_ruch(){return this._getter('fix_ruch');}set fix_ruch(v){this._setter('fix_ruch',v);}get is_rectangular(){return this._getter('is_rectangular');}set is_rectangular(v){this._setter('is_rectangular',v);}}$p.CatCharacteristicsConstructionsRow=CatCharacteristicsConstructionsRow;class CatCharacteristicsCoordinatesRow extends TabularSectionRow{get cnstr(){return this._getter('cnstr');}set cnstr(v){this._setter('cnstr',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get path_data(){return this._getter('path_data');}set path_data(v){this._setter('path_data',v);}get x1(){return this._getter('x1');}set x1(v){this._setter('x1',v);}get y1(){return this._getter('y1');}set y1(v){this._setter('y1',v);}get x2(){return this._getter('x2');}set x2(v){this._setter('x2',v);}get y2(){return this._getter('y2');}set y2(v){this._setter('y2',v);}get r(){return this._getter('r');}set r(v){this._setter('r',v);}get arc_ccw(){return this._getter('arc_ccw');}set arc_ccw(v){this._setter('arc_ccw',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get angle_hor(){return this._getter('angle_hor');}set angle_hor(v){this._setter('angle_hor',v);}get alp1(){return this._getter('alp1');}set alp1(v){this._setter('alp1',v);}get alp2(){return this._getter('alp2');}set alp2(v){this._setter('alp2',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get pos(){return this._getter('pos');}set pos(v){this._setter('pos',v);}get orientation(){return this._getter('orientation');}set orientation(v){this._setter('orientation',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}}$p.CatCharacteristicsCoordinatesRow=CatCharacteristicsCoordinatesRow;class CatCharacteristicsInsertsRow extends TabularSectionRow{get cnstr(){return this._getter('cnstr');}set cnstr(v){this._setter('cnstr',v);}get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}}$p.CatCharacteristicsInsertsRow=CatCharacteristicsInsertsRow;class CatCharacteristicsParamsRow extends TabularSectionRow{get cnstr(){return this._getter('cnstr');}set cnstr(v){this._setter('cnstr',v);}get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get hide(){return this._getter('hide');}set hide(v){this._setter('hide',v);}}$p.CatCharacteristicsParamsRow=CatCharacteristicsParamsRow;class CatCharacteristicsCnn_elmntsRow extends TabularSectionRow{get elm1(){return this._getter('elm1');}set elm1(v){this._setter('elm1',v);}get node1(){return this._getter('node1');}set node1(v){this._setter('node1',v);}get elm2(){return this._getter('elm2');}set elm2(v){this._setter('elm2',v);}get node2(){return this._getter('node2');}set node2(v){this._setter('node2',v);}get cnn(){return this._getter('cnn');}set cnn(v){this._setter('cnn',v);}get aperture_len(){return this._getter('aperture_len');}set aperture_len(v){this._setter('aperture_len',v);}}$p.CatCharacteristicsCnn_elmntsRow=CatCharacteristicsCnn_elmntsRow;class CatCharacteristicsGlass_specificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get gno(){return this._getter('gno');}set gno(v){this._setter('gno',v);}get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}}$p.CatCharacteristicsGlass_specificationRow=CatCharacteristicsGlass_specificationRow;class CatCharacteristicsExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.CatCharacteristicsExtra_fieldsRow=CatCharacteristicsExtra_fieldsRow;class CatCharacteristicsGlassesRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get height(){return this._getter('height');}set height(v){this._setter('height',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get is_rectangular(){return this._getter('is_rectangular');}set is_rectangular(v){this._setter('is_rectangular',v);}get is_sandwich(){return this._getter('is_sandwich');}set is_sandwich(v){this._setter('is_sandwich',v);}get thickness(){return this._getter('thickness');}set thickness(v){this._setter('thickness',v);}get coffer(){return this._getter('coffer');}set coffer(v){this._setter('coffer',v);}}$p.CatCharacteristicsGlassesRow=CatCharacteristicsGlassesRow;class CatCharacteristicsSpecificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get qty(){return this._getter('qty');}set qty(v){this._setter('qty',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get alp1(){return this._getter('alp1');}set alp1(v){this._setter('alp1',v);}get alp2(){return this._getter('alp2');}set alp2(v){this._setter('alp2',v);}get totqty(){return this._getter('totqty');}set totqty(v){this._setter('totqty',v);}get totqty1(){return this._getter('totqty1');}set totqty1(v){this._setter('totqty1',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get amount_marged(){return this._getter('amount_marged');}set amount_marged(v){this._setter('amount_marged',v);}get origin(){return this._getter('origin');}set origin(v){this._setter('origin',v);}get changed(){return this._getter('changed');}set changed(v){this._setter('changed',v);}get dop(){return this._getter('dop');}set dop(v){this._setter('dop',v);}}$p.CatCharacteristicsSpecificationRow=CatCharacteristicsSpecificationRow;$p.cat.create('characteristics');/**
* ### Справочник ЦеновыеГруппы
* Ценовые группы
* @class CatPrice_groups
* @extends CatObj
* @constructor 
*/class CatPrice_groups extends CatObj{get definition(){return this._getter('definition');}set definition(v){this._setter('definition',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatPrice_groups=CatPrice_groups;$p.cat.create('price_groups');/**
* ### Справочник ГруппыФинансовогоУчетаНоменклатуры
* Перечень номенклатурных групп для учета затрат и укрупненного планирования продаж, закупок и производства
* @class CatNom_groups
* @extends CatObj
* @constructor 
*/class CatNom_groups extends CatObj{get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get parent(){return this._getter('parent');}set parent(v){this._setter('parent',v);}}$p.CatNom_groups=CatNom_groups;$p.cat.create('nom_groups');/**
* ### Справочник ПривязкиВставок
* Замена регистра "Корректировка спецификации"
* @class CatInsert_bind
* @extends CatObj
* @constructor 
*/class CatInsert_bind extends CatObj{get key(){return this._getter('key');}set key(v){this._setter('key',v);}get captured(){return this._getter('captured');}set captured(v){this._setter('captured',v);}get editor(){return this._getter('editor');}set editor(v){this._setter('editor',v);}get zone(){return this._getter('zone');}set zone(v){this._setter('zone',v);}get zones(){return this._getter('zones');}set zones(v){this._setter('zones',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get production(){return this._getter_ts('production');}set production(v){this._setter_ts('production',v);}get inserts(){return this._getter_ts('inserts');}set inserts(v){this._setter_ts('inserts',v);}}$p.CatInsert_bind=CatInsert_bind;class CatInsert_bindProductionRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}}$p.CatInsert_bindProductionRow=CatInsert_bindProductionRow;class CatInsert_bindInsertsRow extends TabularSectionRow{get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}}$p.CatInsert_bindInsertsRow=CatInsert_bindInsertsRow;$p.cat.create('insert_bind');/**
* ### Справочник ПризнакиНестандартов
* Признаки нестандартов
* @class CatNonstandard_attributes
* @extends CatObj
* @constructor 
*/class CatNonstandard_attributes extends CatObj{get crooked(){return this._getter('crooked');}set crooked(v){this._setter('crooked',v);}get colored(){return this._getter('colored');}set colored(v){this._setter('colored',v);}get lay(){return this._getter('lay');}set lay(v){this._setter('lay',v);}get made_to_order(){return this._getter('made_to_order');}set made_to_order(v){this._setter('made_to_order',v);}get packing(){return this._getter('packing');}set packing(v){this._setter('packing',v);}get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}}$p.CatNonstandard_attributes=CatNonstandard_attributes;$p.cat.create('nonstandard_attributes');/**
* ### Справочник НаправленияДоставки
* Объединяет районы, территории или подразделения продаж
* @class CatDelivery_directions
* @extends CatObj
* @constructor 
*/class CatDelivery_directions extends CatObj{get predefined_name(){return this._getter('predefined_name');}set predefined_name(v){this._setter('predefined_name',v);}get composition(){return this._getter_ts('composition');}set composition(v){this._setter_ts('composition',v);}}$p.CatDelivery_directions=CatDelivery_directions;class CatDelivery_directionsCompositionRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}}$p.CatDelivery_directionsCompositionRow=CatDelivery_directionsCompositionRow;$p.cat.create('delivery_directions');/**
* ### Документ КорректировкаРегистров
* Корректировка регистров
* @class DocRegisters_correction
* @extends DocObj
* @constructor 
*/class DocRegisters_correction extends DocObj{get original_doc_type(){return this._getter('original_doc_type');}set original_doc_type(v){this._setter('original_doc_type',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get registers_table(){return this._getter_ts('registers_table');}set registers_table(v){this._setter_ts('registers_table',v);}}$p.DocRegisters_correction=DocRegisters_correction;class DocRegisters_correctionRegisters_tableRow extends TabularSectionRow{get Имя(){return this._getter('Имя');}set Имя(v){this._setter('Имя',v);}}$p.DocRegisters_correctionRegisters_tableRow=DocRegisters_correctionRegisters_tableRow;$p.doc.create('registers_correction');/**
* ### Документ ПоступлениеТоваровУслуг
* Документы отражают поступление товаров и услуг
* @class DocPurchase
* @extends DocObj
* @constructor 
*/class DocPurchase extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get warehouse(){return this._getter('warehouse');}set warehouse(v){this._setter('warehouse',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get goods(){return this._getter_ts('goods');}set goods(v){this._setter_ts('goods',v);}get services(){return this._getter_ts('services');}set services(v){this._setter_ts('services',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocPurchase=DocPurchase;class DocPurchaseGoodsRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get unit(){return this._getter('unit');}set unit(v){this._setter('unit',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get vat_amount(){return this._getter('vat_amount');}set vat_amount(v){this._setter('vat_amount',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}}$p.DocPurchaseGoodsRow=DocPurchaseGoodsRow;class DocPurchaseServicesRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get content(){return this._getter('content');}set content(v){this._setter('content',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get vat_amount(){return this._getter('vat_amount');}set vat_amount(v){this._setter('vat_amount',v);}get nom_group(){return this._getter('nom_group');}set nom_group(v){this._setter('nom_group',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get cost_item(){return this._getter('cost_item');}set cost_item(v){this._setter('cost_item',v);}get project(){return this._getter('project');}set project(v){this._setter('project',v);}get buyers_order(){return this._getter('buyers_order');}set buyers_order(v){this._setter('buyers_order',v);}}$p.DocPurchaseServicesRow=DocPurchaseServicesRow;class DocPurchaseExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocPurchaseExtra_fieldsRow=DocPurchaseExtra_fieldsRow;$p.doc.create('purchase');/**
* ### Документ НарядРЦ
* Задание рабочему центру
* @class DocWork_centers_task
* @extends DocObj
* @constructor 
*/class DocWork_centers_task extends DocObj{get key(){return this._getter('key');}set key(v){this._setter('key',v);}get recipient(){return this._getter('recipient');}set recipient(v){this._setter('recipient',v);}get biz_cuts(){return this._getter('biz_cuts');}set biz_cuts(v){this._setter('biz_cuts',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get planning(){return this._getter_ts('planning');}set planning(v){this._setter_ts('planning',v);}get demand(){return this._getter_ts('demand');}set demand(v){this._setter_ts('demand',v);}get cuts(){return this._getter_ts('cuts');}set cuts(v){this._setter_ts('cuts',v);}get cutting(){return this._getter_ts('cutting');}set cutting(v){this._setter_ts('cutting',v);}}$p.DocWork_centers_task=DocWork_centers_task;class DocWork_centers_taskPlanningRow extends TabularSectionRow{get obj(){return this._getter('obj');}set obj(v){this._setter('obj',v);}get specimen(){return this._getter('specimen');}set specimen(v){this._setter('specimen',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get power(){return this._getter('power');}set power(v){this._setter('power',v);}}$p.DocWork_centers_taskPlanningRow=DocWork_centers_taskPlanningRow;class DocWork_centers_taskDemandRow extends TabularSectionRow{get production(){return this._getter('production');}set production(v){this._setter('production',v);}get specimen(){return this._getter('specimen');}set specimen(v){this._setter('specimen',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get final_balance(){return this._getter('final_balance');}set final_balance(v){this._setter('final_balance',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get from_cut(){return this._getter('from_cut');}set from_cut(v){this._setter('from_cut',v);}get close(){return this._getter('close');}set close(v){this._setter('close',v);}}$p.DocWork_centers_taskDemandRow=DocWork_centers_taskDemandRow;class DocWork_centers_taskCutsRow extends TabularSectionRow{get record_kind(){return this._getter('record_kind');}set record_kind(v){this._setter('record_kind',v);}get stick(){return this._getter('stick');}set stick(v){this._setter('stick',v);}get pair(){return this._getter('pair');}set pair(v){this._setter('pair',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get x(){return this._getter('x');}set x(v){this._setter('x',v);}get y(){return this._getter('y');}set y(v){this._setter('y',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get cell(){return this._getter('cell');}set cell(v){this._setter('cell',v);}}$p.DocWork_centers_taskCutsRow=DocWork_centers_taskCutsRow;class DocWork_centers_taskCuttingRow extends TabularSectionRow{get production(){return this._getter('production');}set production(v){this._setter('production',v);}get specimen(){return this._getter('specimen');}set specimen(v){this._setter('specimen',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get stick(){return this._getter('stick');}set stick(v){this._setter('stick',v);}get pair(){return this._getter('pair');}set pair(v){this._setter('pair',v);}get orientation(){return this._getter('orientation');}set orientation(v){this._setter('orientation',v);}get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}get alp1(){return this._getter('alp1');}set alp1(v){this._setter('alp1',v);}get alp2(){return this._getter('alp2');}set alp2(v){this._setter('alp2',v);}get cell(){return this._getter('cell');}set cell(v){this._setter('cell',v);}get part(){return this._getter('part');}set part(v){this._setter('part',v);}get x(){return this._getter('x');}set x(v){this._setter('x',v);}get y(){return this._getter('y');}set y(v){this._setter('y',v);}get rotated(){return this._getter('rotated');}set rotated(v){this._setter('rotated',v);}get nonstandard(){return this._getter('nonstandard');}set nonstandard(v){this._setter('nonstandard',v);}}$p.DocWork_centers_taskCuttingRow=DocWork_centers_taskCuttingRow;$p.doc.create('work_centers_task');/**
* ### Документ Расчет
* Аналог заказа покупателя типовых конфигураций.
Содержит инструменты для формирования спецификаций и подготовки данных производства и диспетчеризации
* @class DocCalc_order
* @extends DocObj
* @constructor 
*/class DocCalc_order extends DocObj{get number_internal(){return this._getter('number_internal');}set number_internal(v){this._setter('number_internal',v);}get project(){return this._getter('project');}set project(v){this._setter('project',v);}get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get client_of_dealer(){return this._getter('client_of_dealer');}set client_of_dealer(v){this._setter('client_of_dealer',v);}get contract(){return this._getter('contract');}set contract(v){this._setter('contract',v);}get bank_account(){return this._getter('bank_account');}set bank_account(v){this._setter('bank_account',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get manager(){return this._getter('manager');}set manager(v){this._setter('manager',v);}get leading_manager(){return this._getter('leading_manager');}set leading_manager(v){this._setter('leading_manager',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get warehouse(){return this._getter('warehouse');}set warehouse(v){this._setter('warehouse',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get amount_operation(){return this._getter('amount_operation');}set amount_operation(v){this._setter('amount_operation',v);}get amount_internal(){return this._getter('amount_internal');}set amount_internal(v){this._setter('amount_internal',v);}get accessory_characteristic(){return this._getter('accessory_characteristic');}set accessory_characteristic(v){this._setter('accessory_characteristic',v);}get sys_profile(){return this._getter('sys_profile');}set sys_profile(v){this._setter('sys_profile',v);}get sys_furn(){return this._getter('sys_furn');}set sys_furn(v){this._setter('sys_furn',v);}get phone(){return this._getter('phone');}set phone(v){this._setter('phone',v);}get delivery_area(){return this._getter('delivery_area');}set delivery_area(v){this._setter('delivery_area',v);}get shipping_address(){return this._getter('shipping_address');}set shipping_address(v){this._setter('shipping_address',v);}get coordinates(){return this._getter('coordinates');}set coordinates(v){this._setter('coordinates',v);}get address_fields(){return this._getter('address_fields');}set address_fields(v){this._setter('address_fields',v);}get difficult(){return this._getter('difficult');}set difficult(v){this._setter('difficult',v);}get vat_consider(){return this._getter('vat_consider');}set vat_consider(v){this._setter('vat_consider',v);}get vat_included(){return this._getter('vat_included');}set vat_included(v){this._setter('vat_included',v);}get settlements_course(){return this._getter('settlements_course');}set settlements_course(v){this._setter('settlements_course',v);}get settlements_multiplicity(){return this._getter('settlements_multiplicity');}set settlements_multiplicity(v){this._setter('settlements_multiplicity',v);}get extra_charge_external(){return this._getter('extra_charge_external');}set extra_charge_external(v){this._setter('extra_charge_external',v);}get obj_delivery_state(){return this._getter('obj_delivery_state');}set obj_delivery_state(v){this._setter('obj_delivery_state',v);}get category(){return this._getter('category');}set category(v){this._setter('category',v);}get production(){return this._getter_ts('production');}set production(v){this._setter_ts('production',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}get contact_information(){return this._getter_ts('contact_information');}set contact_information(v){this._setter_ts('contact_information',v);}get planning(){return this._getter_ts('planning');}set planning(v){this._setter_ts('planning',v);}}$p.DocCalc_order=DocCalc_order;class DocCalc_orderProductionRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get unit(){return this._getter('unit');}set unit(v){this._setter('unit',v);}get qty(){return this._getter('qty');}set qty(v){this._setter('qty',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get first_cost(){return this._getter('first_cost');}set first_cost(v){this._setter('first_cost',v);}get marginality(){return this._getter('marginality');}set marginality(v){this._setter('marginality',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}get discount_percent_internal(){return this._getter('discount_percent_internal');}set discount_percent_internal(v){this._setter('discount_percent_internal',v);}get discount(){return this._getter('discount');}set discount(v){this._setter('discount',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get margin(){return this._getter('margin');}set margin(v){this._setter('margin',v);}get price_internal(){return this._getter('price_internal');}set price_internal(v){this._setter('price_internal',v);}get amount_internal(){return this._getter('amount_internal');}set amount_internal(v){this._setter('amount_internal',v);}get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get vat_amount(){return this._getter('vat_amount');}set vat_amount(v){this._setter('vat_amount',v);}get ordn(){return this._getter('ordn');}set ordn(v){this._setter('ordn',v);}get changed(){return this._getter('changed');}set changed(v){this._setter('changed',v);}}$p.DocCalc_orderProductionRow=DocCalc_orderProductionRow;class DocCalc_orderExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocCalc_orderExtra_fieldsRow=DocCalc_orderExtra_fieldsRow;class DocCalc_orderContact_informationRow extends TabularSectionRow{get type(){return this._getter('type');}set type(v){this._setter('type',v);}get kind(){return this._getter('kind');}set kind(v){this._setter('kind',v);}get presentation(){return this._getter('presentation');}set presentation(v){this._setter('presentation',v);}get values_fields(){return this._getter('values_fields');}set values_fields(v){this._setter('values_fields',v);}get country(){return this._getter('country');}set country(v){this._setter('country',v);}get region(){return this._getter('region');}set region(v){this._setter('region',v);}get city(){return this._getter('city');}set city(v){this._setter('city',v);}get email_address(){return this._getter('email_address');}set email_address(v){this._setter('email_address',v);}get server_domain_name(){return this._getter('server_domain_name');}set server_domain_name(v){this._setter('server_domain_name',v);}get phone_number(){return this._getter('phone_number');}set phone_number(v){this._setter('phone_number',v);}get phone_without_codes(){return this._getter('phone_without_codes');}set phone_without_codes(v){this._setter('phone_without_codes',v);}}$p.DocCalc_orderContact_informationRow=DocCalc_orderContact_informationRow;class DocCalc_orderPlanningRow extends TabularSectionRow{get phase(){return this._getter('phase');}set phase(v){this._setter('phase',v);}get date(){return this._getter('date');}set date(v){this._setter('date',v);}get key(){return this._getter('key');}set key(v){this._setter('key',v);}get obj(){return this._getter('obj');}set obj(v){this._setter('obj',v);}get specimen(){return this._getter('specimen');}set specimen(v){this._setter('specimen',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get power(){return this._getter('power');}set power(v){this._setter('power',v);}}$p.DocCalc_orderPlanningRow=DocCalc_orderPlanningRow;$p.doc.create('calc_order');/**
* ### Документ ОплатаОтПокупателяПлатежнойКартой
* Оплата от покупателя платежной картой
* @class DocCredit_card_order
* @extends DocObj
* @constructor 
*/class DocCredit_card_order extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get payment_details(){return this._getter_ts('payment_details');}set payment_details(v){this._setter_ts('payment_details',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocCredit_card_order=DocCredit_card_order;class DocCredit_card_orderPayment_detailsRow extends TabularSectionRow{get cash_flow_article(){return this._getter('cash_flow_article');}set cash_flow_article(v){this._setter('cash_flow_article',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}}$p.DocCredit_card_orderPayment_detailsRow=DocCredit_card_orderPayment_detailsRow;class DocCredit_card_orderExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocCredit_card_orderExtra_fieldsRow=DocCredit_card_orderExtra_fieldsRow;$p.doc.create('credit_card_order');/**
* ### Документ МощностиРЦ
* Мощности рабочих центров
* @class DocWork_centers_performance
* @extends DocObj
* @constructor 
*/class DocWork_centers_performance extends DocObj{get start_date(){return this._getter('start_date');}set start_date(v){this._setter('start_date',v);}get expiration_date(){return this._getter('expiration_date');}set expiration_date(v){this._setter('expiration_date',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get planning(){return this._getter_ts('planning');}set planning(v){this._setter_ts('planning',v);}}$p.DocWork_centers_performance=DocWork_centers_performance;class DocWork_centers_performancePlanningRow extends TabularSectionRow{get date(){return this._getter('date');}set date(v){this._setter('date',v);}get key(){return this._getter('key');}set key(v){this._setter('key',v);}get power(){return this._getter('power');}set power(v){this._setter('power',v);}}$p.DocWork_centers_performancePlanningRow=DocWork_centers_performancePlanningRow;$p.doc.create('work_centers_performance');/**
* ### Документ ПлатежноеПоручениеВходящее
* Платежное поручение входящее
* @class DocDebit_bank_order
* @extends DocObj
* @constructor 
*/class DocDebit_bank_order extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get payment_details(){return this._getter_ts('payment_details');}set payment_details(v){this._setter_ts('payment_details',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocDebit_bank_order=DocDebit_bank_order;class DocDebit_bank_orderPayment_detailsRow extends TabularSectionRow{get cash_flow_article(){return this._getter('cash_flow_article');}set cash_flow_article(v){this._setter('cash_flow_article',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}}$p.DocDebit_bank_orderPayment_detailsRow=DocDebit_bank_orderPayment_detailsRow;class DocDebit_bank_orderExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocDebit_bank_orderExtra_fieldsRow=DocDebit_bank_orderExtra_fieldsRow;$p.doc.create('debit_bank_order');/**
* ### Документ ПлатежноеПоручениеИсходящее
* Платежное поручение исходящее
* @class DocCredit_bank_order
* @extends DocObj
* @constructor 
*/class DocCredit_bank_order extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get payment_details(){return this._getter_ts('payment_details');}set payment_details(v){this._setter_ts('payment_details',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocCredit_bank_order=DocCredit_bank_order;class DocCredit_bank_orderPayment_detailsRow extends TabularSectionRow{get cash_flow_article(){return this._getter('cash_flow_article');}set cash_flow_article(v){this._setter('cash_flow_article',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}}$p.DocCredit_bank_orderPayment_detailsRow=DocCredit_bank_orderPayment_detailsRow;class DocCredit_bank_orderExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocCredit_bank_orderExtra_fieldsRow=DocCredit_bank_orderExtra_fieldsRow;$p.doc.create('credit_bank_order');/**
* ### Документ ПриходныйКассовыйОрдер
* Приходный кассовый ордер
* @class DocDebit_cash_order
* @extends DocObj
* @constructor 
*/class DocDebit_cash_order extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get cashbox(){return this._getter('cashbox');}set cashbox(v){this._setter('cashbox',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get payment_details(){return this._getter_ts('payment_details');}set payment_details(v){this._setter_ts('payment_details',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocDebit_cash_order=DocDebit_cash_order;class DocDebit_cash_orderPayment_detailsRow extends TabularSectionRow{get cash_flow_article(){return this._getter('cash_flow_article');}set cash_flow_article(v){this._setter('cash_flow_article',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}}$p.DocDebit_cash_orderPayment_detailsRow=DocDebit_cash_orderPayment_detailsRow;class DocDebit_cash_orderExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocDebit_cash_orderExtra_fieldsRow=DocDebit_cash_orderExtra_fieldsRow;$p.doc.create('debit_cash_order');/**
* ### Документ РасходныйКассовыйОрдер
* Расходный кассовый ордер
* @class DocCredit_cash_order
* @extends DocObj
* @constructor 
*/class DocCredit_cash_order extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get cashbox(){return this._getter('cashbox');}set cashbox(v){this._setter('cashbox',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get payment_details(){return this._getter_ts('payment_details');}set payment_details(v){this._setter_ts('payment_details',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocCredit_cash_order=DocCredit_cash_order;class DocCredit_cash_orderPayment_detailsRow extends TabularSectionRow{get cash_flow_article(){return this._getter('cash_flow_article');}set cash_flow_article(v){this._setter('cash_flow_article',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}}$p.DocCredit_cash_orderPayment_detailsRow=DocCredit_cash_orderPayment_detailsRow;class DocCredit_cash_orderExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocCredit_cash_orderExtra_fieldsRow=DocCredit_cash_orderExtra_fieldsRow;$p.doc.create('credit_cash_order');/**
* ### Документ РеализацияТоваровУслуг
* Документы отражают факт реализации (отгрузки) товаров
* @class DocSelling
* @extends DocObj
* @constructor 
*/class DocSelling extends DocObj{get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get warehouse(){return this._getter('warehouse');}set warehouse(v){this._setter('warehouse',v);}get doc_amount(){return this._getter('doc_amount');}set doc_amount(v){this._setter('doc_amount',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get goods(){return this._getter_ts('goods');}set goods(v){this._setter_ts('goods',v);}get services(){return this._getter_ts('services');}set services(v){this._setter_ts('services',v);}get extra_fields(){return this._getter_ts('extra_fields');}set extra_fields(v){this._setter_ts('extra_fields',v);}}$p.DocSelling=DocSelling;class DocSellingGoodsRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get unit(){return this._getter('unit');}set unit(v){this._setter('unit',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get vat_amount(){return this._getter('vat_amount');}set vat_amount(v){this._setter('vat_amount',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}}$p.DocSellingGoodsRow=DocSellingGoodsRow;class DocSellingServicesRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get content(){return this._getter('content');}set content(v){this._setter('content',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get vat_rate(){return this._getter('vat_rate');}set vat_rate(v){this._setter('vat_rate',v);}get vat_amount(){return this._getter('vat_amount');}set vat_amount(v){this._setter('vat_amount',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}}$p.DocSellingServicesRow=DocSellingServicesRow;class DocSellingExtra_fieldsRow extends TabularSectionRow{get property(){return this._getter('property');}set property(v){this._setter('property',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get txt_row(){return this._getter('txt_row');}set txt_row(v){this._setter('txt_row',v);}}$p.DocSellingExtra_fieldsRow=DocSellingExtra_fieldsRow;$p.doc.create('selling');/**
* ### Документ УстановкаЦенНоменклатуры
* Установка цен номенклатуры
* @class DocNom_prices_setup
* @extends DocObj
* @constructor 
*/class DocNom_prices_setup extends DocObj{get price_type(){return this._getter('price_type');}set price_type(v){this._setter('price_type',v);}get currency(){return this._getter('currency');}set currency(v){this._setter('currency',v);}get responsible(){return this._getter('responsible');}set responsible(v){this._setter('responsible',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get goods(){return this._getter_ts('goods');}set goods(v){this._setter_ts('goods',v);}}$p.DocNom_prices_setup=DocNom_prices_setup;class DocNom_prices_setupGoodsRow extends TabularSectionRow{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get nom_characteristic(){return this._getter('nom_characteristic');}set nom_characteristic(v){this._setter('nom_characteristic',v);}get price_type(){return this._getter('price_type');}set price_type(v){this._setter('price_type',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}}$p.DocNom_prices_setupGoodsRow=DocNom_prices_setupGoodsRow;$p.doc.create('nom_prices_setup');/**
* ### Документ СобытиеПланирования
* Событие планирования
* @class DocPlanning_event
* @extends DocObj
* @constructor 
*/class DocPlanning_event extends DocObj{get phase(){return this._getter('phase');}set phase(v){this._setter('phase',v);}get key(){return this._getter('key');}set key(v){this._setter('key',v);}get recipient(){return this._getter('recipient');}set recipient(v){this._setter('recipient',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get project(){return this._getter('project');}set project(v){this._setter('project',v);}get Основание(){return this._getter('Основание');}set Основание(v){this._setter('Основание',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get executors(){return this._getter_ts('executors');}set executors(v){this._setter_ts('executors',v);}get planning(){return this._getter_ts('planning');}set planning(v){this._setter_ts('planning',v);}}$p.DocPlanning_event=DocPlanning_event;class DocPlanning_eventExecutorsRow extends TabularSectionRow{get executor(){return this._getter('executor');}set executor(v){this._setter('executor',v);}get coefficient(){return this._getter('coefficient');}set coefficient(v){this._setter('coefficient',v);}}$p.DocPlanning_eventExecutorsRow=DocPlanning_eventExecutorsRow;class DocPlanning_eventPlanningRow extends TabularSectionRow{get obj(){return this._getter('obj');}set obj(v){this._setter('obj',v);}get specimen(){return this._getter('specimen');}set specimen(v){this._setter('specimen',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get power(){return this._getter('power');}set power(v){this._setter('power',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get begin_time(){return this._getter('begin_time');}set begin_time(v){this._setter('begin_time',v);}get end_time(){return this._getter('end_time');}set end_time(v){this._setter('end_time',v);}}$p.DocPlanning_eventPlanningRow=DocPlanning_eventPlanningRow;$p.doc.create('planning_event');/**
* ### Регистр сведений log_view
* Просмотр журнала событий
* @class IregLog_view
* @extends RegisterRow
* @constructor 
*/class IregLog_view extends RegisterRow{get key(){return this._getter('key');}set key(v){this._setter('key',v);}get user(){return this._getter('user');}set user(v){this._setter('user',v);}}$p.IregLog_view=IregLog_view;$p.ireg.create('log_view');/**
* ### Регистр сведений КурсыВалют
* Курсы валют
* @class IregCurrency_courses
* @extends RegisterRow
* @constructor 
*/class IregCurrency_courses extends RegisterRow{get currency(){return this._getter('currency');}set currency(v){this._setter('currency',v);}get period(){return this._getter('period');}set period(v){this._setter('period',v);}get course(){return this._getter('course');}set course(v){this._setter('course',v);}get multiplicity(){return this._getter('multiplicity');}set multiplicity(v){this._setter('multiplicity',v);}}$p.IregCurrency_courses=IregCurrency_courses;$p.ireg.create('currency_courses');/**
* ### Регистр сведений пзМаржинальныеКоэффициентыИСкидки
* Маржинальные коэффициенты
* @class IregMargin_coefficients
* @extends RegisterRow
* @constructor 
*/class IregMargin_coefficients extends RegisterRow{get price_group(){return this._getter('price_group');}set price_group(v){this._setter('price_group',v);}get key(){return this._getter('key');}set key(v){this._setter('key',v);}get condition_formula(){return this._getter('condition_formula');}set condition_formula(v){this._setter('condition_formula',v);}get marginality(){return this._getter('marginality');}set marginality(v){this._setter('marginality',v);}get marginality_min(){return this._getter('marginality_min');}set marginality_min(v){this._setter('marginality_min',v);}get marginality_internal(){return this._getter('marginality_internal');}set marginality_internal(v){this._setter('marginality_internal',v);}get price_type_first_cost(){return this._getter('price_type_first_cost');}set price_type_first_cost(v){this._setter('price_type_first_cost',v);}get price_type_sale(){return this._getter('price_type_sale');}set price_type_sale(v){this._setter('price_type_sale',v);}get price_type_internal(){return this._getter('price_type_internal');}set price_type_internal(v){this._setter('price_type_internal',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get sale_formula(){return this._getter('sale_formula');}set sale_formula(v){this._setter('sale_formula',v);}get internal_formula(){return this._getter('internal_formula');}set internal_formula(v){this._setter('internal_formula',v);}get external_formula(){return this._getter('external_formula');}set external_formula(v){this._setter('external_formula',v);}get extra_charge_external(){return this._getter('extra_charge_external');}set extra_charge_external(v){this._setter('extra_charge_external',v);}get discount_external(){return this._getter('discount_external');}set discount_external(v){this._setter('discount_external',v);}get discount(){return this._getter('discount');}set discount(v){this._setter('discount',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}}$p.IregMargin_coefficients=IregMargin_coefficients;$p.ireg.create('margin_coefficients');/**
* ### Обработка builder_price
* Метаданные карточки цен номенклатуры
* @class DpBuilder_price
* @extends DataProcessorObj
* @constructor 
*/class DpBuilder_price extends DataProcessorObj{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get goods(){return this._getter_ts('goods');}set goods(v){this._setter_ts('goods',v);}}$p.DpBuilder_price=DpBuilder_price;class DpBuilder_priceGoodsRow extends TabularSectionRow{get price_type(){return this._getter('price_type');}set price_type(v){this._setter('price_type',v);}get date(){return this._getter('date');}set date(v){this._setter('date',v);}get nom_characteristic(){return this._getter('nom_characteristic');}set nom_characteristic(v){this._setter('nom_characteristic',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get currency(){return this._getter('currency');}set currency(v){this._setter('currency',v);}}$p.DpBuilder_priceGoodsRow=DpBuilder_priceGoodsRow;$p.dp.create('builder_price');/**
* ### Обработка builder_size
* Метаданные инструмента ruler
* @class DpBuilder_size
* @extends DataProcessorObj
* @constructor 
*/class DpBuilder_size extends DataProcessorObj{get offset(){return this._getter('offset');}set offset(v){this._setter('offset',v);}get angle(){return this._getter('angle');}set angle(v){this._setter('angle',v);}get fix_angle(){return this._getter('fix_angle');}set fix_angle(v){this._setter('fix_angle',v);}get align(){return this._getter('align');}set align(v){this._setter('align',v);}get hide_c1(){return this._getter('hide_c1');}set hide_c1(v){this._setter('hide_c1',v);}get hide_c2(){return this._getter('hide_c2');}set hide_c2(v){this._setter('hide_c2',v);}get hide_line(){return this._getter('hide_line');}set hide_line(v){this._setter('hide_line',v);}get text(){return this._getter('text');}set text(v){this._setter('text',v);}get font_family(){return this._getter('font_family');}set font_family(v){this._setter('font_family',v);}get bold(){return this._getter('bold');}set bold(v){this._setter('bold',v);}get font_size(){return this._getter('font_size');}set font_size(v){this._setter('font_size',v);}}$p.DpBuilder_size=DpBuilder_size;$p.dp.create('builder_size');/**
* ### Обработка ЗаказПокупателя
* Рисовалка
* @class DpBuyers_order
* @extends DataProcessorObj
* @constructor 
*/class DpBuyers_order extends DataProcessorObj{get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get sys(){return this._getter('sys');}set sys(v){this._setter('sys',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get height(){return this._getter('height');}set height(v){this._setter('height',v);}get depth(){return this._getter('depth');}set depth(v){this._setter('depth',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get first_cost(){return this._getter('first_cost');}set first_cost(v){this._setter('first_cost',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}get discount_percent_internal(){return this._getter('discount_percent_internal');}set discount_percent_internal(v){this._setter('discount_percent_internal',v);}get discount(){return this._getter('discount');}set discount(v){this._setter('discount',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get shipping_date(){return this._getter('shipping_date');}set shipping_date(v){this._setter('shipping_date',v);}get client_number(){return this._getter('client_number');}set client_number(v){this._setter('client_number',v);}get inn(){return this._getter('inn');}set inn(v){this._setter('inn',v);}get shipping_address(){return this._getter('shipping_address');}set shipping_address(v){this._setter('shipping_address',v);}get phone(){return this._getter('phone');}set phone(v){this._setter('phone',v);}get price_internal(){return this._getter('price_internal');}set price_internal(v){this._setter('price_internal',v);}get amount_internal(){return this._getter('amount_internal');}set amount_internal(v){this._setter('amount_internal',v);}get base_block(){return this._getter('base_block');}set base_block(v){this._setter('base_block',v);}get product_params(){return this._getter_ts('product_params');}set product_params(v){this._setter_ts('product_params',v);}get production(){return this._getter_ts('production');}set production(v){this._setter_ts('production',v);}get glass_specification(){return this._getter_ts('glass_specification');}set glass_specification(v){this._setter_ts('glass_specification',v);}get specification(){return this._getter_ts('specification');}set specification(v){this._setter_ts('specification',v);}get charges_discounts(){return this._getter_ts('charges_discounts');}set charges_discounts(v){this._setter_ts('charges_discounts',v);}}$p.DpBuyers_order=DpBuyers_order;class DpBuyers_orderProduct_paramsRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get param(){return this._getter('param');}set param(v){this._setter('param',v);}get value(){return this._getter('value');}set value(v){this._setter('value',v);}get hide(){return this._getter('hide');}set hide(v){this._setter('hide',v);}}$p.DpBuyers_orderProduct_paramsRow=DpBuyers_orderProduct_paramsRow;class DpBuyers_orderProductionRow extends TabularSectionRow{get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get height(){return this._getter('height');}set height(v){this._setter('height',v);}get depth(){return this._getter('depth');}set depth(v){this._setter('depth',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get note(){return this._getter('note');}set note(v){this._setter('note',v);}get first_cost(){return this._getter('first_cost');}set first_cost(v){this._setter('first_cost',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get ordn(){return this._getter('ordn');}set ordn(v){this._setter('ordn',v);}get qty(){return this._getter('qty');}set qty(v){this._setter('qty',v);}}$p.DpBuyers_orderProductionRow=DpBuyers_orderProductionRow;class DpBuyers_orderGlass_specificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get sorting(){return this._getter('sorting');}set sorting(v){this._setter('sorting',v);}get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}}$p.DpBuyers_orderGlass_specificationRow=DpBuyers_orderGlass_specificationRow;class DpBuyers_orderSpecificationRow extends TabularSectionRow{get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get dop(){return this._getter('dop');}set dop(v){this._setter('dop',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get handle_height_base(){return this._getter('handle_height_base');}set handle_height_base(v){this._setter('handle_height_base',v);}get handle_height_min(){return this._getter('handle_height_min');}set handle_height_min(v){this._setter('handle_height_min',v);}get handle_height_max(){return this._getter('handle_height_max');}set handle_height_max(v){this._setter('handle_height_max',v);}get contraction(){return this._getter('contraction');}set contraction(v){this._setter('contraction',v);}get contraction_option(){return this._getter('contraction_option');}set contraction_option(v){this._setter('contraction_option',v);}get coefficient(){return this._getter('coefficient');}set coefficient(v){this._setter('coefficient',v);}get flap_weight_min(){return this._getter('flap_weight_min');}set flap_weight_min(v){this._setter('flap_weight_min',v);}get flap_weight_max(){return this._getter('flap_weight_max');}set flap_weight_max(v){this._setter('flap_weight_max',v);}get side(){return this._getter('side');}set side(v){this._setter('side',v);}get cnn_side(){return this._getter('cnn_side');}set cnn_side(v){this._setter('cnn_side',v);}get offset_option(){return this._getter('offset_option');}set offset_option(v){this._setter('offset_option',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get transfer_option(){return this._getter('transfer_option');}set transfer_option(v){this._setter('transfer_option',v);}get is_main_specification_row(){return this._getter('is_main_specification_row');}set is_main_specification_row(v){this._setter('is_main_specification_row',v);}get is_set_row(){return this._getter('is_set_row');}set is_set_row(v){this._setter('is_set_row',v);}get is_procedure_row(){return this._getter('is_procedure_row');}set is_procedure_row(v){this._setter('is_procedure_row',v);}get is_order_row(){return this._getter('is_order_row');}set is_order_row(v){this._setter('is_order_row',v);}get origin(){return this._getter('origin');}set origin(v){this._setter('origin',v);}}$p.DpBuyers_orderSpecificationRow=DpBuyers_orderSpecificationRow;class DpBuyers_orderCharges_discountsRow extends TabularSectionRow{get nom_kind(){return this._getter('nom_kind');}set nom_kind(v){this._setter('nom_kind',v);}get discount_percent(){return this._getter('discount_percent');}set discount_percent(v){this._setter('discount_percent',v);}}$p.DpBuyers_orderCharges_discountsRow=DpBuyers_orderCharges_discountsRow;$p.dp.create('buyers_order');/**
* ### Обработка builder_lay_impost
* Импосты и раскладки
* @class DpBuilder_lay_impost
* @extends DataProcessorObj
* @constructor 
*/class DpBuilder_lay_impost extends DataProcessorObj{get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get split(){return this._getter('split');}set split(v){this._setter('split',v);}get elm_by_y(){return this._getter('elm_by_y');}set elm_by_y(v){this._setter('elm_by_y',v);}get step_by_y(){return this._getter('step_by_y');}set step_by_y(v){this._setter('step_by_y',v);}get align_by_y(){return this._getter('align_by_y');}set align_by_y(v){this._setter('align_by_y',v);}get inset_by_y(){return this._getter('inset_by_y');}set inset_by_y(v){this._setter('inset_by_y',v);}get elm_by_x(){return this._getter('elm_by_x');}set elm_by_x(v){this._setter('elm_by_x',v);}get step_by_x(){return this._getter('step_by_x');}set step_by_x(v){this._setter('step_by_x',v);}get align_by_x(){return this._getter('align_by_x');}set align_by_x(v){this._setter('align_by_x',v);}get inset_by_x(){return this._getter('inset_by_x');}set inset_by_x(v){this._setter('inset_by_x',v);}get w(){return this._getter('w');}set w(v){this._setter('w',v);}get h(){return this._getter('h');}set h(v){this._setter('h',v);}}$p.DpBuilder_lay_impost=DpBuilder_lay_impost;$p.dp.create('builder_lay_impost');/**
* ### Обработка builder_pen
* Метаданные инструмента pen (рисование профилей)
* @class DpBuilder_pen
* @extends DataProcessorObj
* @constructor 
*/class DpBuilder_pen extends DataProcessorObj{get elm_type(){return this._getter('elm_type');}set elm_type(v){this._setter('elm_type',v);}get inset(){return this._getter('inset');}set inset(v){this._setter('inset',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get bind_generatrix(){return this._getter('bind_generatrix');}set bind_generatrix(v){this._setter('bind_generatrix',v);}get bind_node(){return this._getter('bind_node');}set bind_node(v){this._setter('bind_node',v);}}$p.DpBuilder_pen=DpBuilder_pen;$p.dp.create('builder_pen');/**
* ### Обработка builder_text
* Метаданные инструмента text
* @class DpBuilder_text
* @extends DataProcessorObj
* @constructor 
*/class DpBuilder_text extends DataProcessorObj{get text(){return this._getter('text');}set text(v){this._setter('text',v);}get font_family(){return this._getter('font_family');}set font_family(v){this._setter('font_family',v);}get bold(){return this._getter('bold');}set bold(v){this._setter('bold',v);}get font_size(){return this._getter('font_size');}set font_size(v){this._setter('font_size',v);}get angle(){return this._getter('angle');}set angle(v){this._setter('angle',v);}get align(){return this._getter('align');}set align(v){this._setter('align',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get x(){return this._getter('x');}set x(v){this._setter('x',v);}get y(){return this._getter('y');}set y(v){this._setter('y',v);}}$p.DpBuilder_text=DpBuilder_text;$p.dp.create('builder_text');/**
* ### Обработка builder_coordinates
* Метаданные инструмента coordinates
* @class DpBuilder_coordinates
* @extends DataProcessorObj
* @constructor 
*/class DpBuilder_coordinates extends DataProcessorObj{get bind(){return this._getter('bind');}set bind(v){this._setter('bind',v);}get path(){return this._getter('path');}set path(v){this._setter('path',v);}get offset(){return this._getter('offset');}set offset(v){this._setter('offset',v);}get step(){return this._getter('step');}set step(v){this._setter('step',v);}get step_angle(){return this._getter('step_angle');}set step_angle(v){this._setter('step_angle',v);}get coordinates(){return this._getter_ts('coordinates');}set coordinates(v){this._setter_ts('coordinates',v);}}$p.DpBuilder_coordinates=DpBuilder_coordinates;class DpBuilder_coordinatesCoordinatesRow extends TabularSectionRow{get x(){return this._getter('x');}set x(v){this._setter('x',v);}get y(){return this._getter('y');}set y(v){this._setter('y',v);}}$p.DpBuilder_coordinatesCoordinatesRow=DpBuilder_coordinatesCoordinatesRow;$p.dp.create('builder_coordinates');/**
* ### Отчет materials_demand
* Потребность в материалах
* @class RepMaterials_demand
* @extends DataProcessorObj
* @constructor 
*/class RepMaterials_demand extends DataProcessorObj{get calc_order(){return this._getter('calc_order');}set calc_order(v){this._setter('calc_order',v);}get formula(){return this._getter('formula');}set formula(v){this._setter('formula',v);}get scheme(){return this._getter('scheme');}set scheme(v){this._setter('scheme',v);}get production(){return this._getter_ts('production');}set production(v){this._setter_ts('production',v);}get specification(){return this._getter_ts('specification');}set specification(v){this._setter_ts('specification',v);}}$p.RepMaterials_demand=RepMaterials_demand;class RepMaterials_demandProductionRow extends TabularSectionRow{get use(){return this._getter('use');}set use(v){this._setter('use',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get qty(){return this._getter('qty');}set qty(v){this._setter('qty',v);}}$p.RepMaterials_demandProductionRow=RepMaterials_demandProductionRow;class RepMaterials_demandSpecificationRow extends TabularSectionRow{get calc_order(){return this._getter('calc_order');}set calc_order(v){this._setter('calc_order',v);}get product(){return this._getter('product');}set product(v){this._setter('product',v);}get cnstr(){return this._getter('cnstr');}set cnstr(v){this._setter('cnstr',v);}get elm(){return this._getter('elm');}set elm(v){this._setter('elm',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get article(){return this._getter('article');}set article(v){this._setter('article',v);}get clr(){return this._getter('clr');}set clr(v){this._setter('clr',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get nom_kind(){return this._getter('nom_kind');}set nom_kind(v){this._setter('nom_kind',v);}get qty(){return this._getter('qty');}set qty(v){this._setter('qty',v);}get len(){return this._getter('len');}set len(v){this._setter('len',v);}get width(){return this._getter('width');}set width(v){this._setter('width',v);}get s(){return this._getter('s');}set s(v){this._setter('s',v);}get material(){return this._getter('material');}set material(v){this._setter('material',v);}get grouping(){return this._getter('grouping');}set grouping(v){this._setter('grouping',v);}get totqty(){return this._getter('totqty');}set totqty(v){this._setter('totqty',v);}get totqty1(){return this._getter('totqty1');}set totqty1(v){this._setter('totqty1',v);}get alp1(){return this._getter('alp1');}set alp1(v){this._setter('alp1',v);}get alp2(){return this._getter('alp2');}set alp2(v){this._setter('alp2',v);}get sz(){return this._getter('sz');}set sz(v){this._setter('sz',v);}get price(){return this._getter('price');}set price(v){this._setter('price',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get amount_marged(){return this._getter('amount_marged');}set amount_marged(v){this._setter('amount_marged',v);}}$p.RepMaterials_demandSpecificationRow=RepMaterials_demandSpecificationRow;$p.rep.create('materials_demand');/**
* ### Отчет cash
* Денежные средства
* @class RepCash
* @extends DataProcessorObj
* @constructor 
*/class RepCash extends DataProcessorObj{get data(){return this._getter_ts('data');}set data(v){this._setter_ts('data',v);}}$p.RepCash=RepCash;class RepCashDataRow extends TabularSectionRow{get period(){return this._getter('period');}set period(v){this._setter('period',v);}get register(){return this._getter('register');}set register(v){this._setter('register',v);}get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get bank_account_cashbox(){return this._getter('bank_account_cashbox');}set bank_account_cashbox(v){this._setter('bank_account_cashbox',v);}get initial_balance(){return this._getter('initial_balance');}set initial_balance(v){this._setter('initial_balance',v);}get debit(){return this._getter('debit');}set debit(v){this._setter('debit',v);}get credit(){return this._getter('credit');}set credit(v){this._setter('credit',v);}get final_balance(){return this._getter('final_balance');}set final_balance(v){this._setter('final_balance',v);}}$p.RepCashDataRow=RepCashDataRow;$p.rep.create('cash');/**
* ### Отчет goods
* Товары на складах
* @class RepGoods
* @extends DataProcessorObj
* @constructor 
*/class RepGoods extends DataProcessorObj{get data(){return this._getter_ts('data');}set data(v){this._setter_ts('data',v);}}$p.RepGoods=RepGoods;class RepGoodsDataRow extends TabularSectionRow{get period(){return this._getter('period');}set period(v){this._setter('period',v);}get register(){return this._getter('register');}set register(v){this._setter('register',v);}get warehouse(){return this._getter('warehouse');}set warehouse(v){this._setter('warehouse',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get initial_balance(){return this._getter('initial_balance');}set initial_balance(v){this._setter('initial_balance',v);}get debit(){return this._getter('debit');}set debit(v){this._setter('debit',v);}get credit(){return this._getter('credit');}set credit(v){this._setter('credit',v);}get final_balance(){return this._getter('final_balance');}set final_balance(v){this._setter('final_balance',v);}get amount_initial_balance(){return this._getter('amount_initial_balance');}set amount_initial_balance(v){this._setter('amount_initial_balance',v);}get amount_debit(){return this._getter('amount_debit');}set amount_debit(v){this._setter('amount_debit',v);}get amount_credit(){return this._getter('amount_credit');}set amount_credit(v){this._setter('amount_credit',v);}get amount_final_balance(){return this._getter('amount_final_balance');}set amount_final_balance(v){this._setter('amount_final_balance',v);}}$p.RepGoodsDataRow=RepGoodsDataRow;$p.rep.create('goods');/**
* ### Отчет invoice_execution
* Исполнение заказов
* @class RepInvoice_execution
* @extends DataProcessorObj
* @constructor 
*/class RepInvoice_execution extends DataProcessorObj{get data(){return this._getter_ts('data');}set data(v){this._setter_ts('data',v);}}$p.RepInvoice_execution=RepInvoice_execution;class RepInvoice_executionDataRow extends TabularSectionRow{get period(){return this._getter('period');}set period(v){this._setter('period',v);}get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get invoice(){return this._getter('invoice');}set invoice(v){this._setter('invoice',v);}get pay(){return this._getter('pay');}set pay(v){this._setter('pay',v);}get pay_total(){return this._getter('pay_total');}set pay_total(v){this._setter('pay_total',v);}get pay_percent(){return this._getter('pay_percent');}set pay_percent(v){this._setter('pay_percent',v);}get shipment(){return this._getter('shipment');}set shipment(v){this._setter('shipment',v);}get shipment_total(){return this._getter('shipment_total');}set shipment_total(v){this._setter('shipment_total',v);}get shipment_percent(){return this._getter('shipment_percent');}set shipment_percent(v){this._setter('shipment_percent',v);}}$p.RepInvoice_executionDataRow=RepInvoice_executionDataRow;$p.rep.create('invoice_execution');/**
* ### Отчет mutual_settlements
* Взаиморасчеты
* @class RepMutual_settlements
* @extends DataProcessorObj
* @constructor 
*/class RepMutual_settlements extends DataProcessorObj{get data(){return this._getter_ts('data');}set data(v){this._setter_ts('data',v);}}$p.RepMutual_settlements=RepMutual_settlements;class RepMutual_settlementsDataRow extends TabularSectionRow{get period(){return this._getter('period');}set period(v){this._setter('period',v);}get register(){return this._getter('register');}set register(v){this._setter('register',v);}get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get initial_balance(){return this._getter('initial_balance');}set initial_balance(v){this._setter('initial_balance',v);}get debit(){return this._getter('debit');}set debit(v){this._setter('debit',v);}get credit(){return this._getter('credit');}set credit(v){this._setter('credit',v);}get final_balance(){return this._getter('final_balance');}set final_balance(v){this._setter('final_balance',v);}}$p.RepMutual_settlementsDataRow=RepMutual_settlementsDataRow;$p.rep.create('mutual_settlements');/**
* ### Отчет selling
* Продажи
* @class RepSelling
* @extends DataProcessorObj
* @constructor 
*/class RepSelling extends DataProcessorObj{get data(){return this._getter_ts('data');}set data(v){this._setter_ts('data',v);}}$p.RepSelling=RepSelling;class RepSellingDataRow extends TabularSectionRow{get period(){return this._getter('period');}set period(v){this._setter('period',v);}get register(){return this._getter('register');}set register(v){this._setter('register',v);}get organization(){return this._getter('organization');}set organization(v){this._setter('organization',v);}get department(){return this._getter('department');}set department(v){this._setter('department',v);}get partner(){return this._getter('partner');}set partner(v){this._setter('partner',v);}get trans(){return this._getter('trans');}set trans(v){this._setter('trans',v);}get nom(){return this._getter('nom');}set nom(v){this._setter('nom',v);}get characteristic(){return this._getter('characteristic');}set characteristic(v){this._setter('characteristic',v);}get quantity(){return this._getter('quantity');}set quantity(v){this._setter('quantity',v);}get amount(){return this._getter('amount');}set amount(v){this._setter('amount',v);}get vat_amount(){return this._getter('vat_amount');}set vat_amount(v){this._setter('vat_amount',v);}get discount(){return this._getter('discount');}set discount(v){this._setter('discount',v);}}$p.RepSellingDataRow=RepSellingDataRow;$p.rep.create('selling');})();};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _request = __webpack_require__(11);

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async (ctx, { job_prm, cat }) => {

  // если указано ограничение по ip - проверяем
  const { restrict_ips } = ctx.app;
  if (restrict_ips.length && restrict_ips.indexOf(ctx.req.headers['x-real-ip'] || ctx.ip) == -1) {
    ctx.status = 403;
    ctx.body = 'ip restricted:' + ctx.ip;
    return;
  }

  let { authorization, suffix } = ctx.req.headers;
  if (!authorization) {
    ctx.status = 403;
    ctx.body = 'access denied';
    return;
  }

  const { couch_local, zone } = job_prm;
  let user;
  const resp = await new Promise((resolve, reject) => {

    try {
      const auth = new Buffer(authorization.substr(6), 'base64').toString();
      const sep = auth.indexOf(':');
      const pass = auth.substr(sep + 1);
      user = auth.substr(0, sep);

      if (!suffix) {
        suffix = '';
      }
      //else{
      while (suffix.length < 4) {
        suffix = '0' + suffix;
      }
      //}

      (0, _request2.default)({
        url: couch_local + zone + (suffix !== '0000' ? '_doc_' + suffix : '_doc'),
        auth: { user, pass, sendImmediately: true }
      }, (e, r, body) => {
        if (r && r.statusCode < 201) {
          resolve(true);
        } else {
          ctx.status = r && r.statusCode || 500;
          ctx.body = body || e && e.message;
          resolve(false);
        }
      });
    } catch (e) {
      ctx.status = 500;
      ctx.body = e.message;
      resolve(false);
    }
  });

  return resp && { user: cat.users.by_id(user), suffix };
};

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("request");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _koaBetterRouter = __webpack_require__(13);

var _koaBetterRouter2 = _interopRequireDefault(_koaBetterRouter);

var _get = __webpack_require__(14);

var _get2 = _interopRequireDefault(_get);

var _post = __webpack_require__(15);

var _post2 = _interopRequireDefault(_post);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = __webpack_require__(0)('wb:router');
debug('start');

const router = (0, _koaBetterRouter2.default)({ prefix: '/exchange' });

router.loadMethods().get('/:class/:ref', _get2.default).post('/:class/:ref', _post2.default);

exports.default = router;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("koa-better-router");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metadata = __webpack_require__(1);

var _metadata2 = _interopRequireDefault(_metadata);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = __webpack_require__(0)('wb:get');
debug('required');

/**
 * Возвращает в body лог отдела за нужный день
 * @param ctx
 * @param next
 * @return {Promise.<void>}
 */
async function log(ctx, next) {
  // данные авторизации получаем из контекста
  const { _auth, params } = ctx;
  const _id = `_local/log.exchange.${_auth.suffix}.${params.ref}`;
  ctx.body = await _metadata2.default.adapters.pouch.remote.doc.get(_id).catch(err => ({ error: true, message: `Объект ${_id} не найден\n${err.message}` }));
}

/**
 * Корневой обработчик get-запросов
 * @param ctx
 * @param next
 * @return {Promise.<*>}
 */

exports.default = async (ctx, next) => {

  try {
    switch (ctx.params.class) {
      case 'log':
        return await log(ctx, next);
      default:
        ctx.status = 404;
        ctx.body = {
          error: true,
          message: `Неизвестный класс ${ctx.params.class}`
        };
    }
  } catch (err) {
    ctx.status = 500;
    ctx.body = {
      error: true,
      message: err.stack || err.message
    };
    debug(err);
  }
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _metadata = __webpack_require__(1);

var _metadata2 = _interopRequireDefault(_metadata);

var _builder = __webpack_require__(16);

var _builder2 = _interopRequireDefault(_builder);

var _nodeFetch = __webpack_require__(2);

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = __webpack_require__(0)('wb:post');
debug('required');

const requester = __webpack_require__(19);
const mailer = __webpack_require__(20);

// маркер поля обработки данных
const owner = 'wb-exchange';

/**
 * Смещение по вложенности объектов
 * 
 * @param names массив наименований полей, в соответствии со вложенностью объектов
 * @param src источник данных
 * @return {void}
 */
function shift_field(names, src) {
  for (let item of names) {
    if (typeof src !== 'object' || src[item] === undefined) {
      break;
    }
    src = src[item];
  }
  return src;
}

/**
 * Разбирает данные
 * 
 * Выборка данных осуществляется из объекта источника в соответствии с объектом описания данных,
 * помещаются в объект назначения.
 * 
 * Пример объекта описания данных. Поля содержащие объект с "_owner" равным "wb-exchange",
 * заполняются значениями из объекта источника. Поле "name" указывает на наименование поля из источника,
 * поле "fields" содержит описание данных для объекта внутри текущего поля, если это массив, поле
 * "fields" применяется для каждого элемента массива. Все поля опциональны, необработанные значения
 * передаются в объект назначения как есть.
 * 
 * {
 *   "field1": "value",
 *   "field2": {
 *     "_owner": "wb-exchange"
 *   },
 *   "field3": {
 *     "_owner": "wb-exchange",
 *     "name": "name in source"
 *   },
 *   "field4": {
 *     "_owner": "wb-exchange",
 *     "name": ["name in source", "name in source"]
 *   },
 *   "field5": {
 *     "_owner": "wb-exchange",
 *     "name": "name in source",
 *     "fields": {
 *       "field1": "value"
 *       ...
 *     }
 *   }
 * }
 * 
 * @param data объект описания данных
 * @param src источник данных
 * @param dst объект назначения
 * @return {Object} 
 */
function parseData(data, src, dst) {
  if (typeof data !== 'object') return dst;

  for (const field in data) {
    //if (payload[field] || payload[field] === 0) continue;

    switch (typeof data[field]) {
      //case 'string':
      //  payload[field] = (source[data[field]] || source[data[field]] === 0) ? source[data[field]] : data[field];
      //  break;
      case 'object':
        if (data[field]._owner !== owner) {
          dst[field] = data[field];
          break;
        }

        let src_value = data[field].name instanceof Array ? shift_field(data[field].name, src) : src[data[field].name || field];
        const { fields } = data[field];

        if (src_value !== undefined) {
          if (typeof src_value === 'object') {

            // преобразуем табличную часть в массив
            if (_metadata2.default.utils.is_tabular(src_value)) {
              const tmp = [];
              src_value.forEach(row => tmp.push(row));
              src_value = tmp;
            }

            if (src_value instanceof Array) {
              dst[field] = [];
              for (const item of src_value) {
                dst[field].push(typeof item === 'object' ? parseData(fields, item, {}) : item);
              }
            } else {
              dst[field] = parseData(fields, src_value, {});
            }
          } else {
            dst[field] = src_value;
          }
        }
        break;
      default:
        dst[field] = data[field];
        break;
    }
  }

  return dst;
}

/**
 * Отправляет данные заказа получателю
 * @param ctx
 * @param next
 * @return {Promise.<void>}
 */
async function calc_order(ctx, next) {

  const { _auth, _query, params } = ctx;
  const { transport, data } = _query;
  const { ref } = params;
  const { utils, job_prm } = _metadata2.default;
  const { couch_local, zone, user_node: { username, password } } = job_prm;

  const suffix = _auth && _auth.suffix || '0000';

  try {
    if (!utils.is_guid(ref)) {
      ctx.status = 404;
      ctx.body = `Параметр запроса ref=${ref} не соответствует маске уникального идентификатора`;
      return;
    }

    // проверяем входные данные
    if (!data || typeof data !== 'object') {
      ctx.body = {
        error: true,
        message: `Ошибка входных параметров при запросе doc.calc_order|${ref}`
      };
      debug(`error in query of doc.calc_order|${ref}: input parameters not specified`);
    }

    // забираем документ из целевой базы
    return (0, _nodeFetch2.default)(`${couch_local}${zone}_doc${suffix === '0000' ? '' : '_' + suffix}/doc.calc_order|${ref}`, {
      method: "GET",
      headers: {
        'Accept': 'application/json',
        'Authorization': 'Basic ' + Buffer.from(username + ":" + password).toString('base64')
      }
    }).then(res => {
      return res.json();
    }).then(doc => {
      // заменяем имя пользователя на объект
      doc.timestamp.user = _metadata2.default.cat.users.by_name(doc.timestamp.user);

      // получаем документ расчет объект из главной базы
      return _metadata2.default.doc.calc_order.get(ref, 'promise').then(order => {
        return order.print_data().then(async print_data => {
          // разбираем данные из объектов заказа, документа и данных для печати
          const payload = parseData(data, Object.assign(order, doc, print_data), {});

          // отправляем данные через заданный транспорт
          switch (transport) {
            case 'request':
              await requester(Object.assign(_query, {
                body: JSON.stringify(payload)
              })).then(res => {
                ctx.body = res;
              }).catch(err => {
                ctx.body = {
                  error: true,
                  message: `Ошибка при запросе doc.calc_order|${ref}: ${err && err.message}`
                };
                debug(`error in query of doc.calc_order|${ref}: ${err && err.message}`);
              });
              break;
            case 'mail':
              await mailer(Object.assign(_query, {
                text: JSON.stringify(payload)
              })).then(res => {
                ctx.body = res;
              }).catch(err => {
                ctx.body = {
                  error: true,
                  message: `Ошибка при запросе doc.calc_order|${ref}: ${err && err.message}`
                };
                debug(`error in query of doc.calc_order|${ref}: ${err && err.message}`);
              });
              break;
            default:
              ctx.body = {
                error: true,
                message: `Ошибка при запросе doc.calc_order|${ref}: поддерживаемый транспорт не задан`
              };
              debug(`error in query of doc.calc_order|${ref}: supported transport not specified`);
              break;
          }

          // выгружаем данные из памяти
          order.production.forEach(row => {
            if (!row.characteristic.empty()) {
              row.characteristic.unload();
            }
          });
          order.unload();
        });
      }).catch(err => {
        ctx.body = {
          error: true,
          message: `Ошибка при получении doc.calc_order|${ref}: ${err && err.message}`
        };
        debug(`get doc.calc_order|${ref} error ${err}`);
      });
    }).catch(err => {
      ctx.body = {
        error: true,
        message: `Ошибка при получении doc.calc_order|${ref}: ${err && err.message}`
      };
      debug(`get doc.calc_order|${ref} error ${err}`);
    });
  } catch (err) {
    ctx.status = 500;
    ctx.body = err ? err.stack || err.message : `Ошибка при обработке заказа ${ref}`;
    debug(err);
  }
}

/**
 * Корневой обработчик post-запросов
 * @param ctx
 * @param next
 * @return {Promise.<*>}
 */

exports.default = async (ctx, next) => {

  try {
    switch (ctx.params.class) {
      case 'doc.calc_order':
        return await calc_order(ctx, next);
      default:
        ctx.status = 404;
        ctx.body = {
          error: true,
          message: `Неизвестный класс ${ctx.params.class}`
        };
    }
  } catch (err) {
    ctx.status = 500;
    ctx.body = {
      error: true,
      message: err.stack || err.message
    };
    debug(err);
  }
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _paperCore = __webpack_require__(17);

var _paperCore2 = _interopRequireDefault(_paperCore);

var _metadata = __webpack_require__(1);

var _metadata2 = _interopRequireDefault(_metadata);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

global.paper = _paperCore2.default;
const builder = __webpack_require__(18);

const debug = __webpack_require__(0)('wb:paper');
debug('required, inited & modified');

_metadata2.default.Editor = builder;

exports.default = builder;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("paper/dist/paper-core");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

;(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Drawer = factory();
  }
})(undefined, function () {

  const consts = {

    tune_paper(settings) {

      const builder = $p.job_prm.builder || {};

      if (builder.handle_size) {
        settings.handleSize = builder.handle_size;
      }

      this.sticking = builder.sticking || 90;
      this.sticking_l = builder.sticking_l || 9;
      this.sticking0 = this.sticking / 2;
      this.sticking2 = this.sticking * this.sticking;
      this.font_size = builder.font_size || 90;
      this.font_family = builder.font_family || 'GOST type B';
      this.elm_font_size = builder.elm_font_size || 60;
      this.cutoff = builder.cutoff || 1300;

      if (!builder.font_family) {
        builder.font_family = this.font_family;
      }
      if (!builder.font_size) {
        builder.font_size = this.font_size;
      }
      if (!builder.elm_font_size) {
        builder.elm_font_size = this.elm_font_size;
      }

      if ($p.wsql.alasql.utils.isNode) {
        this.font_size *= 1.2;
        this.elm_font_size *= 1.2;
      }

      this.orientation_delta = builder.orientation_delta || 30;
    },

    epsilon: 0.01,
    move_points: 'move_points',
    move_handle: 'move_handle',
    move_shapes: 'move-shapes'

  };

  class EditorInvisible extends paper.PaperScope {

    constructor() {

      super();

      this._undo = {
        clear() {},
        save_snapshot() {}
      };

      this.eve = new (Object.getPrototypeOf($p.md.constructor))();

      consts.tune_paper(this.settings);
    }

    elm(num) {
      return this.project.getItem({ class: BuilderElement, elm: num });
    }

    set_text() {}

    create_scheme() {
      if (!this._canvas) {
        this._canvas = document.createElement('CANVAS');
        this._canvas.height = 480;
        this._canvas.width = 480;
        this.setup(this._canvas);
      }
      if (this.projects.lengrh && !(this.projects[0] instanceof Scheme)) {
        this.projects[0].remove();
      }
      return new Scheme(this._canvas, this, true);
    }

    unload() {
      this.eve.removeAllListeners();
      const arr = this.projects.concat(this.tools);
      while (arr.length) {
        const elm = arr[0];
        if (elm.unload) {
          elm.unload();
        } else if (elm.remove) {
          elm.remove();
        }
        arr.splice(0, 1);
      }
      for (let i in EditorInvisible._scopes) {
        if (EditorInvisible._scopes[i] === this) {
          delete EditorInvisible._scopes[i];
        }
      }
    }

  }

  $p.EditorInvisible = EditorInvisible;

  const AbstractFilling = superclass => class extends superclass {

    is_pos(pos) {
      if (this.project.contours.count == 1 || this.parent) {
        return true;
      }

      let res = Math.abs(this.bounds[pos] - this.project.bounds[pos]) < consts.sticking_l;

      if (!res) {
        let rect;
        if (pos == "top") {
          rect = new paper.Rectangle(this.bounds.topLeft, this.bounds.topRight.add([0, -200]));
        } else if (pos == "left") {
          rect = new paper.Rectangle(this.bounds.topLeft, this.bounds.bottomLeft.add([-200, 0]));
        } else if (pos == "right") {
          rect = new paper.Rectangle(this.bounds.topRight, this.bounds.bottomRight.add([200, 0]));
        } else if (pos == "bottom") {
          rect = new paper.Rectangle(this.bounds.bottomLeft, this.bounds.bottomRight.add([0, 200]));
        }

        res = !this.project.contours.some(l => {
          return l != this && rect.intersects(l.bounds);
        });
      }

      return res;
    }

    profiles_by_side(side, profiles) {
      if (!profiles) {
        profiles = this.profiles;
      }
      const bounds = {
        left: Infinity,
        top: Infinity,
        bottom: -Infinity,
        right: -Infinity
      };
      const res = {};
      const ares = [];

      function by_side(name) {
        ares.some(elm => {
          if (elm[name] == bounds[name]) {
            res[name] = elm.profile;
            return true;
          }
        });
      };

      if (profiles.length) {
        profiles.forEach(profile => {
          const { b, e } = profile;
          const x = b.x + e.x;
          const y = b.y + e.y;
          if (x < bounds.left) {
            bounds.left = x;
          }
          if (x > bounds.right) {
            bounds.right = x;
          }
          if (y < bounds.top) {
            bounds.top = y;
          }
          if (y > bounds.bottom) {
            bounds.bottom = y;
          }
          ares.push({
            profile: profile,
            left: x,
            top: y,
            bottom: y,
            right: x
          });
        });
        if (side) {
          by_side(side);
          return res[side];
        }

        Object.keys(bounds).forEach(by_side);
      }

      return res;
    }

    get contours() {
      return this.children.filter(elm => elm instanceof Contour);
    }

    get l_dimensions() {
      const { _attr } = this;
      return _attr._dimlns || (_attr._dimlns = new DimensionDrawer({ parent: this }));
    }

    get dimension_bounds() {
      let { bounds } = this;
      this.getItems({ class: DimensionLineCustom }).forEach(dl => {
        bounds = bounds.unite(dl.bounds);
      });
      return bounds;
    }

  };

  class GlassSegment {

    constructor(profile, b, e, outer) {
      this.profile = profile;
      this.b = b.clone();
      this.e = e.clone();
      this.outer = outer;
      this.segment();
    }

    segment() {

      let gen;

      if (this.profile.children.some(addl => {

        if (addl instanceof ProfileAddl && this.outer == addl.outer) {

          if (!gen) {
            gen = this.profile.generatrix;
          }

          const b = this.profile instanceof ProfileAddl ? this.profile.b : this.b;
          const e = this.profile instanceof ProfileAddl ? this.profile.e : this.e;

          if (b.is_nearest(gen.getNearestPoint(addl.b), true) && e.is_nearest(gen.getNearestPoint(addl.e), true)) {
            this.profile = addl;
            this.outer = false;
            return true;
          }
        }
      })) {

        this.segment();
      }
    }

    break_by_angle(nodes, segments, point, offset, curr_profile, segm_profile) {

      const node = nodes.byPoint(point);
      if (!node) {
        return false;
      }

      let tangent = curr_profile.generatrix.getTangentAt(offset);
      if (this.outer) {
        tangent = tangent.negate();
      }

      const angles = [];
      for (const elm of node) {
        if (elm.profile === curr_profile) {
          continue;
        }
        const { generatrix } = elm.profile;
        const ppoint = generatrix.getNearestPoint(point);
        const poffset = generatrix.getOffsetOf(ppoint);
        const ptangent = generatrix.getTangentAt(poffset);
        for (const segm of segments) {
          if (segm.profile === elm.profile && segm.b.is_nearest(ppoint, true)) {
            angles.push({ profile: elm.profile, angle: tangent.getDirectedAngle(segm.outer ? ptangent.negate() : ptangent) });
          }
        }
      }
      let angle;
      for (const elm of angles) {
        if (elm.profile === segm_profile && (!angle || elm.angle > angle)) {
          angle = elm.angle;
        }
      }
      if (angle < 0) {
        return true;
      }
      for (const elm of angles) {
        if (elm.profile !== segm_profile && elm.angle > angle) {
          return true;
        }
      }
    }

    has_cnn(segm, nodes, segments) {

      const point = segm.b;
      if (!this.e.is_nearest(point)) {
        return false;
      }

      let curr_profile = this.profile;
      let segm_profile = segm.profile;
      while (curr_profile.parent instanceof ProfileItem) {
        curr_profile = curr_profile.parent;
      }
      while (segm_profile.parent instanceof ProfileItem) {
        segm_profile = segm_profile.parent;
      }

      if (curr_profile.b.is_nearest(point, true)) {
        const by_angle = this.break_by_angle(nodes, segments, point, 0, curr_profile, segm_profile);
        if (by_angle) {
          return false;
        } else if (by_angle === undefined || curr_profile.cnn_point('b').profile === segm_profile) {
          return true;
        }
      }

      if (curr_profile.e.is_nearest(point, true)) {
        const by_angle = this.break_by_angle(nodes, segments, point, curr_profile.generatrix.length, curr_profile, segm_profile);
        if (by_angle) {
          return false;
        } else if (by_angle === undefined || curr_profile.cnn_point('e').profile === segm_profile) {
          return true;
        }
      }

      if (segm_profile.b.is_nearest(point, true)) {
        const by_angle = segm.break_by_angle(nodes, segments, point, 0, segm_profile, curr_profile);
        if (by_angle) {
          return false;
        } else if (by_angle === undefined || segm_profile.cnn_point('b').profile == curr_profile) {
          return true;
        }
      }

      if (segm_profile.e.is_nearest(point, true)) {
        const by_angle = segm.break_by_angle(nodes, segments, point, segm_profile.generatrix.length, segm_profile, curr_profile);
        if (by_angle) {
          return false;
        } else if (by_angle === undefined || segm_profile.cnn_point('e').profile == curr_profile) {
          return true;
        }
      }

      return false;
    }

    get _sub() {
      const { sub_path } = this;
      return {
        get b() {
          return sub_path ? sub_path.firstSegment.point : new paper.Point();
        },
        set b(v) {
          sub_path && (sub_path.firstSegment.point = v);
        },
        get e() {
          return sub_path ? sub_path.lastSegment.point : new paper.Point();
        },
        set e(v) {
          sub_path && (sub_path.lastSegment.point = v);
        }
      };
    }
  }

  class PointMap extends Map {

    byPoint(point) {
      for (const [key, value] of this) {
        if (point.is_nearest(key)) {
          return value.length > 2 && value;
        }
      }
    }
  }

  class Contour extends AbstractFilling(paper.Layer) {

    constructor(attr) {

      super({ parent: attr.parent });

      this._attr = {};

      const { ox, l_connective } = this.project;

      if (attr.row) {
        this._row = attr.row;
      } else {
        const { constructions } = ox;
        this._row = constructions.add({ parent: attr.parent ? attr.parent.cnstr : 0 });
        this._row.cnstr = constructions.aggregate([], ['cnstr'], 'MAX') + 1;
      }

      const { cnstr } = this;
      if (cnstr) {

        const { coordinates } = ox;

        coordinates.find_rows({ cnstr, elm_type: { in: $p.enm.elm_types.profiles } }, row => new Profile({ row, parent: this }));

        coordinates.find_rows({ cnstr, elm_type: { in: $p.enm.elm_types.glasses } }, row => new Filling({ row, parent: this }));

        coordinates.find_rows({ cnstr, elm_type: $p.enm.elm_types.Водоотлив }, row => new Sectional({ row, parent: this }));

        coordinates.find_rows({ cnstr, elm_type: $p.enm.elm_types.Текст }, row => new FreeText({ row, parent: this.l_text }));
      }

      l_connective.bringToFront();
    }

    activate(custom) {
      this.project._activeLayer = this;
      if (this._row) {
        this.notify(this, 'layer_activated', !custom);
        this.project.register_update();
      }
    }

    get area() {
      return (this.bounds.area / 1e6).round(3);
    }

    get form_area() {
      let upath;
      this.glasses(false, true).concat(this.profiles).forEach(({ path }) => {
        if (upath) {
          upath = upath.unite(path, { insert: false });
        } else {
          upath = path.clone({ insert: false });
        }
      });
      return (upath.area / 1e6).round(3);
    }

    get furn() {
      return this._row.furn;
    }

    set furn(v) {
      if (this._row.furn == v) {
        return;
      }

      this._row.furn = v;

      if (this.direction.empty()) {
        this.project._dp.sys.furn_params.find_rows({
          param: $p.job_prm.properties.direction
        }, function (row) {
          this.direction = row.value;
          return false;
        }.bind(this._row));
      }

      this._row.furn.refill_prm(this);

      this.project.register_change(true);

      this.notify(this, 'furn_changed');
    }

    glasses(hide, glass_only) {
      return this.children.filter(elm => {
        if (!glass_only && elm instanceof Contour || elm instanceof Filling) {
          if (hide) {
            elm.visible = false;
          }
          return true;
        }
      });
    }

    get fillings() {
      const fillings = [];
      for (const glass of this.glasses()) {
        if (glass instanceof Contour) {
          fillings.push.apply(fillings, glass.fillings);
        } else {
          fillings.push(glass);
        }
      }
      return fillings;
    }

    get glass_contours() {
      const segments = this.glass_segments;
      const nodes = this.count_nodes();
      const res = [];
      let curr, acurr;

      function find_next(curr) {
        if (!curr.anext) {
          curr.anext = [];
          segments.forEach(segm => {
            if (segm == curr || segm.profile == curr.profile) return;
            if (curr.has_cnn(segm, nodes, segments)) {

              if (segments.length < 3 || curr.e.subtract(curr.b).getDirectedAngle(segm.e.subtract(segm.b)) >= 0) curr.anext.push(segm);
            }
          });
        }
        return curr.anext;
      }

      function go_go(segm) {
        const anext = find_next(segm);
        for (const next of anext) {
          if (next === curr) {
            return anext;
          } else if (acurr.every(el => el !== next)) {
            acurr.push(next);
            return go_go(next);
          }
        }
      }

      while (segments.length) {

        curr = segments[0];
        acurr = [curr];
        if (go_go(curr) && acurr.length > 1) {
          res.push(acurr);
        }

        acurr.forEach(el => {
          const ind = segments.indexOf(el);
          if (ind != -1) {
            segments.splice(ind, 1);
          }
        });
      }

      return res;
    }

    glass_nodes(path, nodes, bind) {
      const curve_nodes = [];
      const path_nodes = [];
      const ipoint = path.interiorPoint.negate();
      let curve, findedb, findede, d, node1, node2;

      if (!nodes) {
        nodes = this.nodes;
      }

      for (let i in path.curves) {
        curve = path.curves[i];

        let d1 = Infinity;
        let d2 = Infinity;
        nodes.forEach(n => {
          if ((d = n.getDistance(curve.point1, true)) < d1) {
            d1 = d;
            node1 = n;
          }
          if ((d = n.getDistance(curve.point2, true)) < d2) {
            d2 = d;
            node2 = n;
          }
        });

        if (path_nodes.indexOf(node1) == -1) path_nodes.push(node1);
        if (path_nodes.indexOf(node2) == -1) path_nodes.push(node2);

        if (!bind) continue;

        if (node1 == node2) continue;
        findedb = false;
        for (let n in curve_nodes) {
          if (curve_nodes[n].node1 == node1 && curve_nodes[n].node2 == node2) {
            findedb = true;
            break;
          }
        }
        if (!findedb) {
          findedb = this.profile_by_nodes(node1, node2);
          const loc1 = findedb.generatrix.getNearestLocation(node1);
          const loc2 = findedb.generatrix.getNearestLocation(node2);
          if (node1.add(ipoint).getDirectedAngle(node2.add(ipoint)) < 0) curve_nodes.push({
            node1: node2,
            node2: node1,
            profile: findedb,
            out: loc2.index == loc1.index ? loc2.parameter > loc1.parameter : loc2.index > loc1.index
          });else curve_nodes.push({
            node1: node1,
            node2: node2,
            profile: findedb,
            out: loc1.index == loc2.index ? loc1.parameter > loc2.parameter : loc1.index > loc2.index
          });
        }
      }

      this.sort_nodes(curve_nodes);

      return path_nodes;
    }

    glass_recalc() {
      const { glass_contours } = this;
      const glasses = this.glasses(true);
      const binded = new Set();

      function calck_rating(glcontour, glass) {

        const { outer_profiles } = glass;

        let crating = 0;

        if (outer_profiles.length) {
          glcontour.some(cnt => {
            outer_profiles.some(curr => {
              if (cnt.profile == curr.profile && cnt.b.is_nearest(curr.b) && cnt.e.is_nearest(curr.e)) {
                crating++;
                return true;
              }
            });
            if (crating > 2) {
              return true;
            }
          });
        } else {
          const { nodes } = glass;
          glcontour.some(cnt => {
            nodes.some(node => {
              if (cnt.b.is_nearest(node)) {
                crating++;
                return true;
              }
            });
            if (crating > 2) {
              return true;
            }
          });
        }

        return crating;
      }

      glasses.forEach(glass => {
        if (glass.visible) {
          return;
        }
        glass_contours.some(glcontour => {
          if (binded.has(glcontour)) {
            return;
          }
          if (calck_rating(glcontour, glass) > 2) {
            glass.path = glcontour;
            glass.visible = true;
            if (glass instanceof Filling) {
              glass.redraw();
            }
            binded.add(glcontour);
            return true;
          }
        });
      });

      glass_contours.forEach(glcontour => {

        if (binded.has(glcontour)) {
          return;
        }

        let rating = 0,
            glass,
            crating,
            cglass,
            glass_center;

        for (let g in glasses) {

          glass = glasses[g];
          if (glass.visible) {
            continue;
          }

          crating = calck_rating(glcontour, glass);

          if (crating > rating || !cglass) {
            rating = crating;
            cglass = glass;
          }
          if (crating == rating && cglass != glass) {
            if (!glass_center) {
              glass_center = glcontour.reduce((sum, val) => sum.add(val.b), new paper.Point()).divide(glcontour.length);
            }
            if (glass_center.getDistance(glass.bounds.center, true) < glass_center.getDistance(cglass.bounds.center, true)) {
              cglass = glass;
            }
          }
        }

        if (cglass || (cglass = this.getItem({ class: Filling, visible: false }))) {
          cglass.path = glcontour;
          cglass.visible = true;
          if (cglass instanceof Filling) {
            cglass.redraw();
          }
        } else {
          if (glass = this.getItem({ class: Filling })) {} else if (glass = this.project.getItem({ class: Filling })) {} else {}
          cglass = new Filling({ proto: glass, parent: this, path: glcontour });
          cglass.redraw();
        }
      });
    }

    get glass_segments() {
      const nodes = [];

      function fn_sort(a, b) {
        const da = this.getOffsetOf(a.point);
        const db = this.getOffsetOf(b.point);
        if (da < db) {
          return -1;
        } else if (da > db) {
          return 1;
        }
        return 0;
      }

      function push_new(profile, b, e, outer = false) {
        if (b.is_nearest(e, 0)) {
          return;
        }
        for (const segm of nodes) {
          if (segm.profile === profile && segm.b.equals(b) && segm.e.equals(e) && segm.outer == outer) {
            return;
          }
        }
        nodes.push(new GlassSegment(profile, b, e, outer));
      }

      this.profiles.forEach(p => {

        const sort = fn_sort.bind(p.generatrix);

        const ip = p.joined_imposts();
        const pb = p.cnn_point('b');
        const pe = p.cnn_point('e');

        const pbg = pb.is_t && pb.profile.d0 ? pb.profile.generatrix.getNearestPoint(p.b) : p.b;
        const peg = pe.is_t && pe.profile.d0 ? pe.profile.generatrix.getNearestPoint(p.e) : p.e;

        if (ip.inner.length) {

          ip.inner.sort(sort);

          if (!pb.is_i && !pbg.is_nearest(ip.inner[0].point)) {
            push_new(p, pbg, ip.inner[0].point);
          }

          for (let i = 1; i < ip.inner.length; i++) {
            push_new(p, ip.inner[i - 1].point, ip.inner[i].point);
          }

          if (!pe.is_i && !ip.inner[ip.inner.length - 1].point.is_nearest(peg)) {
            push_new(p, ip.inner[ip.inner.length - 1].point, peg);
          }
        }
        if (ip.outer.length) {

          ip.outer.sort(sort);

          if (!pb.is_i && !ip.outer[0].point.is_nearest(pbg)) {
            push_new(p, ip.outer[0].point, pbg, true);
          }

          for (let i = 1; i < ip.outer.length; i++) {
            push_new(p, ip.outer[i].point, ip.outer[i - 1].point, true);
          }

          if (!pe.is_i && !peg.is_nearest(ip.outer[ip.outer.length - 1].point)) {
            push_new(p, peg, ip.outer[ip.outer.length - 1].point, true);
          }
        }

        if (!ip.inner.length) {
          if (!pb.is_i && !pe.is_i) {
            push_new(p, pbg, peg);
          }
        }

        if (!ip.outer.length && (pb.is_cut || pe.is_cut || pb.is_t || pe.is_t)) {
          if (!pb.is_i && !pe.is_i) {
            push_new(p, peg, pbg, true);
          }
        } else if (pb.is_x || pe.is_x) {
          push_new(p, peg, pbg, true);
        }
      });

      return nodes;
    }

    get is_rectangular() {
      const { Импост } = $p.enm.elm_types;
      const outer = this.profiles.filter(v => v.elm_type != Импост);
      return outer.length === 4 && !outer.some(profile => !(profile.is_linear() && Math.abs(profile.angle_hor % 90) < 0.2));
    }

    move(delta) {
      const { contours, profiles, project } = this;
      const crays = p => p.rays.clear();
      this.translate(delta);
      contours.forEach(elm => elm.profiles.forEach(crays));
      profiles.forEach(crays);
      project.register_change();
    }

    get nodes() {
      const nodes = [];
      this.profiles.forEach(p => {
        let findedb;
        let findede;
        nodes.forEach(n => {
          if (p.b.is_nearest(n)) {
            findedb = true;
          }
          if (p.e.is_nearest(n)) {
            findede = true;
          }
        });
        if (!findedb) {
          nodes.push(p.b.clone());
        }
        if (!findede) {
          nodes.push(p.e.clone());
        }
      });
      return nodes;
    }

    count_nodes() {
      const nodes = new PointMap();
      this.profiles.forEach(profile => {
        const { b, e } = profile;
        let findedb;
        let findede;
        for (const [key, value] of nodes) {
          if (b.is_nearest(key)) {
            value.push({ profile, point: 'b' });
            findedb = true;
          }
          if (e.is_nearest(key)) {
            value.push({ profile, point: 'e' });
            findede = true;
          }
        }
        if (!findedb) {
          nodes.set(b.clone(), [{ profile, point: 'b' }]);
        }
        if (!findede) {
          nodes.set(e.clone(), [{ profile, point: 'e' }]);
        }
      });
      return nodes;
    }

    notify(obj, type = 'update') {
      if (obj.type) {
        type = obj.type;
      }
      this.project._scope.eve.emit_async(type, obj);
      type === consts.move_points && this.project.register_change();
    }

    get outer_nodes() {
      return this.outer_profiles.map(v => v.elm);
    }

    get outer_profiles() {
      const { profiles } = this;
      const to_remove = [];
      const res = [];

      let findedb, findede;

      for (let i = 0; i < profiles.length; i++) {
        const elm = profiles[i];
        if (elm._attr.simulated) continue;
        findedb = false;
        findede = false;
        for (let j = 0; j < profiles.length; j++) {
          if (profiles[j] == elm) continue;
          if (!findedb && elm.has_cnn(profiles[j], elm.b) && elm.b.is_nearest(profiles[j].e)) findedb = true;
          if (!findede && elm.has_cnn(profiles[j], elm.e) && elm.e.is_nearest(profiles[j].b)) findede = true;
        }
        if (!findedb || !findede) {
          to_remove.push(elm);
        }
      }
      for (let i = 0; i < profiles.length; i++) {
        const elm = profiles[i];
        if (to_remove.indexOf(elm) != -1) continue;
        elm._attr.binded = false;
        res.push({
          elm: elm,
          profile: elm.nearest(),
          b: elm.b,
          e: elm.e
        });
      }
      return res;
    }

    profile_by_furn_side(side, cache) {

      if (!cache || !cache.profiles) {
        cache = {
          profiles: this.outer_nodes,
          bottom: this.profiles_by_side('bottom')
        };
      }

      const profile_node = this.direction == $p.enm.open_directions.Правое ? 'b' : 'e';
      const other_node = profile_node == 'b' ? 'e' : 'b';

      let profile = cache.bottom;

      const next = () => {
        side--;
        if (side <= 0) {
          return profile;
        }

        cache.profiles.some(curr => {
          if (curr[other_node].is_nearest(profile[profile_node])) {
            profile = curr;
            return true;
          }
        });

        return next();
      };

      return next();
    }

    profile_by_nodes(n1, n2, point) {
      const profiles = this.profiles;
      for (let i = 0; i < profiles.length; i++) {
        const { generatrix } = profiles[i];
        if (generatrix.getNearestPoint(n1).is_nearest(n1) && generatrix.getNearestPoint(n2).is_nearest(n2)) {
          if (!point || generatrix.getNearestPoint(point).is_nearest(point)) return profiles[i];
        }
      }
    }

    remove() {
      const { children, _row, cnstr } = this;
      while (children.length) {
        children[0].remove();
      }

      if (_row) {
        const { ox } = this.project;
        ox.coordinates.clear({ cnstr });
        ox.params.clear({ cnstr });

        if (ox === _row._owner._owner) {
          _row._owner.del(_row);
        }
        this._row = null;
      }

      super.remove();
    }

    get _manager() {
      return this.project._dp._manager;
    }

    _metadata(fld) {

      const { tabular_sections } = this.project.ox._metadata();
      const { fields } = tabular_sections.constructions;

      return fld ? fields[fld] || tabular_sections[fld] : {
        fields: {
          furn: fields.furn,
          direction: fields.direction,
          h_ruch: fields.h_ruch
        },
        tabular_sections: {
          params: tabular_sections.params
        }
      };
    }

    get bounds() {
      const { _attr, parent } = this;
      if (!_attr._bounds || !_attr._bounds.width || !_attr._bounds.height) {

        this.profiles.forEach(profile => {
          const path = profile.path && profile.path.segments.length ? profile.path : profile.generatrix;
          if (path) {
            _attr._bounds = _attr._bounds ? _attr._bounds.unite(path.bounds) : path.bounds;
            if (!parent) {
              const { d0 } = profile;
              if (d0) {
                _attr._bounds = _attr._bounds.unite(profile.generatrix.bounds);
              }
            }
          }
        });
        this.sectionals.forEach(sectional => {
          _attr._bounds = _attr._bounds ? _attr._bounds.unite(sectional.bounds) : sectional.bounds;
        });

        if (!_attr._bounds) {
          _attr._bounds = new paper.Rectangle();
        }
      }
      return _attr._bounds;
    }

    get cnstr() {
      return this._row ? this._row.cnstr : 0;
    }

    set cnstr(v) {
      this._row && (this._row.cnstr = v);
    }

    get dimension_bounds() {
      let bounds = super.dimension_bounds;
      const ib = this.l_visualization._by_insets.bounds;
      if (ib.height && ib.bottom > bounds.bottom) {
        const delta = ib.bottom - bounds.bottom + 10;
        bounds = bounds.unite(new paper.Rectangle(bounds.bottomLeft, bounds.bottomRight.add([0, delta < 250 ? delta * 1.1 : delta * 1.2])));
      }
      return bounds;
    }

    get direction() {
      return this._row.direction;
    }

    set direction(v) {
      this._row.direction = v;
      this.project.register_change(true);
    }

    zoom_fit() {
      this.project.zoom_fit.call(this, null, true);
    }

    draw_cnn_errors() {

      const { l_visualization } = this;

      if (l_visualization._cnn) {
        l_visualization._cnn.removeChildren();
      } else {
        l_visualization._cnn = new paper.Group({ parent: l_visualization });
      }

      const err_attrs = {
        strokeColor: 'red',
        strokeWidth: 2,
        strokeCap: 'round',
        strokeScaling: false,
        dashOffset: 4,
        dashArray: [4, 4],
        guide: true,
        parent: l_visualization._cnn
      };

      this.glasses(false, true).forEach(glass => {
        let err;
        glass.profiles.forEach(({ cnn, sub_path }) => {
          if (!cnn) {
            Object.assign(sub_path, err_attrs);
            err = true;
          }
        });
        if (err || glass.path.is_self_intersected()) {
          glass.fill_error();
        } else {
          const { form_area, inset: { smin, smax } } = glass;
          if (smin && smin > form_area || smax && smax < form_area) {
            glass.fill_error();
          } else {
            glass.path.fillColor = BuilderElement.clr_by_clr.call(glass, glass._row.clr, false);
          }
        }
        glass.imposts.forEach(impost => {
          if (impost instanceof Onlay) {
            const { b, e } = impost._attr._rays;
            const oerr_attrs = Object.assign({ radius: 50 }, err_attrs);
            b.check_err(oerr_attrs);
            e.check_err(oerr_attrs);
          }
        });
      });

      this.profiles.forEach(elm => {
        const { _corns, _rays } = elm._attr;
        _rays.b.check_err(err_attrs);
        _rays.e.check_err(err_attrs);
        if (elm.nearest() && (!elm._attr._nearest_cnn || elm._attr._nearest_cnn.empty())) {
          Object.assign(elm.path.get_subpath(_corns[1], _corns[2]), err_attrs);
        }
        elm.addls.forEach(elm => {
          if (elm.nearest() && (!elm._attr._nearest_cnn || elm._attr._nearest_cnn.empty())) {
            Object.assign(elm.path.get_subpath(_corns[1], _corns[2]), err_attrs);
          }
        });
      });
    }

    draw_mosquito() {
      const { l_visualization, project } = this;
      if (project.builder_props.mosquito === false) {
        return;
      }
      project.ox.inserts.find_rows({ cnstr: this.cnstr }, row => {
        if (row.inset.insert_type == $p.enm.inserts_types.МоскитнаяСетка) {
          const props = {
            parent: new paper.Group({ parent: l_visualization._by_insets }),
            strokeColor: 'grey',
            strokeWidth: 3,
            dashArray: [6, 4],
            strokeScaling: false
          };
          let sz, imposts;
          row.inset.specification.forEach(rspec => {
            if (!sz && rspec.count_calc_method == $p.enm.count_calculating_ways.ПоПериметру && rspec.nom.elm_type == $p.enm.elm_types.Рама) {
              sz = rspec.sz;
            }
            if (!imposts && rspec.count_calc_method == $p.enm.count_calculating_ways.ПоШагам && rspec.nom.elm_type == $p.enm.elm_types.Импост) {
              imposts = rspec;
            }
          });

          const perimetr = [];
          if (typeof sz != 'number') {
            sz = 20;
          }
          this.outer_profiles.forEach(curr => {
            const profile = curr.profile || curr.elm;
            const is_outer = Math.abs(profile.angle_hor - curr.elm.angle_hor) > 60;
            const ray = is_outer ? profile.rays.outer : profile.rays.inner;
            const segm = ray.get_subpath(curr.b, curr.e).equidistant(sz);
            perimetr.push(Object.assign(segm, props));
          });

          const count = perimetr.length - 1;
          perimetr.forEach((curr, index) => {
            const prev = index == 0 ? perimetr[count] : perimetr[index - 1];
            const next = index == count ? perimetr[0] : perimetr[index + 1];
            const b = curr.getIntersections(prev);
            const e = curr.getIntersections(next);
            if (b.length) {
              curr.firstSegment.point = b[0].point;
            }
            if (e.length) {
              curr.lastSegment.point = e[0].point;
            }
          });

          const { elm_font_size } = consts;
          const { bounds } = props.parent;
          new paper.PointText({
            parent: props.parent,
            fillColor: 'black',
            fontFamily: consts.font_family,
            fontSize: consts.elm_font_size,
            guide: true,
            content: row.inset.presentation,
            point: bounds.bottomLeft.add([elm_font_size * 1.2, -elm_font_size * 0.4])
          });

          if (imposts) {
            const { offsets, do_center, step } = imposts;
            const add_impost = function (y) {
              const impost = Object.assign(new paper.Path({
                insert: false,
                segments: [[bounds.left, y], [bounds.right, y]]
              }), props);
              const { length } = impost;
              perimetr.forEach(curr => {
                const aloc = curr.getIntersections(impost);
                if (aloc.length) {
                  const l1 = impost.firstSegment.point.getDistance(aloc[0].point);
                  const l2 = impost.lastSegment.point.getDistance(aloc[0].point);
                  if (l1 < length / 2) {
                    impost.firstSegment.point = aloc[0].point;
                  }
                  if (l2 < length / 2) {
                    impost.lastSegment.point = aloc[0].point;
                  }
                }
              });
            };

            if (step) {
              const height = bounds.height - offsets;
              if (height >= step) {
                if (do_center) {
                  add_impost(bounds.centerY);
                } else {
                  for (let y = step; y < height; y += step) {
                    add_impost(y);
                  }
                }
              }
            }
          }

          return false;
        }
      });
    }

    draw_sill() {
      const { l_visualization, project, cnstr } = this;
      const { ox } = project;
      const { properties } = $p.job_prm;
      if (!properties) {
        return;
      }
      const { length, width } = properties;

      ox.inserts.find_rows({ cnstr }, row => {
        if (row.inset.insert_type == $p.enm.inserts_types.Подоконник) {

          const bottom = this.profiles_by_side('bottom');
          let vlen, vwidth;
          ox.params.find_rows({ cnstr: cnstr, inset: row.inset }, prow => {
            if (prow.param == length) {
              vlen = prow.value;
            }
            if (prow.param == width) {
              vwidth = prow.value;
            }
          });
          if (!vlen) {
            vlen = bottom.length + 160;
          }
          if (vwidth) {
            vwidth = vwidth * 0.7;
          } else {
            vwidth = 200;
          }
          const delta = (vlen - bottom.length) / 2;

          new paper.Path({
            parent: new paper.Group({ parent: l_visualization._by_insets }),
            strokeColor: 'grey',
            fillColor: BuilderElement.clr_by_clr(row.clr),
            shadowColor: 'grey',
            shadowBlur: 20,
            shadowOffset: [10, 20],
            opacity: 0.7,
            strokeWidth: 1,
            strokeScaling: false,
            closed: true,
            segments: [bottom.b.add([delta, 0]), bottom.e.add([-delta, 0]), bottom.e.add([-delta - vwidth, vwidth]), bottom.b.add([delta - vwidth, vwidth])]
          });

          return false;
        }
      });
    }

    draw_opening() {

      const _contour = this;
      const { l_visualization, furn } = this;

      if (!this.parent || !$p.enm.open_types.is_opening(furn.open_type)) {
        if (l_visualization._opening && l_visualization._opening.visible) l_visualization._opening.visible = false;
        return;
      }

      const cache = {
        profiles: this.outer_nodes,
        bottom: this.profiles_by_side('bottom')
      };

      function rotary_folding() {

        const { _opening } = l_visualization;
        const { side_count } = _contour;

        furn.open_tunes.forEach(row => {

          if (row.rotation_axis) {
            const axis = _contour.profile_by_furn_side(row.side, cache);
            const other = _contour.profile_by_furn_side(row.side + 2 <= side_count ? row.side + 2 : row.side - 2, cache);

            _opening.moveTo(axis.corns(3));
            _opening.lineTo(other.rays.inner.getPointAt(other.rays.inner.length / 2));
            _opening.lineTo(axis.corns(4));
          }
        });
      }

      function sliding() {
        const { center } = _contour.bounds;
        const { _opening } = l_visualization;

        if (_contour.direction == $p.enm.open_directions.Правое) {
          _opening.moveTo(center.add([-100, 0]));
          _opening.lineTo(center.add([100, 0]));
          _opening.moveTo(center.add([30, 30]));
          _opening.lineTo(center.add([100, 0]));
          _opening.lineTo(center.add([30, -30]));
        } else {
          _opening.moveTo(center.add([100, 0]));
          _opening.lineTo(center.add([-100, 0]));
          _opening.moveTo(center.add([-30, 30]));
          _opening.lineTo(center.add([-100, 0]));
          _opening.lineTo(center.add([-30, -30]));
        }
      }

      if (!l_visualization._opening) {
        l_visualization._opening = new paper.CompoundPath({
          parent: _contour.l_visualization,
          strokeColor: 'black'
        });
      } else {
        l_visualization._opening.removeChildren();
      }

      return furn.is_sliding ? sliding() : rotary_folding();
    }

    draw_visualization(rows) {

      const { profiles, l_visualization, contours } = this;
      const glasses = this.glasses(false, true);
      l_visualization._by_spec.removeChildren();

      if (!rows) {
        rows = [];
        this.project.ox.specification.find_rows({ dop: -1 }, row => rows.push(row));
      }

      for (const row of rows) {
        if (!profiles.some(elm => {
          if (row.elm == elm.elm) {
            row.nom.visualization.draw(elm, l_visualization, row.len * 1000);
            return true;
          }
        })) {
          glasses.some(elm => {
            if (row.elm == elm.elm) {
              row.nom.visualization.draw(elm, l_visualization, row.len * 1000, row.width * 1000);
              return true;
            }
          });
        }
      }

      for (const contour of contours) {
        contour.draw_visualization(rows);
      }
    }

    get hidden() {
      return !!this._hidden;
    }

    set hidden(v) {
      if (this.hidden != v) {
        this._hidden = v;
        const visible = !this._hidden;
        this.children.forEach(elm => {
          if (elm instanceof BuilderElement) {
            elm.visible = visible;
          }
        });
        this.l_visualization.visible = visible;
        this.l_dimensions.visible = visible;
      }
    }

    hide_generatrix() {
      this.profiles.forEach(elm => {
        elm.generatrix.visible = false;
      });
    }

    get imposts() {
      return this.getItems({ class: Profile }).filter(elm => {
        const { b, e } = elm.rays;
        return b.is_tt || e.is_tt || b.is_i || e.is_i;
      });
    }

    get params() {
      return this.project.ox.params;
    }

    get path() {
      return this.bounds;
    }

    set path(attr) {
      if (!Array.isArray(attr)) {
        return;
      }

      const noti = { type: consts.move_points, profiles: [], points: [] };
      const { outer_nodes } = this;

      let need_bind = attr.length,
          available_bind = outer_nodes.length,
          elm,
          curr;

      function set_node(n) {
        if (!curr[n].is_nearest(elm[n], 0)) {
          elm.rays.clear(true);
          elm[n] = curr[n];
          if (noti.profiles.indexOf(elm) == -1) {
            noti.profiles.push(elm);
          }
          if (!noti.points.some(point => point.is_nearest(elm[n], 0))) {
            noti.points.push(elm[n]);
          }
        }
      }

      if (need_bind) {
        for (let i = 0; i < attr.length; i++) {
          curr = attr[i];
          for (let j = 0; j < outer_nodes.length; j++) {
            elm = outer_nodes[j];
            if (elm._attr.binded) {
              continue;
            }
            if (curr.profile.is_nearest(elm)) {
              elm._attr.binded = true;
              curr.binded = true;
              need_bind--;
              available_bind--;

              set_node('b');
              set_node('e');

              break;
            }
          }
        }
      }

      if (need_bind) {
        for (let i = 0; i < attr.length; i++) {
          curr = attr[i];
          if (curr.binded) continue;
          for (let j = 0; j < outer_nodes.length; j++) {
            elm = outer_nodes[j];
            if (elm._attr.binded) continue;
            if (curr.b.is_nearest(elm.b, true) || curr.e.is_nearest(elm.e, true)) {
              elm._attr.binded = true;
              curr.binded = true;
              need_bind--;
              available_bind--;

              set_node('b');
              set_node('e');

              break;
            }
          }
        }
      }

      if (need_bind && available_bind) {
        for (let i = 0; i < attr.length; i++) {
          curr = attr[i];
          if (curr.binded) continue;
          for (let j = 0; j < outer_nodes.length; j++) {
            elm = outer_nodes[j];
            if (elm._attr.binded) continue;
            elm._attr.binded = true;
            curr.binded = true;
            need_bind--;
            available_bind--;

            set_node('b');
            set_node('e');

            break;
          }
        }
      }

      if (need_bind) {
        for (let i = 0; i < attr.length; i++) {
          curr = attr[i];
          if (curr.binded) {
            continue;
          }
          elm = new Profile({
            generatrix: curr.profile.generatrix.get_subpath(curr.b, curr.e),
            proto: outer_nodes.length ? outer_nodes[0] : { parent: this, clr: curr.profile.clr }
          });
          elm._attr._nearest = curr.profile;
          elm._attr.binded = true;
          elm._attr.simulated = true;

          curr.profile = elm;
          delete curr.outer;
          curr.binded = true;

          noti.profiles.push(elm);
          noti.points.push(elm.b);
          noti.points.push(elm.e);

          need_bind--;
        }
      }

      if (available_bind) {
        outer_nodes.forEach(elm => {
          if (!elm._attr.binded) {
            elm.rays.clear(true);
            elm.remove();
            available_bind--;
          }
        });
      }

      this.profiles.forEach(p => p.default_inset());

      if (noti.points.length) {
        this.profiles.forEach(p => p._attr._rays && p._attr._rays.clear());
        this.notify(noti);
      }

      this._attr._bounds = null;
    }

    get perimeter() {
      const res = [];
      this.outer_profiles.forEach(curr => {
        const tmp = curr.sub_path ? {
          len: curr.sub_path.length,
          angle: curr.e.subtract(curr.b).angle
        } : {
          len: curr.elm.length,
          angle: curr.elm.angle_hor
        };
        res.push(tmp);
        if (tmp.angle < 0) {
          tmp.angle += 360;
        }
        tmp.angle_hor = tmp.angle;
        tmp.profile = curr.profile || curr.elm;
      });
      return res;
    }

    perimeter_inner(size) {
      const { center } = this.bounds;
      const res = this.outer_profiles.map(curr => {
        const profile = curr.profile || curr.elm;
        const { inner, outer } = profile.rays;
        const sub_path = inner.getNearestPoint(center).getDistance(center, true) < outer.getNearestPoint(center).getDistance(center, true) ? inner.get_subpath(inner.getNearestPoint(curr.b), inner.getNearestPoint(curr.e)) : outer.get_subpath(outer.getNearestPoint(curr.b), outer.getNearestPoint(curr.e));
        let angle = curr.e.subtract(curr.b).angle.round(1);
        if (angle < 0) angle += 360;
        return {
          profile,
          sub_path,
          angle,
          b: curr.b,
          e: curr.e
        };
      });
      const ubound = res.length - 1;
      return res.map((curr, index) => {
        let sub_path = curr.sub_path.equidistant(size);
        const prev = !index ? res[ubound] : res[index - 1];
        const next = index == ubound ? res[0] : res[index + 1];
        const b = sub_path.intersect_point(prev.sub_path.equidistant(size), curr.b, true);
        const e = sub_path.intersect_point(next.sub_path.equidistant(size), curr.e, true);
        if (b && e) {
          sub_path = sub_path.get_subpath(b, e);
        }
        return {
          profile: curr.profile,
          angle: curr.angle,
          len: sub_path.length,
          sub_path
        };
      });
    }

    bounds_inner(size) {
      const path = new paper.Path({ insert: false });
      for (let curr of this.perimeter_inner(size)) {
        path.addSegments(curr.sub_path.segments);
      }
      if (path.segments.length && !path.closed) {
        path.closePath(true);
      }
      path.reduce();
      return path.bounds;
    }

    get pos() {}

    get profiles() {
      return this.children.filter(elm => elm instanceof Profile);
    }

    get sectionals() {
      return this.children.filter(elm => elm instanceof Sectional);
    }

    get onlays() {
      const res = [];
      this.fillings.forEach(filling => {
        filling.children.forEach(elm => elm instanceof Onlay && res.push(elm));
      });
      return res;
    }

    redraw(on_redrawed) {

      if (!this.visible) {
        return;
      }

      this._attr._bounds = null;

      const { l_visualization } = this;

      l_visualization._by_insets.removeChildren();
      !this.project._attr._saving && l_visualization._by_spec.removeChildren();

      this.profiles.forEach(elm => elm.redraw());

      this.glass_recalc();

      this.draw_opening();

      this.contours.forEach(elm => elm.redraw());

      this.draw_cnn_errors();

      this.draw_mosquito();

      this.draw_sill();

      this.sectionals.forEach(elm => elm.redraw());

      this.notify(this, 'contour_redrawed', this._attr._bounds);
    }

    refresh_prm_links(root) {

      const cnstr = root ? 0 : this.cnstr || -9999;
      let notify;

      this.params.find_rows({
        cnstr,
        inset: $p.utils.blank.guid
      }, prow => {
        const { param } = prow;
        const links = param.params_links({ grid: { selection: { cnstr } }, obj: prow });
        const hide = links.some(link => link.hide);

        if (links.length && param.linked_values(links, prow)) {
          notify = true;
        }
        if (prow.hide !== hide) {
          prow.hide = hide;
          notify = true;
        }
      });

      if (notify) {
        this.notify(this, 'refresh_prm_links');
        if (root) {
          const { _dp } = this.project;
          _dp._manager.emit_async('rows', _dp, { extra_fields: true });
        }
      };
    }

    save_coordinates(short) {

      if (!short) {
        this.glasses(false, true).forEach(glass => !glass.visible && glass.remove());

        const { l_text, l_dimensions } = this;
        for (let elm of this.children) {
          if (elm.save_coordinates) {
            elm.save_coordinates();
          } else if (elm == l_text || elm == l_dimensions) {
            elm.children.forEach(elm => elm.save_coordinates && elm.save_coordinates());
          }
        }
      }

      const { bounds } = this;
      this._row.x = bounds ? bounds.width.round(4) : 0;
      this._row.y = bounds ? bounds.height.round(4) : 0;
      this._row.is_rectangular = this.is_rectangular;
      if (this.parent) {
        this._row.w = this.w.round(4);
        this._row.h = this.h.round(4);
      } else {
        this._row.w = 0;
        this._row.h = 0;
      }
    }

    sort_nodes(nodes) {
      if (!nodes.length) {
        return nodes;
      }
      let prev = nodes[0];
      const res = [prev];
      let couner = nodes.length + 1;

      while (res.length < nodes.length && couner) {
        couner--;
        for (let i = 0; i < nodes.length; i++) {
          const curr = nodes[i];
          if (res.indexOf(curr) != -1) continue;
          if (prev.node2 == curr.node1) {
            res.push(curr);
            prev = curr;
            break;
          }
        }
      }
      if (couner) {
        nodes.length = 0;
        for (let i = 0; i < res.length; i++) {
          nodes.push(res[i]);
        }
        res.length = 0;
      }
    }

    get furn_cache() {
      return {
        profiles: this.outer_nodes,
        bottom: this.profiles_by_side('bottom'),
        ox: this.project.ox,
        w: this.w,
        h: this.h
      };
    }

    handle_line(elm) {

      const { bounds, h_ruch } = this;
      const by_side = this.profiles_by_side();
      return elm == by_side.top || elm == by_side.bottom ? new paper.Path({
        insert: false,
        segments: [[bounds.left + h_ruch, bounds.top - 200], [bounds.left + h_ruch, bounds.bottom + 200]]
      }) : new paper.Path({
        insert: false,
        segments: [[bounds.left - 200, bounds.bottom - h_ruch], [bounds.right + 200, bounds.bottom - h_ruch]]
      });
    }

    update_handle_height(cache, from_setter) {

      const { furn, _row, project } = this;
      const { furn_set, handle_side } = furn;
      if (!handle_side || furn_set.empty()) {
        return;
      }

      if (!cache) {
        cache = this.furn_cache;
        cache.ignore_formulas = true;
      }

      const elm = this.profile_by_furn_side(handle_side, cache);
      if (!elm) {
        return;
      }

      const { len } = elm._row;
      let handle_height;

      function set_handle_height(row) {
        const { handle_height_base, fix_ruch } = row;
        if (handle_height_base < 0) {
          if (fix_ruch || _row.fix_ruch != -3) {
            _row.fix_ruch = fix_ruch ? -2 : -1;
            return handle_height = (len / 2).round();
          }
        } else if (handle_height_base > 0) {
          if (fix_ruch || _row.fix_ruch != -3) {
            _row.fix_ruch = fix_ruch ? -2 : -1;
            return handle_height = handle_height_base;
          }
        }
      }

      furn.furn_set.specification.find_rows({ dop: 0 }, row => {

        if (!row.quantity || !row.check_restrictions(this, cache)) {
          return;
        }
        if (set_handle_height(row)) {
          return false;
        }
        const { nom } = row;
        if (nom && row.is_set_row) {
          let ok = false;
          nom.get_spec(this, cache, true).each(sub_row => {
            if (set_handle_height(sub_row)) {
              return !(ok = true);
            }
          });
          if (ok) {
            return false;
          }
        }
      });

      if (handle_height && !from_setter && _row.h_ruch != handle_height) {
        _row.h_ruch = handle_height;
        project._dp._manager.emit('update', this, { h_ruch: true });
      }
      return handle_height;
    }

    get h_ruch() {
      const { layer, _row } = this;
      return layer ? _row.h_ruch : 0;
    }

    set h_ruch(v) {
      const { layer, _row, project } = this;

      if (layer) {
        const old_fix_ruch = _row.fix_ruch;
        if (old_fix_ruch == -3) {
          _row.fix_ruch = -1;
        }
        const h_ruch = this.update_handle_height(null, true);
        if (h_ruch && (old_fix_ruch != -3 || v == 0)) {
          _row.h_ruch = h_ruch;
        }

        if (v != 0 && [0, -1, -3].indexOf(_row.fix_ruch) != -1) {
          _row.h_ruch = v;
          if (_row.fix_ruch == -1 && v != h_ruch) {
            _row.fix_ruch = -3;
          }
        }
        project.register_change();
      } else {
        _row.h_ruch = 0;
      }
      project._dp._manager.emit('update', this, { h_ruch: true });
    }

    get side_count() {
      const { Импост } = $p.enm.elm_types;
      let res = 0;
      this.profiles.forEach(v => v.elm_type != Импост && res++);
      return res;
    }

    get w() {
      const { is_rectangular, bounds } = this;
      const { left, right } = this.profiles_by_side();
      return bounds && left && right ? bounds.width - left.nom.sizefurn - right.nom.sizefurn : 0;
    }

    get h() {
      const { is_rectangular, bounds } = this;
      const { top, bottom } = this.profiles_by_side();
      return bounds && top && bottom ? bounds.height - top.nom.sizefurn - bottom.nom.sizefurn : 0;
    }

    get l_text() {
      const { _attr } = this;
      return _attr._txt || (_attr._txt = new paper.Group({ parent: this }));
    }

    get l_visualization() {
      const { _attr } = this;
      if (!_attr._visl) {
        _attr._visl = new paper.Group({ parent: this, guide: true });
        _attr._visl._by_insets = new paper.Group({ parent: _attr._visl });
        _attr._visl._by_spec = new paper.Group({ parent: _attr._visl });
      }
      return _attr._visl;
    }

    get opacity() {
      return this.children.length ? this.children[0].opacity : 1;
    }

    set opacity(v) {
      this.children.forEach(elm => {
        if (elm instanceof BuilderElement) elm.opacity = v;
      });
    }

    on_remove_elm(elm) {
      if (this.parent) {
        this.parent.on_remove_elm(elm);
      }
      if (elm instanceof Profile && !this.project._attr._loading) {
        this.l_dimensions.clear();
      }
    }

    on_insert_elm(elm) {
      if (this.parent) {
        this.parent.on_remove_elm(elm);
      }
      if (elm instanceof Profile && !this.project._attr._loading) {
        this.l_dimensions.clear();
      }
    }

    on_sys_changed() {
      this.profiles.forEach(elm => elm.default_inset(true));

      this.glasses().forEach(elm => {
        if (elm instanceof Contour) {
          elm.on_sys_changed();
        } else {
          if (elm.thickness < elm.project._dp.sys.tmin || elm.thickness > elm.project._dp.sys.tmax) elm._row.inset = elm.project.default_inset({ elm_type: [$p.enm.elm_types.Стекло, $p.enm.elm_types.Заполнение] });
          elm.profiles.forEach(curr => {
            if (!curr.cnn || !curr.cnn.check_nom2(curr.profile)) curr.cnn = $p.cat.cnns.elm_cnn(elm, curr.profile, $p.enm.cnn_types.acn.ii);
          });
        }
      });
    }

  }

  EditorInvisible.Contour = Contour;

  class DimensionGroup {

    clear() {
      for (let key in this) {
        this[key].removeChildren();
        this[key].remove();
        delete this[key];
      }
    }

    has_size(size) {
      for (let key in this) {
        const { path } = this[key];
        if (path && Math.abs(path.length - size) < 1) {
          return true;
        }
      }
    }

  }

  class DimensionLayer extends paper.Layer {

    get bounds() {
      return this.project.bounds;
    }

    get owner_bounds() {
      return this.bounds;
    }

    get dimension_bounds() {
      return this.project.dimension_bounds;
    }

  }

  class DimensionDrawer extends paper.Group {

    constructor(attr) {
      super(attr);
      this.bringToFront();
    }

    clear() {

      this.ihor && this.ihor.clear();
      this.ivert && this.ivert.clear();

      for (let pos of ['bottom', 'top', 'right', 'left']) {
        if (this[pos]) {
          this[pos].removeChildren();
          this[pos].remove();
          this[pos] = null;
        }
      }

      this.layer && this.layer.parent && this.layer.parent.l_dimensions.clear();
    }

    redraw(forse) {

      const { parent, project: { builder_props } } = this;

      if (forse || !builder_props.auto_lines) {
        this.clear();
      }

      for (let chld of parent.contours) {
        chld.l_dimensions.redraw();
      }

      if (builder_props.auto_lines && (!parent.parent || forse)) {

        const { ihor, ivert, by_side } = this.imposts();
        if (!Object.keys(by_side).length) {
          return this.clear();
        }

        const profiles = new Set(parent.profiles);
        parent.imposts.forEach(elm => elm.visible && profiles.add(elm));

        for (let elm of profiles) {

          const our = !elm.parent || elm.parent === parent;
          const eb = our ? elm instanceof GlassSegment ? elm._sub.b : elm.b : elm.rays.b.npoint;
          const ee = our ? elm instanceof GlassSegment ? elm._sub.e : elm.e : elm.rays.e.npoint;

          if (ihor.every(v => v.point != eb.y.round())) {
            ihor.push({
              point: eb.y.round(),
              elm: elm,
              p: 'b'
            });
          }
          if (ihor.every(v => v.point != ee.y.round())) {
            ihor.push({
              point: ee.y.round(),
              elm: elm,
              p: 'e'
            });
          }
          if (ivert.every(v => v.point != eb.x.round())) {
            ivert.push({
              point: eb.x.round(),
              elm: elm,
              p: 'b'
            });
          }
          if (ivert.every(v => v.point != ee.x.round())) {
            ivert.push({
              point: ee.x.round(),
              elm: elm,
              p: 'e'
            });
          }
        }

        if (ihor.length > 2) {
          ihor.sort((a, b) => b.point - a.point);
          if (parent.is_pos('right')) {
            this.by_imposts(ihor, this.ihor, 'right');
          } else if (parent.is_pos('left')) {
            this.by_imposts(ihor, this.ihor, 'left');
          }
        } else {
          ihor.length = 0;
        }

        if (ivert.length > 2) {
          ivert.sort((a, b) => a.point - b.point);
          if (parent.is_pos('bottom')) {
            this.by_imposts(ivert, this.ivert, 'bottom');
          } else if (parent.is_pos('top')) {
            this.by_imposts(ivert, this.ivert, 'top');
          }
        } else {
          ivert.length = 0;
        }

        this.by_contour(ihor, ivert, forse);
      }

      for (let dl of this.children) {
        dl.redraw && dl.redraw();
      }
    }

    draw_by_imposts() {

      const { parent, project: { builder_props } } = this;

      this.clear();

      let index = 0;
      for (let elm of parent.profiles) {

        const { inner, outer } = elm.joined_imposts();
        const { generatrix, angle_hor } = elm;
        generatrix.visible = false;
        const imposts = inner.concat(outer);
        if (!imposts.length) {
          continue;
        }
        elm.mark_direction();
        let invert = angle_hor > 135 && angle_hor < 315;
        for (const impost of imposts) {
          const { point, profile: { rays, nom } } = impost;
          const pi = generatrix.intersect_point(rays.inner, point);
          const po = generatrix.intersect_point(rays.outer, point);
          const dx = generatrix.getOffsetOf(point);
          const dxi = generatrix.getOffsetOf(pi);
          const dxo = generatrix.getOffsetOf(po);
          let dx1, dx2;
          if (dx > dxi) {
            dx1 = dxi + nom.sizefaltz;
            dx2 = dxo - nom.sizefaltz;
          } else {
            dx1 = dxo + nom.sizefaltz;
            dx2 = dxi - nom.sizefaltz;
          }

          this.ihor[`i${++index}`] = new DimensionLineImpost({
            elm1: elm,
            elm2: elm,
            p1: invert ? dx : 'b',
            p2: invert ? 'b' : dx,
            dx1,
            dx2,
            parent: this,
            offset: invert ? -150 : 150,
            outer: outer.indexOf(impost) !== -1
          });
        }
      }

      this.by_contour([], [], true);

      for (let dl of this.children) {
        dl.redraw && dl.redraw();
      }
    }

    by_imposts(arr, collection, pos) {
      const offset = pos == 'right' || pos == 'bottom' ? -130 : 90;
      for (let i = 0; i < arr.length - 1; i++) {
        if (!collection[i]) {
          collection[i] = new DimensionLine({
            pos: pos,
            elm1: arr[i].elm instanceof GlassSegment ? arr[i].elm._sub : arr[i].elm,
            p1: arr[i].p,
            elm2: arr[i + 1].elm instanceof GlassSegment ? arr[i + 1].elm._sub : arr[i + 1].elm,
            p2: arr[i + 1].p,
            parent: this,
            offset: offset,
            impost: true
          });
        }
      }
    }

    by_contour(ihor, ivert, forse) {

      const { project, parent } = this;
      const { bounds } = parent;

      if (project.contours.length > 1 || forse) {

        if (parent.is_pos('left') && !parent.is_pos('right') && project.bounds.height != bounds.height) {
          if (!this.ihor.has_size(bounds.height)) {
            if (!this.left) {
              this.left = new DimensionLine({
                pos: 'left',
                parent: this,
                offset: ihor.length > 2 ? 220 : 90,
                contour: true
              });
            } else {
              this.left.offset = ihor.length > 2 ? 220 : 90;
            }
          }
        } else {
          if (this.left) {
            this.left.remove();
            this.left = null;
          }
        }

        if (parent.is_pos('right') && (project.bounds.height != bounds.height || forse)) {
          if (!this.ihor.has_size(bounds.height)) {
            if (!this.right) {
              this.right = new DimensionLine({
                pos: 'right',
                parent: this,
                offset: ihor.length > 2 ? -260 : -130,
                contour: true
              });
            } else {
              this.right.offset = ihor.length > 2 ? -260 : -130;
            }
          }
        } else {
          if (this.right) {
            this.right.remove();
            this.right = null;
          }
        }

        if (parent.is_pos('top') && !parent.is_pos('bottom') && project.bounds.width != bounds.width) {
          if (!this.ivert.has_size(bounds.width)) {
            if (!this.top) {
              this.top = new DimensionLine({
                pos: 'top',
                parent: this,
                offset: ivert.length > 2 ? 220 : 90,
                contour: true
              });
            } else {
              this.top.offset = ivert.length > 2 ? 220 : 90;
            }
          }
        } else {
          if (this.top) {
            this.top.remove();
            this.top = null;
          }
        }

        if (parent.is_pos('bottom') && (project.bounds.width != bounds.width || forse)) {
          if (!this.ivert.has_size(bounds.width)) {
            if (!this.bottom) {
              this.bottom = new DimensionLine({
                pos: 'bottom',
                parent: this,
                offset: ivert.length > 2 ? -260 : -130,
                contour: true
              });
            } else {
              this.bottom.offset = ivert.length > 2 ? -260 : -130;
            }
          }
        } else {
          if (this.bottom) {
            this.bottom.remove();
            this.bottom = null;
          }
        }
      }
    }

    imposts() {

      const { parent } = this;
      const { bounds } = parent;

      const by_side = parent.profiles_by_side();
      if (!Object.keys(by_side).length) {
        return { ihor: [], ivert: [], by_side: {} };
      }

      const ihor = [{
        point: bounds.top.round(),
        elm: by_side.top,
        p: by_side.top.b.y < by_side.top.e.y ? 'b' : 'e'
      }, {
        point: bounds.bottom.round(),
        elm: by_side.bottom,
        p: by_side.bottom.b.y < by_side.bottom.e.y ? 'b' : 'e'
      }];
      const ivert = [{
        point: bounds.left.round(),
        elm: by_side.left,
        p: by_side.left.b.x > by_side.left.e.x ? 'b' : 'e'
      }, {
        point: bounds.right.round(),
        elm: by_side.right,
        p: by_side.right.b.x > by_side.right.e.x ? 'b' : 'e'
      }];

      return { ihor, ivert, by_side };
    }

    get owner_bounds() {
      return this.parent.bounds;
    }

    get dimension_bounds() {
      return this.parent.dimension_bounds;
    }

    get ihor() {
      return this._ihor || (this._ihor = new DimensionGroup());
    }

    get ivert() {
      return this._ivert || (this._ivert = new DimensionGroup());
    }
  }

  EditorInvisible.DimensionDrawer = DimensionDrawer;

  class DimensionLine extends paper.Group {

    constructor(attr) {

      super({ parent: attr.parent });

      const _attr = this._attr = {};

      this._row = attr.row;

      if (this._row && this._row.path_data) {
        attr._mixin(JSON.parse(this._row.path_data));
        if (attr.elm1) {
          attr.elm1 = this.project.getItem({ elm: attr.elm1 });
        }
        if (attr.elm2) {
          attr.elm2 = this.project.getItem({ elm: attr.elm2 });
        }
      }
      if (!attr.elm2) {
        attr.elm2 = attr.elm1;
      }
      if (!attr.p1) {
        attr.p1 = 'b';
      }
      if (!attr.p2) {
        attr.p2 = 'e';
      }
      Object.assign(_attr, attr);

      if (attr.contour) {
        _attr.contour = true;
      }

      if (!_attr.pos && (!_attr.elm1 || !_attr.elm2)) {
        this.remove();
        return null;
      }

      new paper.Path({ parent: this, name: 'callout1', strokeColor: 'black', guide: true });
      new paper.Path({ parent: this, name: 'callout2', strokeColor: 'black', guide: true });
      new paper.Path({ parent: this, name: 'scale', strokeColor: 'black', guide: true });
      new paper.PointText({
        parent: this,
        name: 'text',
        justification: 'center',
        fillColor: 'black',
        fontFamily: consts.font_family,
        fontSize: this._font_size() });

      this.on({
        mouseenter: this._mouseenter,
        click: this._click
      });
    }

    _font_size() {
      const { width, height } = this.project.bounds;
      const { cutoff, font_size } = consts;
      const size = Math.max(width - cutoff, height - cutoff) / 60;
      return font_size + (size > 0 ? size : 0);
    }

    _metadata() {
      return $p.dp.builder_size.metadata();
    }

    get _manager() {
      return $p.dp.builder_size;
    }

    _mouseenter() {
      this.project._scope.canvas_cursor('cursor-arrow-ruler');
    }

    _click(event) {
      event.stop();
      if (typeof RulerWnd === 'function') {
        this.wnd = new RulerWnd(null, this);
        this.wnd.size = this.size;
      }
    }

    _move_points(event, xy) {

      let _bounds, delta;

      const { _attr } = this;

      if (_attr.elm1) {

        _bounds = {};

        const p1 = (_attr.elm1._sub || _attr.elm1)[_attr.p1];
        const p2 = (_attr.elm2._sub || _attr.elm2)[_attr.p2];

        if (this.pos == "top" || this.pos == "bottom") {
          const size = Math.abs(p1.x - p2.x);
          if (event.name == "right") {
            delta = new paper.Point(event.size - size, 0);
            _bounds[event.name] = Math.max(p1.x, p2.x);
          } else {
            delta = new paper.Point(size - event.size, 0);
            _bounds[event.name] = Math.min(p1.x, p2.x);
          }
        } else {
          const size = Math.abs(p1.y - p2.y);
          if (event.name == "bottom") {
            delta = new paper.Point(0, event.size - size);
            _bounds[event.name] = Math.max(p1.y, p2.y);
          } else {
            delta = new paper.Point(0, size - event.size);
            _bounds[event.name] = Math.min(p1.y, p2.y);
          }
        }
      } else {
        _bounds = this.layer.bounds;
        if (this.pos == "top" || this.pos == "bottom") {
          if (event.name == "right") delta = new paper.Point(event.size - _bounds.width, 0);else delta = new paper.Point(_bounds.width - event.size, 0);
        } else {
          if (event.name == "bottom") delta = new paper.Point(0, event.size - _bounds.height);else delta = new paper.Point(0, _bounds.height - event.size);
        }
      }

      if (delta.length) {
        const { project } = this;
        project.deselect_all_points();
        project.getItems({ class: ProfileItem }).forEach(({ b, e, generatrix, width }) => {
          width /= 2;
          if (Math.abs(b[xy] - _bounds[event.name]) < width && Math.abs(e[xy] - _bounds[event.name]) < width) {
            generatrix.segments.forEach(segm => segm.selected = true);
          } else if (Math.abs(b[xy] - _bounds[event.name]) < width) {
            generatrix.firstSegment.selected = true;
          } else if (Math.abs(e[xy] - _bounds[event.name]) < width) {
            generatrix.lastSegment.selected = true;
          }
        });
        project.move_points(delta, false);
        setTimeout(function () {
          this.deselect_all_points(true);
          this.register_update();
        }.bind(project), 200);
      }
    }

    sizes_wnd(event) {

      if (this.wnd && event.wnd == this.wnd.wnd) {

        switch (event.name) {
          case 'close':
            if (this.children.text) {
              this.children.text.selected = false;
            }
            this.wnd = null;
            break;

          case 'left':
          case 'right':
            if (this.pos == "top" || this.pos == "bottom") {
              this._move_points(event, "x");
            }
            break;

          case 'top':
          case 'bottom':
            if (this.pos == "left" || this.pos == "right") {
              this._move_points(event, "y");
            }
            break;
        }
      }
    }

    redraw() {

      const { children, path, align, project: { builder_props } } = this;
      if (!children.length) {
        return;
      }
      if (!path) {
        this.visible = false;
        return;
      }

      const length = path.length;
      if (length < 1) {
        this.visible = false;
        return;
      }
      this.visible = true;

      const b = path.firstSegment.point;
      const e = path.lastSegment.point;
      const normal = path.getNormalAt(0).multiply(this.offset + path.offset);
      const nl = normal.length;
      const ns = nl > 30 ? normal.normalize(nl - 20) : normal;
      const bs = b.add(ns);
      const es = e.add(ns);

      if (children.callout1.segments.length) {
        children.callout1.firstSegment.point = b;
        children.callout1.lastSegment.point = b.add(normal);
      } else {
        children.callout1.addSegments([b, b.add(normal)]);
      }

      if (children.callout2.segments.length) {
        children.callout2.firstSegment.point = e;
        children.callout2.lastSegment.point = e.add(normal);
      } else {
        children.callout2.addSegments([e, e.add(normal)]);
      }

      if (children.scale.segments.length) {
        children.scale.firstSegment.point = bs;
        children.scale.lastSegment.point = es;
      } else {
        children.scale.addSegments([bs, es]);
      }

      children.callout1.visible = !this.hide_c1;
      children.callout2.visible = !this.hide_c2;
      children.scale.visible = !this.hide_line;

      children.text.content = length.round(builder_props.rounding).toString();
      children.text.rotation = e.subtract(b).angle;
      children.text.justification = align.ref;

      const font_size = this._font_size();
      const { isNode } = $p.wsql.alasql.utils;
      children.text.fontSize = font_size;
      if (align == $p.enm.text_aligns.left) {
        children.text.position = bs.add(path.getTangentAt(0).multiply(font_size)).add(path.getNormalAt(0).multiply(font_size / (isNode ? 1.3 : 2)));
      } else if (align == $p.enm.text_aligns.right) {
        children.text.position = es.add(path.getTangentAt(0).multiply(-font_size)).add(path.getNormalAt(0).multiply(font_size / (isNode ? 1.3 : 2)));
      } else {
        children.text.position = bs.add(es).divide(2).add(path.getNormalAt(0).multiply(font_size / (isNode ? 1.3 : 2)));
        if (length < 20) {
          children.text.position = children.text.position.add(path.getTangentAt(0).multiply(font_size / 3));
        }
      }
    }

    get path() {

      const { parent, project, children, _attr, pos } = this;
      if (!children.length) {
        return;
      }
      const { owner_bounds, dimension_bounds } = parent;
      let offset = 0,
          b,
          e;

      if (!pos) {
        b = typeof _attr.p1 == "number" ? _attr.elm1.corns(_attr.p1) : _attr.elm1[_attr.p1];
        e = typeof _attr.p2 == "number" ? _attr.elm2.corns(_attr.p2) : _attr.elm2[_attr.p2];
      } else if (pos == "top") {
        b = owner_bounds.topLeft;
        e = owner_bounds.topRight;
        offset = owner_bounds[pos] - dimension_bounds[pos];
      } else if (pos == "left") {
        b = owner_bounds.bottomLeft;
        e = owner_bounds.topLeft;
        offset = owner_bounds[pos] - dimension_bounds[pos];
      } else if (pos == "bottom") {
        b = owner_bounds.bottomLeft;
        e = owner_bounds.bottomRight;
        offset = owner_bounds[pos] - dimension_bounds[pos];
      } else if (pos == "right") {
        b = owner_bounds.bottomRight;
        e = owner_bounds.topRight;
        offset = owner_bounds[pos] - dimension_bounds[pos];
      }

      if (!b || !e) {
        return;
      }

      const path = new paper.Path({ insert: false, segments: [b, e] });

      if (_attr.elm1 && pos) {
        b = path.getNearestPoint(_attr.elm1[_attr.p1]);
        e = path.getNearestPoint(_attr.elm2[_attr.p2]);
        if (path.getOffsetOf(b) > path.getOffsetOf(e)) {
          [b, e] = [e, b];
        }
        path.firstSegment.point = b;
        path.lastSegment.point = e;
      }
      path.offset = offset;

      return path;
    }

    get eve() {
      return this.project._scope.eve;
    }

    get size() {
      return this.children.text && parseFloat(this.children.text.content) || 0;
    }
    set size(v) {
      this.children.text.content = parseFloat(v).round(1);
    }

    get pos() {
      return this._attr.pos || "";
    }
    set pos(v) {
      this._attr.pos = v;
      this.redraw();
    }

    get offset() {
      return this._attr.offset || 90;
    }
    set offset(v) {
      const offset = (parseInt(v) || 90).round();
      if (this._attr.offset != offset) {
        this._attr.offset = offset;
        this.project.register_change(true);
      }
    }

    get align() {
      return !this._attr.align || this._attr.align == '_' ? $p.enm.text_aligns.center : this._attr.align;
    }
    set align(v) {
      this._attr.align = v;
      this.redraw();
    }

    get hide_c1() {
      return !!this._attr.hide_c1;
    }
    set hide_c1(v) {
      const { children, hide_c1, _attr } = this;
      _attr.hide_c1 = v;
      v && children.callout1.setSelection(false);
      this.redraw();
    }

    get hide_c2() {
      return !!this._attr.hide_c2;
    }
    set hide_c2(v) {
      const { children, hide_c2, _attr } = this;
      _attr.hide_c2 = v;
      v && children.callout2.setSelection(false);
      this.redraw();
    }

    get hide_line() {
      return !!this._attr.hide_line;
    }
    set hide_line(v) {
      const { children, hide_line, _attr } = this;
      _attr.hide_line = v;
      v && children.scale.setSelection(false);
      this.redraw();
    }

    remove() {
      if (this._row) {
        this._row._owner.del(this._row);
        this._row = null;
        this.project.register_change();
      }
      super.remove();
    }
  }

  class DimensionLineCustom extends DimensionLine {

    constructor(attr) {

      if (!attr.row) {
        attr.row = attr.parent.project.ox.coordinates.add();
      }

      if (!attr.row.cnstr) {
        attr.row.cnstr = attr.parent.layer.cnstr;
      }

      if (!attr.row.elm) {
        attr.row.elm = attr.parent.project.ox.coordinates.aggregate([], ["elm"], "max") + 1;
      }

      super(attr);
    }

    get elm_type() {
      return $p.enm.elm_types.Размер;
    }

    save_coordinates() {
      const { _row, _attr, elm_type, pos, offset, size, align } = this;

      _row.len = size;

      _row.elm_type = elm_type;

      const path_data = {
        pos: pos,
        elm1: _attr.elm1.elm,
        elm2: _attr.elm2.elm,
        p1: _attr.p1,
        p2: _attr.p2,
        offset: offset
      };
      if (_attr.fix_angle) {
        path_data.fix_angle = true;
        path_data.angle = _attr.angle;
      }
      if (align == $p.enm.text_aligns.left || align == $p.enm.text_aligns.right) {
        path_data.align = align.ref || align;
      }
      if (_attr.hide_c1) {
        path_data.hide_c1 = true;
      }
      if (_attr.hide_c2) {
        path_data.hide_c2 = true;
      }
      if (_attr.hide_line) {
        path_data.hide_line = true;
      }
      _row.path_data = JSON.stringify(path_data);
    }

    setSelection(selection) {
      super.setSelection(selection);
      const { project, children, hide_c1, hide_c2, hide_line } = this;
      const { tool } = project._scope;
      if (selection) {
        hide_c1 && children.callout1.setSelection(false);
        hide_c2 && children.callout2.setSelection(false);
        hide_line && children.scale.setSelection(false);
      }
      typeof ToolRuler === 'function' && tool instanceof ToolRuler && tool.wnd.attach(this);
    }

    _click(event) {
      event.stop();
      const { tool } = this.project._scope;
      if (tool && typeof ToolRuler === 'function' && tool instanceof ToolRuler) {
        this.selected = true;
      }
    }

    _mouseenter() {
      const { _scope } = this.project;
      const { tool } = _scope;
      if (tool && typeof ToolRuler === 'function' && tool instanceof ToolRuler) {
        _scope.canvas_cursor('cursor-arrow-ruler');
      } else {
        _scope.canvas_cursor('cursor-arrow-ruler-dis');
      }
    }

    get angle() {
      if (this.fix_angle) {
        return this._attr.angle || 0;
      }
      const { firstSegment, lastSegment } = this.path;
      return lastSegment.point.subtract(firstSegment.point).angle.round(1);
    }
    set angle(v) {
      this._attr.angle = parseFloat(v).round(1);
      this.project.register_change(true);
    }

    get fix_angle() {
      return !!this._attr.fix_angle;
    }
    set fix_angle(v) {
      this._attr.fix_angle = v;
      this.project.register_change(true);
    }

    get path() {
      if (this.fix_angle) {

        const { children, _attr } = this;
        if (!children.length) {
          return;
        }
        let b = typeof _attr.p1 == "number" ? _attr.elm1.corns(_attr.p1) : _attr.elm1[_attr.p1];
        let e = typeof _attr.p2 == "number" ? _attr.elm2.corns(_attr.p2) : _attr.elm2[_attr.p2];
        if (!b || !e) {
          return;
        }

        const d = e.subtract(b);
        const t = d.clone();
        t.angle = this.angle;
        const path = new paper.Path({ insert: false, segments: [b, b.add(t)] });
        path.lastSegment.point.add(t.multiply(10000));
        path.lastSegment.point = path.getNearestPoint(e);
        path.offset = 0;
        return path;
      } else {
        return super.path;
      }
    }
  }

  EditorInvisible.DimensionLine = DimensionLine;
  EditorInvisible.DimensionLineCustom = DimensionLineCustom;

  class DimensionLineImpost extends DimensionLineCustom {

    constructor(attr) {

      attr.row = {
        cnstr: 1,
        elm: 1,
        _owner: {
          del() {}
        }
      };

      super(attr);

      new paper.PointText({
        parent: this,
        name: 'dx1',
        justification: 'center',
        fontFamily: consts.font_family,
        fillColor: 'black',
        fontSize: consts.font_size });

      new paper.PointText({
        parent: this,
        name: 'dx2',
        justification: 'center',
        fontFamily: consts.font_family,
        fillColor: 'black',
        fontSize: consts.font_size });
    }

    get path() {

      const { children, _attr: { elm1: { generatrix }, p1, p2, dx1, dx2 } } = this;
      if (!children.length) {
        return;
      }

      let b = generatrix.getPointAt(typeof p1 == 'number' ? dx2 : dx1);
      let e = generatrix.getPointAt(typeof p1 == 'number' ? dx1 : dx2);
      if (!b || !e) {
        return;
      }
      const path = new paper.Path({ insert: false, segments: [b, e] });
      path.offset = 0;
      return path;
    }

    redraw() {

      const { children, path, offset, _attr: { elm1, p1, p2, dx1, dx2, outer } } = this;
      if (!children.length) {
        return;
      }
      if (!path) {
        this.visible = false;
        return;
      }

      this.visible = true;

      const b = path.firstSegment.point;
      const e = path.lastSegment.point;
      const normal = path.getNormalAt(0).multiply((outer ? -1 : 1) * (offset + path.offset));
      const tangent = path.getTangentAt(0);
      const ns = normal.normalize(normal.length - 20);
      const bs = b.add(ns);
      const es = e.add(ns);
      const offsetB = elm1.generatrix.getOffsetOf(elm1.generatrix.getNearestPoint(elm1.corns(1)));

      if (children.callout1.segments.length) {
        children.callout1.firstSegment.point = b;
        children.callout1.lastSegment.point = b.add(normal);
      } else {
        children.callout1.addSegments([b, b.add(normal)]);
      }

      if (children.callout2.segments.length) {
        children.callout2.firstSegment.point = e;
        children.callout2.lastSegment.point = e.add(normal);
      } else {
        children.callout2.addSegments([e, e.add(normal)]);
      }

      if (children.scale.segments.length) {
        children.scale.firstSegment.point = bs;
        children.scale.lastSegment.point = es;
      } else {
        children.scale.addSegments([bs, es]);
      }
      children.scale.elongation(200);

      children.text.rotation = children.dx1.rotation = children.dx2.rotation = 0;
      children.text.content = ((typeof p1 == 'number' ? p1 : p2) - offsetB).toFixed(0);
      children.dx1.content = (dx1 - offsetB).toFixed(0);
      children.dx2.content = (dx2 - offsetB).toFixed(0);
      const bdx1 = children.dx1.bounds;
      const bdx2 = children.dx2.bounds;
      if (offset > 0) {
        children.dx1.justification = 'left';
        children.dx2.justification = 'right';
        children.dx1.position = bs.add(tangent.normalize(-Math.sign(offset) * ((consts.font_size + bdx1.width) / 2))).add(normal.normalize(-consts.font_size * 0.6));
        children.dx2.position = es.add(tangent.normalize(Math.sign(offset) * ((consts.font_size + bdx1.width) / 2))).add(normal.normalize(-consts.font_size * 0.6));
      } else {
        children.dx1.justification = 'right';
        children.dx2.justification = 'left';
        children.dx1.position = es.add(tangent.normalize(-Math.sign(offset) * ((consts.font_size + bdx1.width) / 2))).add(normal.normalize(-consts.font_size * 0.6));
        children.dx2.position = bs.add(tangent.normalize(Math.sign(offset) * ((consts.font_size + bdx1.width) / 2))).add(normal.normalize(-consts.font_size * 0.6));
      }
      children.text.rotation = children.dx1.rotation = children.dx2.rotation = e.subtract(b).angle;

      children.text.position = bs.add(es).divide(2).add(normal.normalize(consts.font_size * 0.8));
    }

  }

  class DimensionRadius extends DimensionLineCustom {

    get elm_type() {
      return $p.enm.elm_types.Радиус;
    }

    get path() {

      const { children, _attr } = this;
      if (!children.length) {
        return;
      }
      const { path } = _attr.elm1;
      if (!path) {
        return;
      }

      let b = path.getPointAt(_attr.p1);
      const n = path.getNormalAt(_attr.p1).normalize(100);
      const res = new paper.Path({ insert: false, segments: [b, b.add(n)] });
      res.offset = 0;
      return res;
    }

    redraw() {
      const { children, _attr, path, align } = this;
      if (!path) {
        this.visible = false;
        return;
      }
      this.visible = true;

      const b = path.firstSegment.point;
      const e = path.lastSegment.point;
      const c = path.getPointAt(50);
      const n = path.getNormalAt(0).multiply(10);
      const c1 = c.add(n);
      const c2 = c.subtract(n);

      if (children.callout1.segments.length) {
        children.callout1.firstSegment.point = b;
        children.callout1.lastSegment.point = c1;
      } else {
        children.callout1.addSegments([b, c1]);
      }

      if (children.callout2.segments.length) {
        children.callout2.firstSegment.point = b;
        children.callout2.lastSegment.point = c2;
      } else {
        children.callout2.addSegments([b, c2]);
      }

      if (children.scale.segments.length) {
        children.scale.firstSegment.point = b;
        children.scale.lastSegment.point = e;
      } else {
        children.scale.addSegments([b, e]);
      }

      const curv = Math.abs(_attr.elm1.path.getCurvatureAt(_attr.p1));
      if (curv) {
        children.text.content = `R${(1 / curv).round(-1)}`;
        children.text.rotation = e.subtract(b).angle;
        children.text.justification = 'left';
      }
      children.text.position = e.add(path.getTangentAt(0).multiply(consts.font_size * 1.4));
    }

  }

  class BuilderElement extends paper.Group {

    constructor(attr) {

      super(attr);

      if (!attr.row) {
        attr.row = this.project.ox.coordinates.add();
      }

      this._row = attr.row;

      this._attr = {};

      if (attr.proto) {

        if (attr.proto.inset) {
          this.inset = attr.proto.inset;
        }

        if (attr.parent) {
          this.parent = attr.parent;
        } else if (attr.proto.parent) {
          this.parent = attr.proto.parent;
        }

        if (attr.proto instanceof Profile) {
          this.insertBelow(attr.proto);
        }

        this.clr = attr.proto.clr;
      } else if (attr.parent) {
        this.parent = attr.parent;
      }

      if (!this._row.cnstr && this.layer.cnstr) {
        this._row.cnstr = this.layer.cnstr;
      }

      if (!this._row.elm) {
        this._row.elm = this.project.ox.coordinates.aggregate([], ["elm"], "max") + 1;
      }

      if (this._row.elm_type.empty() && !this.inset.empty()) {
        this._row.elm_type = this.nom.elm_type;
      }

      this.project.register_change();
    }

    get owner() {
      return this._attr.owner;
    }
    set owner(v) {
      this._attr.owner = v;
    }

    get generatrix() {
      return this._attr.generatrix;
    }
    set generatrix(attr) {

      const { _attr } = this;
      const { generatrix } = _attr;
      generatrix.removeSegments();

      this.rays && this.rays.clear();

      if (attr instanceof paper.Path) {
        generatrix.addSegments(attr.segments);
      }
      if (Array.isArray(attr)) {
        generatrix.addSegments(attr);
      } else if (attr.proto && attr.p1 && attr.p2) {

        let tpath = attr.proto;
        if (tpath.getDirectedAngle(attr.ipoint) < 0) {
          tpath.reverse();
        }

        let d1 = tpath.getOffsetOf(attr.p1);
        let d2 = tpath.getOffsetOf(attr.p2),
            d3;
        if (d1 > d2) {
          d3 = d2;
          d2 = d1;
          d1 = d3;
        }
        if (d1 > 0) {
          tpath = tpath.split(d1);
          d2 = tpath.getOffsetOf(attr.p2);
        }
        if (d2 < tpath.length) {
          tpath.split(d2);
        }

        generatrix.remove();
        _attr.generatrix = tpath;
        _attr.generatrix.parent = this;

        if (this.layer.parent) {
          _attr.generatrix.guide = true;
        }
      }
    }

    get path() {
      return this._attr.path;
    }
    set path(attr) {
      if (attr instanceof paper.Path) {
        const { _attr } = this;
        _attr.path.removeSegments();
        _attr.path.addSegments(attr.segments);
        if (!_attr.path.closed) {
          _attr.path.closePath(true);
        }
      }
    }

    get _metadata() {
      const { fields, tabular_sections } = this.project.ox._metadata();
      const t = this,
            _xfields = tabular_sections.coordinates.fields,
            inset = Object.assign({}, _xfields.inset),
            arc_h = Object.assign({}, _xfields.r, { synonym: "Высота дуги" }),
            info = Object.assign({}, fields.note, { synonym: "Элемент" }),
            cnn1 = Object.assign({}, tabular_sections.cnn_elmnts.fields.cnn),
            cnn2 = Object.assign({}, cnn1),
            cnn3 = Object.assign({}, cnn1);

      function cnn_choice_links(o, cnn_point) {

        const nom_cnns = $p.cat.cnns.nom_cnn(t, cnn_point.profile, cnn_point.cnn_types);

        if ($p.utils.is_data_obj(o)) {
          return nom_cnns.some(cnn => o == cnn);
        } else {
          let refs = "";
          nom_cnns.forEach(cnn => {
            if (refs) {
              refs += ", ";
            }
            refs += "'" + cnn.ref + "'";
          });
          return "_t_.ref in (" + refs + ")";
        }
      }

      const { _inserts_types_filling } = $p.cat.inserts;
      inset.choice_links = [{
        name: ["selection", "ref"],
        path: [(o, f) => {
          const { sys } = this.project._dp;

          let selection;

          if (this instanceof Filling) {
            if ($p.utils.is_data_obj(o)) {
              const { thickness, insert_type, insert_glass_type } = o;
              return _inserts_types_filling.indexOf(insert_type) != -1 && thickness >= sys.tmin && thickness <= sys.tmax && (insert_glass_type.empty() || insert_glass_type == $p.enm.inserts_glass_types.Заполнение);
            } else {
              let refs = "";
              $p.cat.inserts.by_thickness(sys.tmin, sys.tmax).forEach(o => {
                if (o.insert_glass_type.empty() || o.insert_glass_type == $p.enm.inserts_glass_types.Заполнение) {
                  if (refs) {
                    refs += ", ";
                  }
                  refs += "'" + o.ref + "'";
                }
              });
              return "_t_.ref in (" + refs + ")";
            }
          } else if (this instanceof Profile) {
            if (this.nearest()) {
              selection = { elm_type: { in: [$p.enm.elm_types.Створка, $p.enm.elm_types.Добор] } };
            } else {
              selection = { elm_type: { in: [$p.enm.elm_types.Рама, $p.enm.elm_types.Импост, $p.enm.elm_types.Добор] } };
            }
          } else {
            selection = { elm_type: this.nom.elm_type };
          }

          if ($p.utils.is_data_obj(o)) {
            let ok = false;
            selection.nom = o;
            sys.elmnts.find_rows(selection, row => {
              ok = true;
              return false;
            });
            return ok;
          } else {
            let refs = "";
            sys.elmnts.find_rows(selection, row => {
              if (refs) {
                refs += ", ";
              }
              refs += "'" + row.nom.ref + "'";
            });
            return "_t_.ref in (" + refs + ")";
          }
        }] }];

      cnn1.choice_links = [{
        name: ["selection", "ref"],
        path: [(o, f) => cnn_choice_links(o, this.rays.b)]
      }];

      cnn2.choice_links = [{
        name: ["selection", "ref"],
        path: [(o, f) => cnn_choice_links(o, this.rays.e)]
      }];

      cnn3.choice_links = [{
        name: ["selection", "ref"],
        path: [o => {
          const cnn_ii = this.selected_cnn_ii();
          let nom_cnns = [$p.utils.blank.guid];

          if (cnn_ii) {
            if (cnn_ii.elm instanceof Filling) {
              nom_cnns = $p.cat.cnns.nom_cnn(cnn_ii.elm, this, $p.enm.cnn_types.acn.ii);
            } else if (cnn_ii.elm.elm_type == $p.enm.elm_types.Створка && this.elm_type != $p.enm.elm_types.Створка) {
              nom_cnns = $p.cat.cnns.nom_cnn(cnn_ii.elm, this, $p.enm.cnn_types.acn.ii);
            } else {
              nom_cnns = $p.cat.cnns.nom_cnn(this, cnn_ii.elm, $p.enm.cnn_types.acn.ii);
            }
          }

          if ($p.utils.is_data_obj(o)) {
            return nom_cnns.some(cnn => o == cnn);
          } else {
            var refs = "";
            nom_cnns.forEach(cnn => {
              if (refs) {
                refs += ", ";
              }
              refs += "'" + cnn.ref + "'";
            });
            return "_t_.ref in (" + refs + ")";
          }
        }]
      }];

      $p.cat.clrs.selection_exclude_service(_xfields.clr, this);

      return {
        fields: {
          info: info,
          inset: inset,
          clr: _xfields.clr,
          x1: _xfields.x1,
          x2: _xfields.x2,
          y1: _xfields.y1,
          y2: _xfields.y2,
          cnn1: cnn1,
          cnn2: cnn2,
          cnn3: cnn3,
          arc_h: arc_h,
          r: _xfields.r,
          arc_ccw: _xfields.arc_ccw,
          a1: Object.assign({}, _xfields.x1, { synonym: "Угол1" }),
          a2: Object.assign({}, _xfields.x1, { synonym: "Угол2" })
        }
      };
    }

    get _manager() {
      return this.project._dp._manager;
    }

    get nom() {
      return this.inset.nom(this);
    }

    get elm() {
      return this._row ? this._row.elm : 0;
    }

    get info() {
      return "№" + this.elm;
    }

    get ref() {
      const { nom } = this;
      return nom && !nom.empty() ? nom.ref : this.inset.ref;
    }

    get width() {
      return this.nom.width || 80;
    }

    get thickness() {
      return this.inset.thickness;
    }

    get sizeb() {
      return this.inset.sizeb || 0;
    }

    get sizefurn() {
      return this.nom.sizefurn || 20;
    }

    get cnn3() {
      const cnn_ii = this.selected_cnn_ii();
      return cnn_ii ? cnn_ii.row.cnn : $p.cat.cnns.get();
    }
    set cnn3(v) {
      const cnn_ii = this.selected_cnn_ii();
      if (cnn_ii && cnn_ii.row.cnn != v) {
        cnn_ii.row.cnn = v;
        if (this._attr._nearest_cnn) {
          this._attr._nearest_cnn = cnn_ii.row.cnn;
        }
        if (this.rays) {
          this.rays.clear();
        }
        this.project.register_change();
      }
    }

    get inset() {
      return (this._row ? this._row.inset : null) || $p.cat.inserts.get();
    }
    set inset(v) {
      this.set_inset(v);
    }

    get clr() {
      return this._row.clr;
    }
    set clr(v) {
      this.set_clr(v);
    }

    set_inset(v, ignore_select) {
      const { _row, _attr, project } = this;
      if (_row.inset != v) {
        _row.inset = v;
        if (_attr && _attr._rays) {
          _attr._rays.clear(true);
        }
        project.register_change();
      }
    }

    set_clr(v, ignore_select) {
      if (this._row.clr != v) {
        this._row.clr = v;
        this.project.register_change();
      }
      if (this.path instanceof paper.Path) {
        this.path.fillColor = BuilderElement.clr_by_clr.call(this, this._row.clr, false);
      }
    }

    t_parent(be) {
      return this;
    }

    attache_wnd(cell) {
      if (!this._attr._grid || !this._attr._grid.cell) {

        this._attr._grid = cell.attachHeadFields({
          obj: this,
          oxml: this.oxml
        });
        this._attr._grid.attachEvent('onRowSelect', function (id) {
          if (['x1', 'y1', 'a1', 'cnn1'].indexOf(id) != -1) {
            this._obj.select_node('b');
          } else if (['x2', 'y2', 'a2', 'cnn2'].indexOf(id) != -1) {
            this._obj.select_node('e');
          }
        });
      } else if (this._attr._grid._obj != this) {
        this._attr._grid.attach({
          obj: this,
          oxml: this.oxml
        });
      }
    }

    detache_wnd() {
      const { _grid } = this._attr;
      if (_grid && _grid.destructor && _grid._owner_cell) {
        _grid._owner_cell.detachObject(true);
        delete this._attr._grid;
      }
    }

    selected_cnn_ii() {
      const { project, elm } = this;
      const sel = project.getSelectedItems();
      const { cnns } = project;
      const items = [];
      let res;

      sel.forEach(item => {
        if (item.parent instanceof ProfileItem || item.parent instanceof Filling) items.push(item.parent);else if (item instanceof Filling) items.push(item);
      });

      if (items.length > 1 && items.some(item => item == this) && items.some(item => {
        if (item != this) {
          cnns.forEach(row => {
            if (!row.node1 && !row.node2 && (row.elm1 == elm && row.elm2 == item.elm || row.elm1 == item.elm && row.elm2 == elm)) {
              res = { elm: item, row: row };
              return false;
            }
          });
          if (res) {
            return true;
          }
        }
      })) {
        return res;
      }
    }

    remove() {
      this.detache_wnd();
      const { parent, project, observer, _row } = this;

      parent && parent.on_remove_elm && parent.on_remove_elm(this);

      if (observer) {
        project._scope.eve.off(consts.move_points, observer);
        delete this.observer;
      }

      if (_row && _row._owner && project.ox === _row._owner._owner) {
        _row._owner.del(_row);
      }

      project.register_change();

      super.remove();
    }

    err_spec_row(nom, text) {
      if (!nom) {
        nom = $p.job_prm.nom.info_error;
      }
      const { ox } = this.project;
      if (!ox.specification.find_rows({ elm: this.elm, nom }).length) {
        $p.ProductsBuilding.new_spec_row({
          elm: this,
          row_base: { clr: $p.cat.clrs.get(), nom },
          spec: ox.specification,
          ox
        });
      };
      if (text) {}
    }

    static clr_by_clr(clr, view_out) {
      let { clr_str, clr_in, clr_out } = clr;

      if (!view_out) {
        if (!clr_in.empty() && clr_in.clr_str) clr_str = clr_in.clr_str;
      } else {
        if (!clr_out.empty() && clr_out.clr_str) clr_str = clr_out.clr_str;
      }

      if (!clr_str) {
        clr_str = this.default_clr_str ? this.default_clr_str : "fff";
      }

      if (clr_str) {
        clr = clr_str.split(",");
        if (clr.length == 1) {
          if (clr_str[0] != "#") clr_str = "#" + clr_str;
          clr = new paper.Color(clr_str);
          clr.alpha = 0.96;
        } else if (clr.length == 4) {
          clr = new paper.Color(clr[0], clr[1], clr[2], clr[3]);
        } else if (clr.length == 3) {
          if (this.path && this.path.bounds) clr = new paper.Color({
            stops: [clr[0], clr[1], clr[2]],
            origin: this.path.bounds.bottomLeft,
            destination: this.path.bounds.topRight
          });else clr = new paper.Color(clr[0]);
        }
        return clr;
      }
    }
  }

  EditorInvisible.BuilderElement = BuilderElement;

  class Filling extends AbstractFilling(BuilderElement) {

    constructor(attr) {

      const { path } = attr;
      if (path) {
        delete attr.path;
      }

      super(attr);

      if (path) {
        attr.path = path;
      }

      this.initialize(attr);
    }

    initialize(attr) {

      const _row = attr.row;
      const { _attr, project } = this;
      const h = project.bounds.height + project.bounds.y;

      if (_row.path_data) {
        _attr.path = new paper.Path(_row.path_data);
      } else if (attr.path) {
        _attr.path = new paper.Path();
        this.path = attr.path;
      } else {
        _attr.path = new paper.Path([[_row.x1, h - _row.y1], [_row.x1, h - _row.y2], [_row.x2, h - _row.y2], [_row.x2, h - _row.y1]]);
      }

      _attr.path.closePath(true);
      _attr.path.reduce();
      _attr.path.strokeWidth = 0;

      if (_row.inset.empty()) {
        _row.inset = project.default_inset({ elm_type: [$p.enm.elm_types.Стекло, $p.enm.elm_types.Заполнение] });
      }

      if (_row.clr.empty()) {
        project._dp.sys.elmnts.find_rows({ nom: _row.inset }, row => {
          _row.clr = row.clr;
          return false;
        });
      }
      if (_row.clr.empty()) {
        project._dp.sys.elmnts.find_rows({ elm_type: { in: [$p.enm.elm_types.Стекло, $p.enm.elm_types.Заполнение] } }, row => {
          _row.clr = row.clr;
          return false;
        });
      }
      this.clr = _row.clr;

      if (_row.elm_type.empty()) {
        _row.elm_type = $p.enm.elm_types.Стекло;
      }

      _attr.path.visible = false;

      this.addChild(_attr.path);

      project.ox.coordinates.find_rows({
        cnstr: this.layer.cnstr,
        parent: this.elm,
        elm_type: $p.enm.elm_types.Раскладка
      }, row => new Onlay({ row: row, parent: this }));
    }

    save_coordinates() {

      const { _row, project, profiles, bounds, imposts, nom } = this;
      const h = project.bounds.height + project.bounds.y;
      const { cnns } = project;
      const length = profiles.length;

      project.ox.glasses.add({
        elm: _row.elm,
        nom: nom,
        formula: this.formula(),
        width: bounds.width,
        height: bounds.height,
        s: this.area,
        is_rectangular: this.is_rectangular,
        is_sandwich: nom.elm_type == $p.enm.elm_types.Заполнение,
        thickness: this.thickness
      });

      let curr, prev, next;

      _row.x1 = (bounds.bottomLeft.x - project.bounds.x).round(3);
      _row.y1 = (h - bounds.bottomLeft.y).round(3);
      _row.x2 = (bounds.topRight.x - project.bounds.x).round(3);
      _row.y2 = (h - bounds.topRight.y).round(3);
      _row.path_data = this.path.pathData;

      for (let i = 0; i < length; i++) {

        curr = profiles[i];

        if (!curr.profile || !curr.profile._row || !curr.cnn) {
          if ($p.job_prm.debug) throw new ReferenceError("Не найдено ребро заполнения");else return;
        }

        curr.aperture_path = curr.profile.generatrix.get_subpath(curr.b, curr.e)._reversed ? curr.profile.rays.outer : curr.profile.rays.inner;
      }

      for (let i = 0; i < length; i++) {

        prev = i === 0 ? profiles[length - 1] : profiles[i - 1];
        curr = profiles[i];
        next = i === length - 1 ? profiles[0] : profiles[i + 1];

        const pb = curr.aperture_path.intersect_point(prev.aperture_path, curr.b, true);
        const pe = curr.aperture_path.intersect_point(next.aperture_path, curr.e, true);

        if (!pb || !pe) {
          if ($p.job_prm.debug) throw "Filling:path";else return;
        }

        cnns.add({
          elm1: _row.elm,
          elm2: curr.profile._row.elm,
          node1: "",
          node2: "",
          cnn: curr.cnn.ref,
          aperture_len: curr.aperture_path.get_subpath(pb, pe).length.round(1)
        });
      }

      for (let i = 0; i < length; i++) {
        delete profiles[i].aperture_path;
      }

      imposts.forEach(curr => curr.save_coordinates());
    }

    create_leaf() {

      const { project } = this;

      project.cnns.clear({ elm1: this.elm });

      const contour = new Contour({ parent: this.parent });

      contour.path = this.profiles;

      this.parent = contour;
      this._row.cnstr = contour.cnstr;

      contour.furn = project.default_furn;

      project.notify(contour, 'rows', { constructions: true });

      contour.activate();
    }

    cnn_side() {
      return $p.enm.cnn_sides.Изнутри;
    }

    nearest() {
      return null;
    }

    select_node(v) {
      let point,
          segm,
          delta = Infinity;
      if (v === "b") {
        point = this.bounds.bottomLeft;
      } else {
        point = this.bounds.topRight;
      }
      this._attr.path.segments.forEach(curr => {
        curr.selected = false;
        if (point.getDistance(curr.point) < delta) {
          delta = point.getDistance(curr.point);
          segm = curr;
        }
      });
      if (segm) {
        segm.selected = true;
        this.view.update();
      }
    }

    setSelection(selection) {
      super.setSelection(selection);
      if (selection) {
        const { path } = this;
        for (let elm of this.children) {
          if (elm != path) {
            elm.selected = false;
          }
        }
      }
    }

    redraw() {

      this.sendToBack();

      const { path, imposts, _attr, is_rectangular } = this;
      const { elm_font_size, font_family } = consts;
      const fontSize = elm_font_size * (2 / 3);
      const maxTextWidth = 600;
      path.visible = true;
      imposts.forEach(elm => elm.redraw());

      this.purge_paths();

      if (!_attr._text) {
        _attr._text = new paper.PointText({
          parent: this,
          fillColor: 'black',
          fontFamily: font_family,
          fontSize,
          guide: true,
          visible: true
        });
      }

      const { bounds } = path;
      _attr._text.content = this.formula();

      const textBounds = bounds.scale(0.9);
      textBounds.width = textBounds.width > maxTextWidth ? maxTextWidth : textBounds.width;
      textBounds.height = textBounds.height > maxTextWidth ? maxTextWidth : textBounds.height;

      if (is_rectangular) {
        const turn = textBounds.width * 1.5 < textBounds.height;
        if (turn) {
          textBounds.width = elm_font_size;
        } else {
          textBounds.height = elm_font_size;
        }
        _attr._text.fitBounds(textBounds);
        _attr._text.point = turn ? bounds.bottomRight.add([-fontSize, -fontSize * 0.6]) : bounds.bottomLeft.add([fontSize * 0.6, -fontSize]);
        _attr._text.rotation = turn ? 270 : 0;
      } else {
        textBounds.height = elm_font_size;
        _attr._text.rotation = 0;
        _attr._text.fitBounds(textBounds);
        const maxCurve = path.curves.reduce((curv, item) => item.length > curv.length ? item : curv, path.curves[0]);
        const { angle, angleInRadians } = maxCurve.line.vector;
        const { PI } = Math;
        _attr._text.rotation = angle;
        const biasPoint = new paper.Point(Math.cos(angleInRadians + PI / 4), Math.sin(angleInRadians + PI / 4)).multiply(3 * elm_font_size);
        _attr._text.point = maxCurve.point1.add(biasPoint);
        if (Math.abs(angle) >= 85 && Math.abs(angle) <= 185) {
          _attr._text.point = _attr._text.bounds.rightCenter;
          _attr._text.rotation += 180;
        }
      }
    }

    draw_fragment() {
      const { l_dimensions, layer, path } = this;
      this.visible = true;
      path.set({
        strokeColor: 'black',
        strokeWidth: 1,
        strokeScaling: false,
        opacity: 0.6
      });
      l_dimensions.redraw(true);
      layer.zoom_fit();
    }

    set_inset(v, ignore_select) {

      const inset = $p.cat.inserts.get(v);

      if (!ignore_select) {
        const { project, elm, clr } = this;
        const { glass_specification } = project.ox;
        const proto = glass_specification.find_rows({ elm });

        if (!inset.clr_group.empty() && inset.clr_group.clr_conformity.count() && !inset.clr_group.clr_conformity._obj.some(row => row.clr1 == clr || row.clr1 == clr.parent)) {
          const { clr1 } = inset.clr_group.clr_conformity.get(0);
          if (clr1.is_folder) {
            $p.cat.clrs.find_rows({ parent: clr1 }, v => {
              this.clr = v;
              return false;
            });
          } else {
            this.clr = clr1;
          }
        }

        if (proto.length) {
          glass_specification.clear({ elm });
          proto.length = 0;
          inset.specification.forEach(row => {
            if (row.nom instanceof $p.CatInserts) {
              proto.push(glass_specification.add({
                elm,
                inset: row.nom,
                clr: row.clr
              }));
            }
          });
        }

        project.selected_glasses().forEach(selm => {
          if (selm !== this) {
            selm.set_inset(inset, true);
            glass_specification.clear({ elm: selm.elm });
            proto.forEach(row => glass_specification.add({
              elm: selm.elm,
              inset: row.inset,
              clr: row.clr
            }));
          }
        });
      }
      super.set_inset(inset);
    }

    set_clr(v, ignore_select) {
      if (!ignore_select && this.project.selectedItems.length > 1) {
        this.project.selected_glasses().forEach(elm => {
          if (elm !== this) {
            elm.set_clr(v, true);
          }
        });
      }
      super.set_clr(v);
    }

    purge_paths() {
      const paths = this.children.filter(child => child instanceof paper.Path);
      const { path } = this;
      paths.forEach(p => p !== path && p.remove());
    }

    fill_error() {
      const { path } = this;
      path.fillColor = new paper.Color({
        stops: ["#fee", "#fcc", "#fdd"],
        origin: path.bounds.bottomLeft,
        destination: path.bounds.topRight
      });
    }

    formula(by_art) {
      let res;
      this.project.ox.glass_specification.find_rows({ elm: this.elm }, row => {
        let { name, article } = row.inset;
        const aname = row.inset.name.split(' ');
        if (by_art && article) {
          name = article;
        } else if (aname.length) {
          name = aname[0];
        }
        if (!res) {
          res = name;
        } else {
          res += (by_art ? '*' : 'x') + name;
        }
      });
      return res || (by_art ? this.inset.article || this.inset.name : this.inset.name);
    }

    deselect_onlay_points() {
      for (const _ref of this.imposts) {
        const { generatrix } = _ref;

        generatrix.segments.forEach(segm => {
          if (segm.selected) {
            segm.selected = false;
          }
        });
        if (generatrix.selected) {
          generatrix.selected = false;
        }
      }
    }

    get imposts() {
      return this.getItems({ class: Onlay });
    }

    get profiles() {
      return this._attr._profiles || [];
    }

    remove_onlays() {
      for (let onlay of this.imposts) {
        onlay.remove();
      }
    }

    get area() {
      return (this.bounds.area / 1e6).round(5);
    }

    get form_area() {
      return (this.path.area / 1e6).round(5);
    }

    interiorPoint() {
      return this.path.interiorPoint;
    }

    get is_rectangular() {
      const { profiles, path } = this;
      return profiles.length === 4 && !path.hasHandles() && !profiles.some(({ profile }) => !(Math.abs(profile.angle_hor % 90) < 0.2));
    }

    get generatrix() {
      return this.path;
    }

    get path() {
      return this._attr.path;
    }
    set path(attr) {
      let { _attr, path } = this;

      if (path) {
        path.removeSegments();
      } else {
        path = _attr.path = new paper.Path({ parent: this });
      }

      if (Array.isArray(_attr._profiles)) {
        _attr._profiles.length = 0;
      } else {
        _attr._profiles = [];
      }

      if (attr instanceof paper.Path) {
        path.addSegments(attr.segments);
      } else if (Array.isArray(attr)) {
        let { length } = attr;
        let prev, curr, next, sub_path;
        for (let i = 0; i < length; i++) {
          curr = attr[i];
          next = i === length - 1 ? attr[0] : attr[i + 1];
          sub_path = curr.profile.generatrix.get_subpath(curr.b, curr.e);

          curr.cnn = $p.cat.cnns.elm_cnn(this, curr.profile, $p.enm.cnn_types.acn.ii, curr.cnn || this.project.elm_cnn(this, curr.profile), false, curr.outer);

          curr.sub_path = sub_path.equidistant((sub_path._reversed ? -curr.profile.d1 : curr.profile.d2) + (curr.cnn ? curr.cnn.sz : 20), consts.sticking);
        }
        for (let i = 0; i < length; i++) {
          prev = i === 0 ? attr[length - 1] : attr[i - 1];
          curr = attr[i];
          next = i === length - 1 ? attr[0] : attr[i + 1];
          if (!curr.pb) curr.pb = prev.pe = curr.sub_path.intersect_point(prev.sub_path, curr.b, true);
          if (!curr.pe) curr.pe = next.pb = curr.sub_path.intersect_point(next.sub_path, curr.e, true);
          if (!curr.pb || !curr.pe) {
            if ($p.job_prm.debug) throw "Filling:path";else continue;
          }
          curr.sub_path = curr.sub_path.get_subpath(curr.pb, curr.pe);
        }

        const remove = [];
        for (let i = 0; i < length; i++) {
          prev = i === 0 ? attr[length - 1] : attr[i - 1];
          next = i === length - 1 ? attr[0] : attr[i + 1];
          const crossings = prev.sub_path.getCrossings(next.sub_path);
          if (crossings.length) {
            if (prev.e.getDistance(crossings[0].point) < prev.profile.width * 2 || next.b.getDistance(crossings[0].point) < next.profile.width * 2) {
              remove.push(attr[i]);
              prev.sub_path.splitAt(crossings[0]);
              const nloc = next.sub_path.getLocationOf(crossings[0].point);
              next.sub_path = next.sub_path.splitAt(nloc);
            }
          }
        }
        for (const segm of remove) {
          attr.splice(attr.indexOf(segm), 1);
          length--;
        }

        for (let i = 0; i < length; i++) {
          curr = attr[i];
          path.addSegments(curr.sub_path.segments);
          ["anext", "pb", "pe"].forEach(prop => {
            delete curr[prop];
          });
          _attr._profiles.push(curr);
        }
      }

      if (path.segments.length && !path.closed) {
        path.closePath(true);
      }

      const intersections = path.self_intersections();
      if (intersections.length) {

        const { curves, segments } = path;
        const purge = new Set();
        for (const _ref2 of intersections) {
          const { point } = _ref2;

          for (const rib of attr) {
            rib._sub.b.is_nearest(point, true) && rib._sub.e.is_nearest(point, true) && purge.add(rib);
          }
        }
        if (purge.size) {
          purge.forEach(rib => {
            const ind = attr.indexOf(rib);
            attr.splice(ind, 1);
          });

          return this.path = attr;
        }
      }
      path.reduce();
    }

    get nodes() {
      let res = this.profiles.map(curr => curr.b);
      if (!res.length) {
        const { path, parent } = this;
        if (path) {
          res = parent.glass_nodes(path);
        }
      }
      return res;
    }

    get outer_profiles() {
      return this.profiles;
    }

    get perimeter() {
      const res = [];
      this.profiles.forEach(curr => {
        const tmp = {
          len: curr.sub_path.length,
          angle: curr.e.subtract(curr.b).angle,
          profile: curr.profile
        };
        res.push(tmp);
        if (tmp.angle < 0) {
          tmp.angle += 360;
        }
      });
      return res;
    }

    get bounds() {
      const { path } = this;
      return path ? path.bounds : new paper.Rectangle();
    }

    perimeter_inner(size = 0) {
      const { center } = this.bounds;
      const res = this.outer_profiles.map(curr => {
        const profile = curr.profile || curr.elm;
        const { inner, outer } = profile.rays;
        const sub_path = inner.getNearestPoint(center).getDistance(center, true) < outer.getNearestPoint(center).getDistance(center, true) ? inner.get_subpath(inner.getNearestPoint(curr.b), inner.getNearestPoint(curr.e)) : outer.get_subpath(outer.getNearestPoint(curr.b), outer.getNearestPoint(curr.e));
        let angle = curr.e.subtract(curr.b).angle.round(1);
        if (angle < 0) angle += 360;
        return {
          profile,
          sub_path,
          angle,
          b: curr.b,
          e: curr.e
        };
      });
      const ubound = res.length - 1;
      return res.map((curr, index) => {
        let sub_path = curr.sub_path.equidistant(size);
        const prev = !index ? res[ubound] : res[index - 1];
        const next = index == ubound ? res[0] : res[index + 1];
        const b = sub_path.intersect_point(prev.sub_path.equidistant(size), curr.b, true);
        const e = sub_path.intersect_point(next.sub_path.equidistant(size), curr.e, true);
        if (b && e) {
          sub_path = sub_path.get_subpath(b, e);
        }
        return {
          profile: curr.profile,
          angle: curr.angle,
          len: sub_path.length,
          sub_path
        };
      });
    }

    bounds_light(size = 0) {
      const path = new paper.Path({ insert: false });
      for (const _ref3 of this.perimeter_inner(size)) {
        const { sub_path } = _ref3;

        path.addSegments(sub_path.segments);
      }
      if (path.segments.length && !path.closed) {
        path.closePath(true);
      }
      path.reduce();
      return path.bounds;
    }

    get x1() {
      return (this.bounds.left - this.project.bounds.x).round(1);
    }

    get x2() {
      return (this.bounds.right - this.project.bounds.x).round(1);
    }

    get y1() {
      return (this.project.bounds.height + this.project.bounds.y - this.bounds.bottom).round(1);
    }

    get y2() {
      return (this.project.bounds.height + this.project.bounds.y - this.bounds.top).round(1);
    }

    get info() {
      const { elm, bounds, thickness } = this;
      return "№" + elm + " w:" + bounds.width.toFixed(0) + " h:" + bounds.height.toFixed(0) + " z:" + thickness.toFixed(0);
    }

    get oxml() {
      const oxml = {
        " ": [{ id: "info", path: "o.info", type: "ro" }, "inset", "clr"],
        "Начало": [{ id: "x1", path: "o.x1", synonym: "X1", type: "ro" }, { id: "y1", path: "o.y1", synonym: "Y1", type: "ro" }],
        "Конец": [{ id: "x2", path: "o.x2", synonym: "X2", type: "ro" }, { id: "y2", path: "o.y2", synonym: "Y2", type: "ro" }]
      };
      if (this.selected_cnn_ii()) {
        oxml["Примыкание"] = ["cnn3"];
      }
      return oxml;
    }

    get default_clr_str() {
      return "#def,#d0ddff,#eff";
    }

    get ref() {
      return this.thickness.toFixed();
    }

    get inset() {
      const { _attr, _row } = this;
      if (!_attr._ins_proxy || _attr._ins_proxy.ref != _row.inset) {
        _attr._ins_proxy = new Proxy(_row.inset, {
          get: (target, prop) => {
            switch (prop) {
              case 'presentation':
                return this.formula();

              case 'thickness':
                let res = 0;
                this.project.ox.glass_specification.find_rows({ elm: this.elm }, row => {
                  res += row.inset.thickness;
                });
                return res || _row.inset.thickness;

              default:
                return target[prop];
            }
          }
        });
      }
      return _attr._ins_proxy;
    }
    set inset(v) {
      this.set_inset(v);
    }

  }

  EditorInvisible.Filling = Filling;

  class FreeText extends paper.PointText {

    constructor(attr) {

      if (!attr.fontSize) {
        attr.fontSize = consts.font_size;
        if (attr.parent) {
          const { width, height } = attr.parent.project.bounds;
          const { cutoff, font_size } = consts;
          const size = Math.max(width - cutoff, height - cutoff) / 60;
          attr.fontSize += (size > 0 ? size : 0).round();
        }
      }
      attr.fontFamily = consts.font_family;

      super(attr);

      if (attr.row) {
        this._row = attr.row;
      } else {
        this._row = attr.row = this.project.ox.coordinates.add();
      }

      const { _row } = this;

      if (!_row.cnstr) {
        _row.cnstr = attr.parent.layer.cnstr;
      }

      if (!_row.elm) {
        _row.elm = this.project.ox.coordinates.aggregate([], ["elm"], "max") + 1;
      }

      if (attr.point) {
        if (attr.point instanceof paper.Point) this.point = attr.point;else this.point = new paper.Point(attr.point);
      } else {

        this.clr = _row.clr;
        this.angle = _row.angle_hor;

        if (_row.path_data) {
          var path_data = JSON.parse(_row.path_data);
          this.x = _row.x1 + path_data.bounds_x || 0;
          this.y = _row.y1 - path_data.bounds_y || 0;
          this._mixin(path_data, null, ["bounds_x", "bounds_y"]);
        } else {
          this.x = _row.x1;
          this.y = _row.y1;
        }
      }

      this.bringToFront();
    }

    remove() {
      this._row._owner.del(this._row);
      this._row = null;
      paper.PointText.prototype.remove.call(this);
    }

    save_coordinates() {
      const { _row } = this;

      _row.x1 = this.x;
      _row.y1 = this.y;
      _row.angle_hor = this.angle;

      _row.elm_type = this.elm_type;

      _row.path_data = JSON.stringify({
        text: this.text,
        font_family: this.font_family,
        font_size: this.font_size,
        bold: this.bold,
        align: this.align.ref,
        bounds_x: this.project.bounds.x,
        bounds_y: this.project.bounds.y
      });
    }

    move_points(point) {
      this.point = point;
      this.project.notify(this, 'update', { x: true, y: true });
    }

    get elm_type() {
      return $p.enm.elm_types.Текст;
    }

    _metadata() {
      return $p.dp.builder_text.metadata();
    }

    get _manager() {
      return $p.dp.builder_text;
    }

    get clr() {
      return this._row ? this._row.clr : $p.cat.clrs.get();
    }
    set clr(v) {
      this._row.clr = v;
      if (this._row.clr.clr_str.length == 6) this.fillColor = "#" + this._row.clr.clr_str;
      this.project.register_update();
    }

    get font_family() {
      return this.fontFamily || "";
    }
    set font_family(v) {
      this.fontFamily = v;
      this.project.register_update();
    }

    get font_size() {
      return this.fontSize || consts.font_size;
    }
    set font_size(v) {
      this.fontSize = v;
      this.project.register_update();
    }

    get bold() {
      return this.fontWeight != 'normal';
    }
    set bold(v) {
      this.fontWeight = v ? 'bold' : 'normal';
    }

    get x() {
      return (this.point.x - this.project.bounds.x).round(1);
    }
    set x(v) {
      this.point.x = parseFloat(v) + this.project.bounds.x;
      this.project.register_update();
    }

    get y() {
      const { bounds } = this.project;
      return (bounds.height + bounds.y - this.point.y).round(1);
    }
    set y(v) {
      const { bounds } = this.project;
      this.point.y = bounds.height + bounds.y - parseFloat(v);
    }

    get text() {
      return this.content;
    }
    set text(v) {
      const { project } = this;
      if (v) {
        this.content = v;
        project.register_update();
      } else {
        project.notify(this, 'unload');
        setTimeout(this.remove.bind(this), 50);
      }
    }

    get angle() {
      return Math.round(this.rotation);
    }
    set angle(v) {
      this.rotation = v;
      this.project.register_update();
    }

    get align() {
      return $p.enm.text_aligns.get(this.justification);
    }
    set align(v) {
      this.justification = $p.utils.is_data_obj(v) ? v.ref : v;
      this.project.register_update();
    }

  }

  class GeneratrixElement extends BuilderElement {

    constructor(attr = {}) {
      const { generatrix } = attr;
      if (generatrix) {
        delete attr.generatrix;
      }
      super(attr);
      if (generatrix) {
        attr.generatrix = generatrix;
      }
      this.initialize(attr);
    }

    get b() {
      const { generatrix } = this._attr;
      return generatrix && generatrix.firstSegment.point;
    }
    set b(v) {
      const { _rays, generatrix } = this._attr;
      _rays.clear();
      if (generatrix) generatrix.firstSegment.point = v;
    }

    get e() {
      const { generatrix } = this._attr;
      return generatrix && generatrix.lastSegment.point;
    }
    set e(v) {
      const { _rays, generatrix } = this._attr;
      _rays.clear();
      if (generatrix) generatrix.lastSegment.point = v;
    }

    get x1() {
      const { bounds } = this.project;
      return bounds ? (this.b.x - bounds.x).round(1) : 0;
    }
    set x1(v) {
      const { bounds } = this.project;
      if (bounds && (v = parseFloat(v) + bounds.x - this.b.x)) {
        this.select_node("b");
        this.move_points(new paper.Point(v, 0));
      }
    }

    get y1() {
      const { bounds } = this.project;
      return bounds ? (bounds.height + bounds.y - this.b.y).round(1) : 0;
    }
    set y1(v) {
      const { bounds } = this.project;
      if (bounds && (v = bounds.height + bounds.y - parseFloat(v) - this.b.y)) {
        this.select_node("b");
        this.move_points(new paper.Point(0, v));
      }
    }

    get x2() {
      const { bounds } = this.project;
      return bounds ? (this.e.x - bounds.x).round(1) : 0;
    }
    set x2(v) {
      const { bounds } = this.project;
      if (bounds && (v = parseFloat(v) + bounds.x - this.e.x)) {
        this.select_node("e");
        this.move_points(new paper.Point(v, 0));
      }
    }

    get y2() {
      const { bounds } = this.project;
      return bounds ? (bounds.height + bounds.y - this.e.y).round(1) : 0;
    }
    set y2(v) {
      const { bounds } = this.project;
      if (bounds && (v = bounds.height + bounds.y - parseFloat(v) - this.e.y)) {
        this.select_node("e");
        this.move_points(new paper.Point(0, v));
      }
    }

    select_node(node) {
      const { generatrix, project, _attr, view } = this;
      project.deselect_all_points();
      if (_attr.path) {
        _attr.path.selected = false;
      }
      if (node == "b") {
        generatrix.firstSegment.selected = true;
      } else {
        generatrix.lastSegment.selected = true;
      }
      view.update();
    }

    move_points(delta, all_points, start_point) {

      if (!delta.length) {
        return;
      }

      const other = [];
      const noti = { type: consts.move_points, profiles: [this], points: [] };

      let changed;

      if (!all_points) {
        all_points = !this.generatrix.segments.some(segm => {
          if (segm.selected) return true;
        });
      }

      this.generatrix.segments.forEach(segm => {

        let cnn_point;

        if (segm.selected || all_points) {

          const noti_points = { old: segm.point.clone(), delta: delta };

          const free_point = segm.point.add(delta);

          if (segm.point == this.b) {
            cnn_point = this.rays.b;
            if (!cnn_point.profile_point || paper.Key.isDown('control')) {
              cnn_point = this.cnn_point("b", free_point);
            }
          } else if (segm.point == this.e) {
            cnn_point = this.rays.e;
            if (!cnn_point.profile_point || paper.Key.isDown('control')) {
              cnn_point = this.cnn_point("e", free_point);
            }
          }

          if (cnn_point && cnn_point.cnn_types == $p.enm.cnn_types.acn.t && (segm.point == this.b || segm.point == this.e)) {
            if (cnn_point.point.is_nearest(free_point, 0)) {
              segm.point = cnn_point.point;
            } else {
              const ppath = (cnn_point.profile.nearest(true) ? cnn_point.profile.rays.outer : cnn_point.profile.generatrix).clone({ insert: false });
              const { bounds } = ppath;
              if (Math.abs(delta.y) < consts.epsilon) {
                const ray = new paper.Path({
                  insert: false,
                  segments: [[free_point.x, bounds.top], [free_point.x, bounds.bottom]]
                });
                segm.point = ppath.intersect_point(ray, free_point, true) || free_point;
              } else if (Math.abs(delta.x) < consts.epsilon) {
                const ray = new paper.Path({
                  insert: false,
                  segments: [[bounds.left, free_point.y], [bounds.right, free_point.y]]
                });
                segm.point = ppath.intersect_point(ray, free_point, true) || free_point;
              } else {
                segm.point = free_point;
              }
            }
          } else {
            segm.point = free_point;
            if (cnn_point && !paper.Key.isDown('control')) {
              if (cnn_point.profile && cnn_point.profile_point && !cnn_point.profile[cnn_point.profile_point].is_nearest(free_point)) {
                if (this instanceof Onlay) {
                  this.move_nodes(noti_points.old, free_point);
                } else {
                  other.push(cnn_point.profile_point == "b" ? cnn_point.profile._attr.generatrix.firstSegment : cnn_point.profile._attr.generatrix.lastSegment);
                  cnn_point.profile[cnn_point.profile_point] = free_point;
                  noti.profiles.push(cnn_point.profile);
                }
              }
            }
          }

          noti_points.new = segm.point;
          if (start_point) {
            noti_points.start = start_point;
          }
          noti.points.push(noti_points);

          changed = true;
        }
      });

      if (changed) {
        const { _attr, layer, project } = this;
        _attr._rays.clear();
        layer && layer.notify && layer.notify(noti);
        project.notify(this, 'update', { x1: true, x2: true, y1: true, y2: true });
      }

      return other;
    }

    do_sub_bind(profile, node) {
      const ppath = (profile.nearest(true) ? profile.rays.outer : profile.generatrix).clone({ insert: false });
      let mpoint = ppath.getNearestPoint(this[node]);
      if (!mpoint.is_nearest(this[node], 0)) {
        const gen = this.generatrix.clone({ insert: false }).elongation(1000);
        mpoint = ppath.intersect_point(gen, mpoint, true);
        this[node] = mpoint;
        return true;
      }
    }

  }

  class GridCoordinates extends paper.Group {

    constructor(attr) {
      super();
      this.parent = this.project.l_dimensions;

      const points_color = new paper.Color(0, 0.7, 0, 0.8);
      const sel_color = new paper.Color(0.1, 0.4, 0, 0.9);
      const lines_color = new paper.Color(0, 0, 0.7, 0.8);

      this._attr = {
        lines_color,
        points_color,
        sel_color,
        step: attr.step,
        offset: attr.offset,
        angle: attr.angle,
        bind: attr.bind,
        line: new paper.Path({
          parent: this,
          strokeColor: new paper.Color(0, 0, 0.7),
          strokeWidth: 2,
          strokeScaling: false
        }),
        point: new paper.Path.Circle({
          parent: this,
          guide: true,
          radius: 22,
          fillColor: points_color
        }),
        lines: new paper.Group({
          parent: this,
          guide: true,
          strokeColor: lines_color,
          strokeScaling: false
        })
      };
    }

    get path() {
      return this._attr.path;
    }
    set path(v) {
      this._attr.path = v;
      this._attr.angle = 0;
      this.set_bind();
      this.set_line();
    }

    set_line() {
      const { bind, offset, path, line, angle } = this._attr;
      let { firstSegment: { point: b }, lastSegment: { point: e } } = path;
      if (bind === 'e') {
        [b, e] = [e, b];
      }
      if (line.segments.length) {
        line.segments[0].point = b;
        line.segments[1].point = e;
      } else {
        line.addSegments([b, e]);
      }

      const langle = e.subtract(b).angle.round(2);
      let dangle = Infinity;
      if (angle) {
        for (const a of [angle, angle - 180, angle + 180]) {
          if (Math.abs(a - langle) < Math.abs(dangle)) {
            dangle = a - langle;
          }
        }
      } else {
        for (let a = -180; a <= 180; a += 45) {
          if (Math.abs(a - langle) < Math.abs(dangle)) {
            dangle = a - langle;
          }
        }
      }
      if (dangle) {
        line.rotate(dangle);
        line.elongation(1000);
        line.firstSegment.point = line.getNearestPoint(b);
        line.lastSegment.point = line.getNearestPoint(e);
      }

      const n0 = line.getNormalAt(0).multiply(offset);
      line.firstSegment.point = line.firstSegment.point.subtract(n0);
      line.lastSegment.point = line.lastSegment.point.subtract(n0);
    }

    set_bind() {
      const { point, path, bind } = this._attr;
      switch (bind) {
        case 'b':
          point.position = path.firstSegment.point;
          break;
        case 'e':
          point.position = path.lastSegment.point;
          break;
        case 'product':
          point.position = this.project.bounds.bottomLeft;
          break;
        case 'contour':
          point.position = path.layer.bounds.bottomLeft;
          break;
      }
    }

    get bind() {
      return this._attr.bind;
    }
    set bind(v) {
      this._attr.bind = v;
      this.set_bind();
      this.set_line();
    }

    get step() {
      return this._attr.step;
    }
    set step(v) {
      this._attr.step = v;
      this.set_line();
    }

    get angle() {
      return this._attr.angle;
    }
    set angle(v) {
      if (this._attr.angle !== v) {
        this._attr.angle = v;
        this.set_line();
      }
    }

    get offset() {
      return this._attr.offset;
    }
    set offset(v) {
      this._attr.offset = v;
      this.set_line();
    }

    grid_points(sel_x) {
      const { path, line, lines, lines_color, sel_color, step, bind, point: { position } } = this._attr;
      const res = [];
      const n0 = line.getNormalAt(0).multiply(10000);
      let do_break;
      let prev;

      function add(tpath, x, tpoint, point) {

        let pt;

        if (position.getDistance(point) > 20) {
          pt = new paper.Path.Circle({
            parent: lines,
            guide: true,
            radius: 22,
            center: point,
            fillColor: lines_color
          });
        }

        const pth = new paper.Path({
          parent: lines,
          guide: true,
          strokeColor: lines_color,
          strokeScaling: false,
          segments: [tpoint, point]
        });

        const d1 = tpath.getOffsetOf(tpoint);
        const d2 = tpath.getOffsetOf(point);
        res.push({ x: x.round(1), y: (d2 - d1).round(1) });

        if (Math.abs(x - sel_x) < 10) {
          if (pt) {
            pt.fillColor = sel_color;
          }
          pth.strokeColor = sel_color;
        }
      }

      lines.removeChildren();

      for (let x = 0; x < line.length + step; x += step) {
        if (x >= line.length) {
          if (do_break) {
            break;
          }
          do_break = true;
          x = line.length;
        }
        if (prev && x - prev < step / 4) {
          break;
        }
        prev = x;
        const tpoint = x < line.length ? line.getPointAt(x) : line.lastSegment.point;
        const tpath = new paper.Path({
          segments: [tpoint.subtract(n0), tpoint.add(n0)],
          insert: false
        });
        const intersections = path.getIntersections(tpath);
        if (intersections.length) {
          add(tpath, x, tpoint, intersections[0].point);
        } else if (x < step / 2) {
          add(tpath, x, tpoint, bind === 'e' ? path.lastSegment.point : path.firstSegment.point);
        } else if (x > line.length - step / 2) {
          add(tpath, x, tpoint, bind === 'e' ? path.firstSegment.point : path.lastSegment.point);
        }
      }

      return res;
    }

  }

  class Magnetism {

    constructor(scheme) {
      this.scheme = scheme;
    }

    get selected() {
      const { profiles } = this.scheme.activeLayer;
      const selected = { profiles };
      for (const _ref4 of profiles) {
        const { generatrix } = _ref4;

        if (generatrix.firstSegment.selected) {
          if (selected.profile) {
            selected.break = true;
            break;
          }
          selected.profile = generatrix.parent;
          selected.point = 'b';
        };
        if (generatrix.lastSegment.selected) {
          if (selected.profile) {
            selected.break = true;
            break;
          }
          selected.profile = generatrix.parent;
          selected.point = 'e';
        };
      }
      return selected;
    }

    filter(selected) {
      const point = selected.profile[selected.point];
      const nodes = [selected];

      for (const profile of selected.profiles) {
        if (profile !== selected.profile) {
          if (profile.b.is_nearest(point, true)) {
            nodes.push({ profile, point: 'b' });
          }
          if (profile.e.is_nearest(point, true)) {
            nodes.push({ profile, point: 'e' });
          }
          const px = (profile.nearest(true) ? profile.rays.outer : profile.generatrix).getNearestPoint(point);
          if (px.is_nearest(point, true)) {
            nodes.push({ profile, point: 't' });
          }
        }
      }
      return nodes;
    }

    short_glass(point) {
      for (const glass of this.scheme.activeLayer.glasses(false, true)) {
        const len = glass.outer_profiles.length - 1;
        for (let i = 0; i <= len; i++) {
          const segm = glass.outer_profiles[i];
          if ((segm.b.is_nearest(point) || segm.e.is_nearest(point)) && segm.sub_path && segm.sub_path.length < consts.sticking) {
            const prev = i === 0 ? glass.outer_profiles[len] : glass.outer_profiles[i - 1];
            const next = i === len ? glass.outer_profiles[0] : glass.outer_profiles[i + 1];
            return { segm, prev, next, glass };
          }
        }
      };
    }

    m1() {

      const { tb_left } = this.scheme._scope;
      const previous = tb_left && tb_left.get_selected();

      Promise.resolve().then(() => {

        const { selected } = this;

        if (selected.break) {
          $p.msg.show_msg({
            type: 'alert-info',
            text: `Выделено более одного узла`,
            title: 'Магнит 0-штапик'
          });
        } else if (!selected.profile) {
          $p.msg.show_msg({
            type: 'alert-info',
            text: `Не выделено ни одного узла профиля`,
            title: 'Магнит 0-штапик'
          });
        } else {
          const spoint = selected.profile[selected.point];
          const res = this.short_glass(spoint);
          if (res) {
            const { segm, prev, next, glass } = res;

            let cl, negate;
            this.scheme.cnns.find_rows({ elm1: glass.elm, elm2: segm.profile.elm }, row => {
              cl = row.aperture_len;
            });

            if (!cl) {
              return $p.msg.show_msg({
                type: 'alert-info',
                text: `Не найдена строка соединения короткого ребра заполнения с профилем`,
                title: 'Магнит 0-штапик'
              });
            }

            let pNext, pOur;
            if (prev.profile === selected.profile) {
              pNext = next;
              pOur = prev;
            } else if (next.profile === selected.profile) {
              pNext = prev;
              pOur = next;
            } else {
              return $p.msg.show_msg({
                type: 'alert-info',
                text: `Выделен неподходящий сегмент профиля`,
                title: 'Магнит 0-штапик'
              });
            }

            if (!pNext.profile.nom.sizefaltz || !segm.profile.nom.sizefaltz || !pOur.profile.nom.sizefaltz) {
              return $p.msg.show_msg({
                type: 'alert-info',
                text: `Не задан размер фальца примыкающих профилей`,
                title: 'Магнит 0-штапик'
              });
            }

            const rSegm = (segm.outer ? segm.profile.rays.outer : segm.profile.rays.inner).equidistant(-segm.profile.nom.sizefaltz);
            const rNext = (pNext.outer ? pNext.profile.rays.outer : pNext.profile.rays.inner).equidistant(-pNext.profile.nom.sizefaltz);
            const rOur = (pOur.outer ? pOur.profile.rays.outer : pOur.profile.rays.inner).equidistant(-pOur.profile.nom.sizefaltz);

            const ps = rSegm.intersect_point(rOur, spoint);
            const be = ps.getDistance(segm.profile.b) > ps.getDistance(segm.profile.e) ? 'e' : 'b';
            const da = rSegm.angle_to(rNext, segm.profile[be]);

            let p0 = rSegm.intersect_point(rNext, ps);
            if (!p0 || da < 4) {
              p0 = rNext.getNearestPoint(segm.profile[be]);
            }
            const delta = p0.subtract(ps);
            selected.profile.move_points(delta, true);
          } else {
            $p.msg.show_msg({
              type: 'alert-info',
              text: `Не найдено коротких сегментов заполнений<br />в окрестности выделенной точки`,
              title: 'Магнит 0-штапик'
            });
          }
        }
      });

      if (previous) {
        return this.scheme._scope.select_tool(previous.replace('left_', ''));
      }
    }

  }

  Object.defineProperties(paper.Path.prototype, {

    getDirectedAngle: {
      value(point) {
        if (!point) {
          point = this.interiorPoint;
        }
        const np = this.getNearestPoint(point);
        const offset = this.getOffsetOf(np);
        return this.getTangentAt(offset).getDirectedAngle(point.add(np.negate()));
      }
    },

    self_intersections: {
      value(first) {
        const { curves } = this;
        const res = [];
        curves.some((crv1, i1) => {
          return curves.some((crv2, i2) => {
            if (i2 <= i1) {
              return;
            }
            const intersections = crv1.getIntersections(crv2);
            if (intersections.length) {
              const { point } = intersections[0];
              if (intersections.length > 1) {
                res.push({ crv1, crv2, point });
                if (first) {
                  return true;
                }
              }
              if (crv2.point1.is_nearest(crv1.point2, 0) && point.is_nearest(crv1.point2, 0)) {
                return;
              }
              if (crv1.point1.is_nearest(crv2.point2, 0) && point.is_nearest(crv1.point1, 0)) {
                return;
              }
              res.push({ crv1, crv2, point });
              if (first) {
                return true;
              }
            }
          });
        });
        return res;
      }
    },

    is_self_intersected: {
      value() {
        return this.self_intersections(true).length > 0;
      }
    },

    angle_to: {
      value: function (other, point, interior, round) {
        const p1 = this.getNearestPoint(point),
              p2 = other.getNearestPoint(point),
              t1 = this.getTangentAt(this.getOffsetOf(p1)),
              t2 = other.getTangentAt(other.getOffsetOf(p2));
        let res = t2.angle - t1.angle;
        if (res < 0) {
          res += 360;
        }
        if (interior && res > 180) {
          res = 180 - (res - 180);
        }
        return round ? res.round(round) : res.round(1);
      },
      enumerable: false
    },

    is_linear: {
      value() {
        const { curves, firstCurve } = this;
        if (curves.length === 1 && firstCurve.isLinear()) {
          return true;
        } else if (this.hasHandles()) {
          return false;
        } else {
          const da = firstCurve.point1.getDirectedAngle(firstCurve.point2);
          for (let i = 1; i < curves.length; i++) {
            const dc = curves[i].point1.getDirectedAngle(curves[i].point2);
            if (Math.abs(dc - da) > consts.epsilon) {
              return false;
            }
          }
        }
        return true;
      }
    },

    is_nearest: {
      value(point, sticking) {
        return point.is_nearest(this.getNearestPoint(point), sticking);
      }
    },

    get_subpath: {
      value(point1, point2) {
        let tmp;

        if (!this.length || point1.is_nearest(this.firstSegment.point) && point2.is_nearest(this.lastSegment.point)) {
          tmp = this.clone(false);
        } else if (point2.is_nearest(this.firstSegment.point) && point1.is_nearest(this.lastSegment.point)) {
          tmp = this.clone(false);
          tmp.reverse();
          tmp._reversed = true;
        } else {
          const loc1 = this.getLocationOf(point1) || this.getNearestLocation(point1);
          const loc2 = this.getLocationOf(point2) || this.getNearestLocation(point2);
          const offset1 = loc1.offset;
          const offset2 = loc2.offset;

          if (this.is_linear()) {
            tmp = new paper.Path({
              segments: [loc1.point, loc2.point],
              insert: false
            });
          } else {
            const step = (offset2 - offset1) * 0.02;

            tmp = new paper.Path({
              segments: [loc1.point],
              insert: false
            });

            if (step < 0) {
              tmp._reversed = true;
              for (let i = offset1 + step; i > offset2; i += step) {
                tmp.add(this.getPointAt(i));
              }
            } else if (step > 0) {
              for (let i = offset1 + step; i < offset2; i += step) {
                tmp.add(this.getPointAt(i));
              }
            }
            tmp.add(loc2.point);
            tmp.simplify(0.8);
          }

          if (offset1 > offset2) {
            tmp._reversed = true;
          }
        }

        return tmp;
      }
    },

    equidistant: {
      value(delta, elong) {

        let normal = this.getNormalAt(0);
        const res = new paper.Path({
          segments: [this.firstSegment.point.add(normal.multiply(delta))],
          insert: false
        });

        if (this.is_linear()) {
          res.add(this.lastSegment.point.add(normal.multiply(delta)));
        } else {

          if (this.firstSegment.handleIn.length) {
            res.firstSegment.handleIn = this.firstSegment.handleIn.clone();
          }
          if (this.firstSegment.handleOut.length) {
            res.firstSegment.handleOut = this.firstSegment.handleOut.clone();
          }

          let len = this.length,
              step = len * 0.02,
              point;

          for (let i = step; i < len; i += step) {
            point = this.getPointAt(i);
            if (!point) continue;
            normal = this.getNormalAt(i);
            res.add(point.add(normal.multiply(delta)));
          }

          normal = this.getNormalAt(len);
          res.add(this.lastSegment.point.add(normal.multiply(delta)));

          if (this.lastSegment.handleIn.length) {
            res.lastSegment.handleIn = this.lastSegment.handleIn.clone();
          }
          if (this.lastSegment.handleOut.length) {
            res.lastSegment.handleOut = this.lastSegment.handleOut.clone();
          }

          res.simplify(0.8);
        }

        return res.elongation(elong);
      }
    },

    elongation: {
      value(delta) {

        if (delta) {
          if (this.is_linear()) {
            let tangent = this.getTangentAt(0);
            this.firstSegment.point = this.firstSegment.point.add(tangent.multiply(-delta));
            this.lastSegment.point = this.lastSegment.point.add(tangent.multiply(delta));
          } else {
            const { length } = this;
            let tangent = this.getTangentAt(length * 0.01);
            this.insert(0, this.firstSegment.point.add(tangent.multiply(-delta)));
            tangent = this.getTangentAt(length * 0.99);
            this.add(this.lastSegment.point.add(tangent.multiply(delta)));
          }
        }
        return this;
      }
    },

    intersect_point: {
      value(path, point, elongate) {
        const intersections = this.getIntersections(path);
        let delta = Infinity,
            tdelta,
            tpoint;

        if (intersections.length === 1) {
          return intersections[0].point;
        } else if (intersections.length > 1) {

          if (!point) {
            point = this.getPointAt(this.length / 2);
          }

          intersections.forEach(o => {
            tdelta = o.point.getDistance(point, true);
            if (tdelta < delta) {
              delta = tdelta;
              tpoint = o.point;
            }
          });
          return tpoint;
        } else if (elongate == "nearest") {

          return this.getNearestPoint(path.getNearestPoint(point));
        } else if (elongate) {

          let p1 = this.getNearestPoint(point),
              p2 = path.getNearestPoint(point),
              p1last = this.firstSegment.point.getDistance(p1, true) > this.lastSegment.point.getDistance(p1, true),
              p2last = path.firstSegment.point.getDistance(p2, true) > path.lastSegment.point.getDistance(p2, true),
              tg;

          tg = (p1last ? this.getTangentAt(this.length) : this.getTangentAt(0).negate()).multiply(100);
          if (this.is_linear) {
            if (p1last) this.lastSegment.point = this.lastSegment.point.add(tg);else this.firstSegment.point = this.firstSegment.point.add(tg);
          }

          tg = (p2last ? path.getTangentAt(path.length) : path.getTangentAt(0).negate()).multiply(100);
          if (path.is_linear) {
            if (p2last) path.lastSegment.point = path.lastSegment.point.add(tg);else path.firstSegment.point = path.firstSegment.point.add(tg);
          }

          return this.intersect_point(path, point);
        }
      }
    },

    point_pos: {
      value(point, interior) {
        const np = this.getNearestPoint(interior);
        const offset = this.getOffsetOf(np);
        const line = new paper.Line(np, np.add(this.getTangentAt(offset)));
        return line.getSide(point, true);
      }
    },

    rmin: {
      value() {
        if (!this.hasHandles()) {
          return 0;
        }
        const { length } = this;
        const step = length / 9;
        let max = 0;
        for (let pos = 0; pos < length; pos += step) {
          const curv = Math.abs(this.getCurvatureAt(pos));
          if (curv > max) {
            max = curv;
          }
        }
        return max === 0 ? 0 : 1 / max;
      }
    },

    rmax: {
      value() {
        if (!this.hasHandles()) {
          return 0;
        }
        const { length } = this;
        const step = length / 9;
        let min = Infinity;
        for (let pos = 0; pos < length; pos += step) {
          const curv = Math.abs(this.getCurvatureAt(pos));
          if (curv < min) {
            min = curv;
          }
        }
        return min === 0 ? 0 : 1 / min;
      }
    }

  });

  Object.defineProperties(paper.Point.prototype, {

    is_nearest: {
      value(point, sticking) {
        if (sticking === 0) {
          return Math.abs(this.x - point.x) < consts.epsilon && Math.abs(this.y - point.y) < consts.epsilon;
        }
        return this.getDistance(point, true) < (sticking ? consts.sticking2 : 16);
      }
    },

    point_pos: {
      value(x1, y1, x2, y2) {
        if (Math.abs(x1 - x2) < 0.2) {
          return (this.x - x1) * (y1 - y2);
        }
        if (Math.abs(y1 - y2) < 0.2) {
          return (this.y - y1) * (x2 - x1);
        }
        return (this.y - y1) * (x2 - x1) - (y2 - y1) * (this.x - x1);
      }
    },

    arc_cntr: {
      value(x1, y1, x2, y2, r0, ccw) {
        let a, b, p, r, q, yy1, xx1, yy2, xx2;
        if (ccw) {
          const tmpx = x1,
                tmpy = y1;
          x1 = x2;
          y1 = y2;
          x2 = tmpx;
          y2 = tmpy;
        }
        if (x1 != x2) {
          a = (x1 * x1 - x2 * x2 - y2 * y2 + y1 * y1) / (2 * (x1 - x2));
          b = (y2 - y1) / (x1 - x2);
          p = b * b + 1;
          r = -2 * ((x1 - a) * b + y1);
          q = (x1 - a) * (x1 - a) - r0 * r0 + y1 * y1;
          yy1 = (-r + Math.sqrt(r * r - 4 * p * q)) / (2 * p);
          xx1 = a + b * yy1;
          yy2 = (-r - Math.sqrt(r * r - 4 * p * q)) / (2 * p);
          xx2 = a + b * yy2;
        } else {
          a = (y1 * y1 - y2 * y2 - x2 * x2 + x1 * x1) / (2 * (y1 - y2));
          b = (x2 - x1) / (y1 - y2);
          p = b * b + 1;
          r = -2 * ((y1 - a) * b + x1);
          q = (y1 - a) * (y1 - a) - r0 * r0 + x1 * x1;
          xx1 = (-r - Math.sqrt(r * r - 4 * p * q)) / (2 * p);
          yy1 = a + b * xx1;
          xx2 = (-r + Math.sqrt(r * r - 4 * p * q)) / (2 * p);
          yy2 = a + b * xx2;
        }

        if (new paper.Point(xx1, yy1).point_pos(x1, y1, x2, y2) > 0) {
          return { x: xx1, y: yy1 };
        } else {
          return { x: xx2, y: yy2 };
        }
      }
    },

    arc_point: {
      value(x1, y1, x2, y2, r, arc_ccw, more_180) {
        const point = { x: (x1 + x2) / 2, y: (y1 + y2) / 2 };
        if (r > 0) {
          let dx = x1 - x2,
              dy = y1 - y2,
              dr = r * r - (dx * dx + dy * dy) / 4,
              l,
              h;
          if (dr >= 0) {
            const centr = this.arc_cntr(x1, y1, x2, y2, r, arc_ccw);
            dx = point.x - centr.x;
            dy = point.y - centr.y;
            l = Math.sqrt(dx * dx + dy * dy);

            if (more_180) {
              h = r + Math.sqrt(dr);
            } else {
              h = r - Math.sqrt(dr);
            }

            point.x += dx * h / l;
            point.y += dy * h / l;
          }
        }
        return point;
      }
    },

    arc_r: {
      value(x1, y1, x2, y2, h) {
        if (!h) {
          return 0;
        }
        const [dx, dy] = [x1 - x2, y1 - y2];
        return (h / 2 + (dx * dx + dy * dy) / (8 * h)).round(3);
      }
    },

    snap_to_angle: {
      value(snapAngle) {

        if (!snapAngle) {
          snapAngle = Math.PI * 2 / 8;
        }

        let angle = Math.atan2(this.y, this.x);
        angle = Math.round(angle / snapAngle) * snapAngle;

        const dirx = Math.cos(angle),
              diry = Math.sin(angle),
              d = dirx * this.x + diry * this.y;

        return new paper.Point(dirx * d, diry * d);
      }
    },

    bind_to_nodes: {
      value(sticking, { activeLayer }) {
        return activeLayer && activeLayer.nodes.some(point => {
          if (point.is_nearest(this, sticking)) {
            this.x = point.x;
            this.y = point.y;
            return true;
          }
        });
      }
    }

  });

  class CnnPoint {

    constructor(parent, node) {

      this._parent = parent;
      this._node = node;

      this.initialize();
    }

    get is_t() {
      const { cnn } = this;
      if (!cnn || cnn.cnn_type == $p.enm.cnn_types.УгловоеДиагональное) {
        return false;
      }

      if (cnn.cnn_type == $p.enm.cnn_types.ТОбразное) {
        return true;
      }

      if (cnn.cnn_type == $p.enm.cnn_types.УгловоеКВертикальной && this.parent.orientation != $p.enm.orientations.vert) {
        return true;
      }

      if (cnn.cnn_type == $p.enm.cnn_types.УгловоеКГоризонтальной && this.parent.orientation != $p.enm.orientations.hor) {
        return true;
      }

      return false;
    }

    get is_tt() {
      return !(this.is_i || this.profile_point == 'b' || this.profile_point == 'e' || this.profile == this.parent);
    }

    get is_l() {
      const { cnn } = this;
      const { УгловоеКВертикальной, УгловоеКГоризонтальной } = $p.enm.cnn_types;
      return this.is_t || !!(cnn && (cnn.cnn_type === УгловоеКВертикальной || cnn.cnn_type === УгловоеКГоризонтальной));
    }

    get is_i() {
      return !this.profile && !this.is_cut;
    }

    get is_x() {
      const { cnn } = this;
      return cnn && cnn.cnn_type === $p.enm.cnn_types.КрестВСтык;
    }

    get parent() {
      return this._parent;
    }

    get node() {
      return this._node;
    }

    clear() {
      if (this.profile_point) {
        this.profile_point = '';
      }
      if (this.is_cut) {
        this.is_cut = false;
      }
      this.profile = null;
      this.err = null;
      this.distance = Infinity;
      this.cnn_types = $p.enm.cnn_types.acn.i;
      if (this.cnn && this.cnn.cnn_type != $p.enm.cnn_types.i) {
        this.cnn = null;
      }
      const { _corns } = this._parent._attr;
      if (_corns.length > 5) {
        _corns.length = 5;
      };
    }

    get err() {
      return this._err;
    }

    set err(v) {
      if (!v) {
        this._err.length = 0;
      } else if (this._err.indexOf(v) == -1) {
        this._err.push(v);
      }
    }

    check_err(style) {
      const { _node, _parent } = this;
      const { _corns, _rays } = _parent._attr;
      const len = _node == 'b' ? _corns[1].getDistance(_corns[4]) : _corns[2].getDistance(_corns[3]);
      const angle = _parent.angle_at(_node);
      const { cnn } = this;
      if (!cnn || cnn.lmin && cnn.lmin > len || cnn.lmax && cnn.lmax < len || cnn.amin && cnn.amin > angle || cnn.amax && cnn.amax < angle) {
        if (style) {
          Object.assign(new paper.Path.Circle({
            center: _node == 'b' ? _corns[4].add(_corns[1]).divide(2) : _corns[2].add(_corns[3]).divide(2),
            radius: style.radius || 70
          }), style);
        } else {
          _parent.err_spec_row($p.job_prm.nom.critical_error, cnn ? $p.msg.err_seam_len : $p.msg.err_no_cnn);
        }
      }
    }

    get profile() {
      if (this._profile === undefined && this._row && this._row.elm2) {
        this._profile = this.parent.layer.getItem({ elm: this._row.elm2 });
        delete this._row;
      }
      return this._profile;
    }

    set profile(v) {
      this._profile = v;
    }

    get npoint() {
      const point = this.point || this.parent[this.node];
      if (!this.is_tt) {
        return point;
      }
      const { profile } = this;
      if (!profile || !profile.nearest(true)) {
        return point;
      }
      return profile.nearest(true).generatrix.getNearestPoint(point) || point;
    }

    initialize() {

      const { _parent, _node } = this;

      this._err = [];

      this._row = _parent.project.cnns.find({ elm1: _parent.elm, node1: _node });

      this._profile;

      if (this._row) {

        this.cnn = this._row.cnn;

        if ($p.enm.cnn_types.acn.a.indexOf(this.cnn.cnn_type) != -1) {
          this.cnn_types = $p.enm.cnn_types.acn.a;
        } else if ($p.enm.cnn_types.acn.t.indexOf(this.cnn.cnn_type) != -1) {
          this.cnn_types = $p.enm.cnn_types.acn.t;
        } else {
          this.cnn_types = $p.enm.cnn_types.acn.i;
        }
      } else {
        this.cnn = null;
        this.cnn_types = $p.enm.cnn_types.acn.i;
      }

      this.distance = Infinity;

      this.point = null;

      this.profile_point = '';
    }
  }

  class ProfileRays {

    constructor(parent) {
      this.parent = parent;
      this.b = new CnnPoint(this.parent, 'b');
      this.e = new CnnPoint(this.parent, 'e');
      this.inner = new paper.Path({ insert: false });
      this.outer = new paper.Path({ insert: false });
    }

    clear_segments() {
      if (this.inner.segments.length) {
        this.inner.removeSegments();
      }
      if (this.outer.segments.length) {
        this.outer.removeSegments();
      }
    }

    clear(with_cnn) {
      this.clear_segments();
      if (with_cnn) {
        this.b.clear();
        this.e.clear();
      }
    }

    recalc() {

      const { parent } = this;
      const gen = parent.generatrix;
      const len = gen.length;

      this.clear();

      if (!len) {
        return;
      }

      const { d1, d2, width } = parent;
      const ds = 3 * width;
      const step = len * 0.02;

      let point_b = gen.firstSegment.point,
          tangent_b = gen.getTangentAt(0),
          normal_b = gen.getNormalAt(0),
          point_e = gen.lastSegment.point,
          tangent_e,
          normal_e;

      this.outer.add(point_b.add(normal_b.multiply(d1)).add(tangent_b.multiply(-ds)));
      this.inner.add(point_b.add(normal_b.multiply(d2)).add(tangent_b.multiply(-ds)));

      if (gen.is_linear()) {
        this.outer.add(point_e.add(normal_b.multiply(d1)).add(tangent_b.multiply(ds)));
        this.inner.add(point_e.add(normal_b.multiply(d2)).add(tangent_b.multiply(ds)));
      } else {

        this.outer.add(point_b.add(normal_b.multiply(d1)));
        this.inner.add(point_b.add(normal_b.multiply(d2)));

        for (let i = step; i < len; i += step) {
          point_b = gen.getPointAt(i);
          normal_b = gen.getNormalAt(i);
          this.outer.add(point_b.add(normal_b.normalize(d1)));
          this.inner.add(point_b.add(normal_b.normalize(d2)));
        }

        normal_e = gen.getNormalAt(len);
        this.outer.add(point_e.add(normal_e.multiply(d1)));
        this.inner.add(point_e.add(normal_e.multiply(d2)));

        tangent_e = gen.getTangentAt(len);
        this.outer.add(point_e.add(normal_e.multiply(d1)).add(tangent_e.multiply(ds)));
        this.inner.add(point_e.add(normal_e.multiply(d2)).add(tangent_e.multiply(ds)));
      }

      this.inner.reverse();
    }

  }

  class ProfileItem extends GeneratrixElement {

    get d1() {
      return -(this.d0 - this.sizeb);
    }

    get d2() {
      return this.d1 - this.width;
    }

    hhpoint(side) {
      const { layer, rays } = this;
      const { h_ruch, furn } = layer;
      const { furn_set, handle_side } = furn;
      if (!h_ruch || !handle_side || furn_set.empty()) {
        return;
      }
      if (layer.profile_by_furn_side(handle_side) == this) {
        return rays[side].intersect_point(layer.handle_line(this));
      }
    }

    get hhi() {
      return this.hhpoint('inner');
    }

    get hho() {
      return this.hhpoint('outer');
    }

    get cnn1() {
      return this.cnn_point('b').cnn || $p.cat.cnns.get();
    }

    set cnn1(v) {
      const { rays } = this;
      const cnn = $p.cat.cnns.get(v);
      if (rays.b.cnn != cnn) {
        rays.b.cnn = cnn;
        this.project.register_change();
      }
    }

    get cnn2() {
      return this.cnn_point('e').cnn || $p.cat.cnns.get();
    }

    set cnn2(v) {
      const { rays } = this;
      const cnn = $p.cat.cnns.get(v);
      if (rays.e.cnn != cnn) {
        rays.e.cnn = cnn;
        this.project.register_change();
      }
    }

    angle_at(p) {
      const { profile, point } = this.cnn_point(p);
      if (!profile || !point) {
        return 90;
      }
      const g1 = this.generatrix;
      const g2 = profile.generatrix;
      let offset1 = g1.getOffsetOf(g1.getNearestPoint(point)),
          offset2 = g2.getOffsetOf(g2.getNearestPoint(point));
      if (offset1 < 10) {
        offset1 = 10;
      } else if (Math.abs(offset1 - g1.length) < 10) {
        offset1 = g1.length - 10;
      }
      if (offset2 < 10) {
        offset2 = 10;
      } else if (Math.abs(offset2 - g2.length) < 10) {
        offset2 = g2.length - 10;
      }
      const t1 = g1.getTangentAt(offset1);
      const t2 = g2.getTangentAt(offset2);
      const a = t2.negate().getDirectedAngle(t1).round(1);
      return a > 180 ? a - 180 : a < 0 ? -a : a;
    }

    get a1() {
      return this.angle_at('b');
    }

    get a2() {
      return this.angle_at('e');
    }

    get info() {
      return '№' + this.elm + ' α:' + this.angle_hor.toFixed(0) + '° l:' + this.length.toFixed(0);
    }

    get r() {
      return this._row.r;
    }

    set r(v) {
      const { _row, _attr } = this;
      if (_row.r != v) {
        _attr._rays.clear();
        _row.r = v;
        this.set_generatrix_radius();
        this.project.notify(this, 'update', { r: true, arc_h: true, arc_ccw: true });
      }
    }

    get rmin() {
      return this.generatrix.rmin();
    }

    get rmax() {
      return this.generatrix.rmax();
    }

    get arc_ccw() {
      return this._row.arc_ccw;
    }

    set arc_ccw(v) {
      const { _row, _attr } = this;
      if (_row.arc_ccw != v) {
        _attr._rays.clear();
        _row.arc_ccw = v;
        this.set_generatrix_radius();
        this.project.notify(this, 'update', { r: true, arc_h: true, arc_ccw: true });
      }
    }

    get arc_h() {
      const { _row, b, e, generatrix } = this;
      if (_row.r) {
        const p = generatrix.getPointAt(generatrix.length / 2);
        return paper.Line.getSignedDistance(b.x, b.y, e.x, e.y, p.x, p.y).round(1);
      }
      return 0;
    }

    set arc_h(v) {
      const { _row, _attr, b, e, arc_h } = this;
      v = parseFloat(v);
      if (arc_h != v) {
        _attr._rays.clear();
        if (v < 0) {
          v = -v;
          _row.arc_ccw = true;
        } else {
          _row.arc_ccw = false;
        }
        _row.r = b.arc_r(b.x, b.y, e.x, e.y, v);
        this.set_generatrix_radius(v);
        this.project.notify(this, 'update', { r: true, arc_h: true, arc_ccw: true });
      }
    }

    get angle_hor() {
      const { b, e } = this;
      const res = new paper.Point(e.x - b.x, b.y - e.y).angle.round(2);
      return res < 0 ? res + 360 : res;
    }

    get length() {
      const { b, e, outer } = this.rays;
      const gen = this.elm_type == $p.enm.elm_types.Импост ? this.generatrix : outer;
      const ppoints = {};

      for (let i = 1; i <= 4; i++) {
        ppoints[i] = gen.getNearestPoint(this.corns(i));
      }

      ppoints.b = gen.getOffsetOf(ppoints[1]) < gen.getOffsetOf(ppoints[4]) ? ppoints[1] : ppoints[4];
      ppoints.e = gen.getOffsetOf(ppoints[2]) > gen.getOffsetOf(ppoints[3]) ? ppoints[2] : ppoints[3];

      const sub_gen = gen.get_subpath(ppoints.b, ppoints.e);
      const res = sub_gen.length + (b.cnn ? b.cnn.sz : 0) + (e.cnn ? e.cnn.sz : 0);
      sub_gen.remove();

      return res;
    }

    get orientation() {
      let { angle_hor } = this;
      if (angle_hor > 180) {
        angle_hor -= 180;
      }
      if (angle_hor > -consts.orientation_delta && angle_hor < consts.orientation_delta || angle_hor > 180 - consts.orientation_delta && angle_hor < 180 + consts.orientation_delta) {
        return $p.enm.orientations.hor;
      }
      if (angle_hor > 90 - consts.orientation_delta && angle_hor < 90 + consts.orientation_delta || angle_hor > 270 - consts.orientation_delta && angle_hor < 270 + consts.orientation_delta) {
        return $p.enm.orientations.vert;
      }
      return $p.enm.orientations.incline;
    }

    get rays() {
      const { _rays } = this._attr;
      if (!_rays.inner.segments.length || !_rays.outer.segments.length) {
        _rays.recalc();
      }
      return _rays;
    }

    get addls() {
      return this.children.filter(elm => elm instanceof ProfileAddl);
    }

    get oxml() {
      const oxml = {
        ' ': [{ id: 'info', path: 'o.info', type: 'ro' }, 'inset', 'clr'],
        'Начало': ['x1', 'y1', 'a1', 'cnn1'],
        'Конец': ['x2', 'y2', 'a2', 'cnn2']
      };
      if (this.selected_cnn_ii()) {
        oxml['Примыкание'] = ['cnn3'];
      }
      return oxml;
    }

    get default_clr_str() {
      return 'FEFEFE';
    }

    get opacity() {
      return this.path ? this.path.opacity : 1;
    }

    set opacity(v) {
      this.path && (this.path.opacity = v);
    }

    get dx0() {
      const { cnn } = this.rays.b;
      const main_row = cnn && cnn.main_row(this);
      return main_row && main_row.angle_calc_method == $p.enm.angle_calculating_ways.СварнойШов ? -main_row.sz : 0;
    }

    setSelection(selection) {
      super.setSelection(selection);

      const { generatrix, path } = this._attr;

      generatrix.setSelection(selection);
      this.ruler_line_select(false);

      if (selection) {

        const { inner, outer } = this.rays;

        if (this._hatching) {
          this._hatching.removeChildren();
        } else {
          this._hatching = new paper.CompoundPath({
            parent: this,
            guide: true,
            strokeColor: 'grey',
            strokeScaling: false
          });
        }

        path.setSelection(0);

        for (let t = 0; t < inner.length; t += 50) {
          const ip = inner.getPointAt(t);
          const np = inner.getNormalAt(t).multiply(400).rotate(-35).negate();
          const fp = new paper.Path({
            insert: false,
            segments: [ip, ip.add(np)]
          });
          const op = fp.intersect_point(outer, ip);

          if (ip && op) {
            const cip = path.getNearestPoint(ip);
            const cop = path.getNearestPoint(op);
            const nip = cip.is_nearest(ip);
            const nop = cop.is_nearest(op);
            if (nip && nop) {
              this._hatching.moveTo(cip);
              this._hatching.lineTo(cop);
            } else if (nip && !nop) {
              const pp = fp.intersect_point(path, op);
              if (pp) {
                this._hatching.moveTo(cip);
                this._hatching.lineTo(pp);
              }
            } else if (!nip && nop) {
              const pp = fp.intersect_point(path, ip);
              if (pp) {
                this._hatching.moveTo(pp);
                this._hatching.lineTo(cop);
              }
            }
          }
        }
      } else {
        if (this._hatching) {
          this._hatching.remove();
          this._hatching = null;
        }
      }
    }

    ruler_line_select(mode) {

      const { _attr } = this;

      if (_attr.ruler_line_path) {
        _attr.ruler_line_path.remove();
        delete _attr.ruler_line_path;
      }

      if (mode) {
        switch (_attr.ruler_line = mode) {

          case 'inner':
            _attr.ruler_line_path = this.path.get_subpath(this.corns(3), this.corns(4));
            _attr.ruler_line_path.parent = this;
            _attr.ruler_line_path.selected = true;
            break;

          case 'outer':
            _attr.ruler_line_path = this.path.get_subpath(this.corns(1), this.corns(2));
            _attr.ruler_line_path.parent = this;
            _attr.ruler_line_path.selected = true;
            break;

          default:
            this.generatrix.selected = true;
            break;
        }
      } else if (_attr.ruler_line) {
        delete _attr.ruler_line;
      }
    }

    ruler_line_coordin(xy) {
      switch (this._attr.ruler_line) {
        case 'inner':
          return (this.corns(3)[xy] + this.corns(4)[xy]) / 2;
        case 'outer':
          return (this.corns(1)[xy] + this.corns(2)[xy]) / 2;
        default:
          return (this.b[xy] + this.e[xy]) / 2;
      }
    }

    save_coordinates() {

      const { _attr, _row, rays, generatrix, project: { cnns } } = this;

      if (!generatrix) {
        return;
      }

      const b = rays.b;
      const e = rays.e;
      const row_b = cnns.add({
        elm1: _row.elm,
        node1: 'b',
        cnn: b.cnn,
        aperture_len: this.corns(1).getDistance(this.corns(4)).round(1)
      });
      const row_e = cnns.add({
        elm1: _row.elm,
        node1: 'e',
        cnn: e.cnn,
        aperture_len: this.corns(2).getDistance(this.corns(3)).round(1)
      });

      _row.x1 = this.x1;
      _row.y1 = this.y1;
      _row.x2 = this.x2;
      _row.y2 = this.y2;
      _row.path_data = generatrix.pathData;
      _row.nom = this.nom;

      const rmin = generatrix.rmin();
      if (rmin) {
        _row.r = ((rmin + generatrix.rmax()) / 2).round();
      } else {
        _row.r = 0;
      }

      _row.len = this.length.round(1);

      if (b.profile) {
        row_b.elm2 = b.profile.elm;
        if (b.profile.e.is_nearest(b.point)) {
          row_b.node2 = 'e';
        } else if (b.profile.b.is_nearest(b.point)) {
          row_b.node2 = 'b';
        } else {
          row_b.node2 = 't';
        }
      }
      if (e.profile) {
        row_e.elm2 = e.profile.elm;
        if (e.profile.b.is_nearest(e.point)) {
          row_e.node2 = 'b';
        } else if (e.profile.e.is_nearest(e.point)) {
          row_e.node2 = 'b';
        } else {
          row_e.node2 = 't';
        }
      }

      const nrst = this.nearest();
      if (nrst) {
        cnns.add({
          elm1: _row.elm,
          elm2: nrst.elm,
          cnn: _attr._nearest_cnn,
          aperture_len: _row.len
        });
      }

      _row.angle_hor = this.angle_hor;

      _row.alp1 = Math.round((this.corns(4).subtract(this.corns(1)).angle - generatrix.getTangentAt(0).angle) * 10) / 10;
      if (_row.alp1 < 0) {
        _row.alp1 = _row.alp1 + 360;
      }

      _row.alp2 = Math.round((generatrix.getTangentAt(generatrix.length).angle - this.corns(2).subtract(this.corns(3)).angle) * 10) / 10;
      if (_row.alp2 < 0) {
        _row.alp2 = _row.alp2 + 360;
      }

      _row.elm_type = this.elm_type;

      _row.orientation = this.orientation;
      _row.pos = this.pos;

      this.addls.forEach(addl => addl.save_coordinates());
    }

    initialize(attr) {

      const { project, _attr, _row } = this;
      const h = project.bounds.height + project.bounds.y;

      if (attr.r) {
        _row.r = attr.r;
      }

      if (attr.generatrix) {
        _attr.generatrix = attr.generatrix;
        if (_attr.generatrix._reversed) {
          delete _attr.generatrix._reversed;
        }
      } else {
        if (_row.path_data) {
          _attr.generatrix = new paper.Path(_row.path_data);
        } else {
          const first_point = new paper.Point([_row.x1, h - _row.y1]);
          _attr.generatrix = new paper.Path(first_point);
          if (_row.r) {
            _attr.generatrix.arcTo(first_point.arc_point(_row.x1, h - _row.y1, _row.x2, h - _row.y2, _row.r + 0.001, _row.arc_ccw, false), [_row.x2, h - _row.y2]);
          } else {
            _attr.generatrix.lineTo([_row.x2, h - _row.y2]);
          }
        }
      }

      _attr._corns = [];

      _attr._rays = new ProfileRays(this);

      _attr.generatrix.strokeColor = 'gray';

      _attr.path = new paper.Path();
      _attr.path.strokeColor = 'black';
      _attr.path.strokeWidth = 1;
      _attr.path.strokeScaling = false;
      this.clr = _row.clr.empty() ? $p.job_prm.builder.base_clr : _row.clr;

      this.addChild(_attr.path);
      this.addChild(_attr.generatrix);
    }

    observer(an) {
      const { profiles } = an;
      if (profiles) {
        let binded;
        if (profiles.indexOf(this) == -1) {
          for (const profile of profiles) {
            if (profile instanceof Onlay && !(this instanceof Onlay)) {
              continue;
            }
            binded = true;
            this.do_bind(profile, this.cnn_point('b'), this.cnn_point('e'), an);
          }
          binded && profiles.push(this);
        }
      } else if (an instanceof Profile || an instanceof ProfileConnective) {
        this.do_bind(an, this.cnn_point('b'), this.cnn_point('e'));
      }
    }

    do_bind(profile, bcnn, ecnn, moved) {

      let moved_fact;

      if (profile instanceof ProfileConnective) {
        const gen = profile.generatrix.clone({ insert: false }).elongation(1000);
        this._attr._rays.clear();
        this.b = gen.getNearestPoint(this.b);
        this.e = gen.getNearestPoint(this.e);
        moved_fact = true;
      } else {
        if (bcnn.cnn && bcnn.profile == profile) {
          if ($p.enm.cnn_types.acn.a.indexOf(bcnn.cnn.cnn_type) != -1) {
            if (!this.b.is_nearest(profile.e, 0)) {
              if (bcnn.is_t || bcnn.cnn.cnn_type == $p.enm.cnn_types.ad) {
                if (paper.Key.isDown('control')) {
                  console.log('control');
                } else {
                  if (this.b.getDistance(profile.e, true) < consts.sticking2) {
                    this.b = profile.e;
                  }
                  moved_fact = true;
                }
              } else {
                bcnn.clear();
                this._attr._rays.clear();
              }
            }
          } else if ($p.enm.cnn_types.acn.t.indexOf(bcnn.cnn.cnn_type) != -1 && this.do_sub_bind(profile, 'b')) {
            moved_fact = true;
          }
        }

        if (ecnn.cnn && ecnn.profile == profile) {
          if ($p.enm.cnn_types.acn.a.indexOf(ecnn.cnn.cnn_type) != -1) {
            if (!this.e.is_nearest(profile.b, 0)) {
              if (ecnn.is_t || ecnn.cnn.cnn_type == $p.enm.cnn_types.ad) {
                if (paper.Key.isDown('control')) {
                  console.log('control');
                } else {
                  if (this.e.getDistance(profile.b, true) < consts.sticking2) {
                    this.e = profile.b;
                  }
                  moved_fact = true;
                }
              } else {
                ecnn.clear();
                this._attr._rays.clear();
              }
            }
          } else if ($p.enm.cnn_types.acn.t.indexOf(ecnn.cnn.cnn_type) != -1 && this.do_sub_bind(profile, 'e')) {
            moved_fact = true;
          }
        }
      }

      if (moved && moved_fact) {
        const imposts = this.joined_imposts();
        imposts.inner.concat(imposts.outer).forEach(impost => {
          if (moved.profiles.indexOf(impost) == -1) {
            impost.profile.observer(this);
          }
        });
      }
    }

    cnn_side(profile, interior, rays) {
      if (!interior) {
        interior = profile.interiorPoint();
      }
      if (!rays) {
        rays = this.rays;
      }
      if (!rays || !interior || !rays.inner.length || !rays.outer.length) {
        return $p.enm.cnn_sides.Изнутри;
      }
      return rays.inner.getNearestPoint(interior).getDistance(interior, true) < rays.outer.getNearestPoint(interior).getDistance(interior, true) ? $p.enm.cnn_sides.Изнутри : $p.enm.cnn_sides.Снаружи;
    }

    set_generatrix_radius(height) {
      const { generatrix, _row, layer, selected } = this;
      const b = generatrix.firstSegment.point.clone();
      const e = generatrix.lastSegment.point.clone();
      const min_radius = b.getDistance(e) / 2;

      generatrix.removeSegments(1);
      generatrix.firstSegment.handleIn = null;
      generatrix.firstSegment.handleOut = null;

      let full;
      if (_row.r && _row.r <= min_radius) {
        _row.r = min_radius + 0.0001;
        full = true;
      }
      if (height && height > min_radius) {
        height = min_radius;
      }

      if (selected) {
        this.selected = false;
      }

      if (_row.r) {
        let p = new paper.Point(b.arc_point(b.x, b.y, e.x, e.y, _row.r, _row.arc_ccw, false));
        if (p.point_pos(b.x, b.y, e.x, e.y) > 0 && !_row.arc_ccw || p.point_pos(b.x, b.y, e.x, e.y) < 0 && _row.arc_ccw) {
          p = new paper.Point(b.arc_point(b.x, b.y, e.x, e.y, _row.r, !_row.arc_ccw, false));
        }
        if (full || height) {
          const start = b.add(e).divide(2);
          const vector = p.subtract(start);
          vector.normalize(height || min_radius);
          p = start.add(vector);
        }
        generatrix.arcTo(p, e);
      } else {
        generatrix.lineTo(e);
      }

      layer.notify({
        type: consts.move_points,
        profiles: [this],
        points: []
      });

      if (selected) {
        setTimeout(() => this.selected = selected, 100);
      }
    }

    set_inset(v, ignore_select) {

      const { _row, _attr, project } = this;

      if (!ignore_select && project.selectedItems.length > 1) {
        project.selected_profiles(true).forEach(elm => {
          if (elm != this && elm.elm_type == this.elm_type) {
            elm.set_inset(v, true);
          }
        });
      }

      if (_row.inset != v) {

        _row.inset = v;

        if (_attr && _attr._rays) {

          _attr._rays.clear(true);

          const b = this.cnn_point('b');
          const e = this.cnn_point('e');
          const { cnns } = project;

          if (b.profile && b.profile_point == 'e') {
            const { _rays } = b.profile._attr;
            if (_rays) {
              _rays.clear();
              _rays.e.cnn = null;
            }
          }
          if (e.profile && e.profile_point == 'b') {
            const { _rays } = e.profile._attr;
            if (_rays) {
              _rays.clear();
              _rays.b.cnn = null;
            }
          }

          const { inner, outer } = this.joined_imposts();
          const elm2 = this.elm;
          for (const _ref5 of inner.concat(outer)) {
            const { profile } = _ref5;

            const { b, e } = profile.rays;
            b.profile == this && b.clear(true);
            e.profile == this && e.clear(true);
          }

          for (const _ref6 of this.joined_nearests()) {
            const { _attr, elm } = _ref6;

            _attr._rays && _attr._rays.clear(true);
            _attr._nearest_cnn = null;
            cnns.clear({ elm1: elm, elm2 });
          }

          this.layer.glasses(false, true).forEach(glass => {
            cnns.clear({ elm1: glass.elm, elm2 });
          });
        }

        project.register_change();
      }
    }

    set_clr(v, ignore_select) {
      if (!ignore_select && this.project.selectedItems.length > 1) {
        this.project.selected_profiles(true).forEach(elm => {
          if (elm != this) {
            elm.set_clr(v, true);
          }
        });
      }
      BuilderElement.prototype.set_clr.call(this, v);
    }

    postcalc_cnn(node) {
      const cnn_point = this.cnn_point(node);

      cnn_point.cnn = $p.cat.cnns.elm_cnn(this, cnn_point.profile, cnn_point.cnn_types, cnn_point.cnn);

      if (!cnn_point.point) {
        cnn_point.point = this[node];
      }

      return cnn_point;
    }

    postcalc_inset() {
      this.set_inset(this.project.check_inset({ elm: this }), true);
      return this;
    }

    default_inset(all) {
      const { orientation, project, _attr, elm_type } = this;
      const nearest = this.nearest(true);

      if (nearest || all) {
        let pos = nearest && project._dp.sys.flap_pos_by_impost && elm_type == $p.enm.elm_types.Створка ? nearest.pos : this.pos;
        if (pos == $p.enm.positions.Центр) {
          if (orientation == $p.enm.orientations.vert) {
            pos = [pos, $p.enm.positions.ЦентрВертикаль];
          }
          if (orientation == $p.enm.orientations.hor) {
            pos = [pos, $p.enm.positions.ЦентрГоризонталь];
          }
        }
        this.set_inset(this.project.default_inset({
          elm_type: elm_type,
          pos: pos,
          inset: this.inset
        }), true);
      }
      if (nearest) {
        _attr._nearest_cnn = $p.cat.cnns.elm_cnn(this, _attr._nearest, $p.enm.cnn_types.acn.ii, _attr._nearest_cnn);
      }
    }

    path_points(cnn_point, profile_point) {

      const { _attr, rays, generatrix } = this;
      if (!generatrix.curves.length) {
        return cnn_point;
      }
      const _profile = this;
      const { _corns } = _attr;

      function intersect_point(path1, path2, index, ipoint = cnn_point.point) {
        const intersections = path1.getIntersections(path2);
        let delta = Infinity,
            tdelta,
            point,
            tpoint;

        if (intersections.length == 1) {
          if (index) {
            _corns[index] = intersections[0].point;
          } else {
            return intersections[0].point.getDistance(ipoint, true);
          }
        } else if (intersections.length > 1) {
          intersections.forEach(o => {
            tdelta = o.point.getDistance(ipoint, true);
            if (tdelta < delta) {
              delta = tdelta;
              point = o.point;
            }
          });
          if (index) {
            _corns[index] = point;
          } else {
            return delta;
          }
        }
      }

      const prays = cnn_point.profile instanceof ProfileItem ? cnn_point.profile.rays : cnn_point.profile instanceof Filling ? { inner: cnn_point.profile.path, outer: cnn_point.profile.path } : undefined;

      const { cnn_type } = cnn_point.cnn || {};
      const { cnn_types } = $p.enm;
      if (cnn_point.is_t || cnn_type == cnn_types.xx && !cnn_point.profile_point) {

        if (!cnn_point.profile.path.segments.length) {
          const { _attr, row } = cnn_point.profile;
          if (_attr.force_redraw) {
            if (cnn_point.profile.generatrix && cnn_point.profile.generatrix.segments.length) {
              cnn_point.profile.path.addSegments(cnn_point.profile.generatrix.segments);
              _attr.force_redraw = false;
            } else if (cnn_point.profile.row && cnn_point.profile.row.path_data) {
              cnn_point.profile.path.pathData = cnn_point.profile.row.path_data;
              _attr.force_redraw = false;
            } else {
              throw new Error('cycle redraw');
            }
          } else {
            _attr.force_redraw = true;
            cnn_point.profile.redraw();
            _attr.force_redraw = false;
          }
        }

        const nodes = new Set();
        let profile2;
        cnn_point.point && !(this instanceof Onlay) && this.layer.profiles.forEach(profile => {
          if (profile !== this) {
            if (cnn_point.point.is_nearest(profile.b, true)) {
              const cp = profile.cnn_point('b').profile;
              if (cp !== this) {
                if (cp !== cnn_point.profile || cnn_point.profile.cnn_side(this) === cnn_point.profile.cnn_side(profile)) {
                  nodes.add(profile);
                }
              }
            } else if (cnn_point.point.is_nearest(profile.e, true)) {
              const cp = profile.cnn_point('e').profile;
              if (cp !== this) {
                if (cp !== cnn_point.profile || cnn_point.profile.cnn_side(this) === cnn_point.profile.cnn_side(profile)) {
                  nodes.add(profile);
                }
              }
            } else if (profile.generatrix.is_nearest(cnn_point.point, true)) {
              nodes.add(profile);
            }
          }
        });
        nodes.forEach(p2 => {
          if (p2 !== cnn_point.profile) {
            profile2 = p2;
          }
        });

        const side = cnn_point.profile.cnn_side(this, null, prays) === $p.enm.cnn_sides.Снаружи ? 'outer' : 'inner';

        if (profile2) {
          const interior = generatrix.getPointAt(generatrix.length / 2);
          const prays2 = profile2 && profile2.rays;
          const side2 = profile2.cnn_side(this, null, prays2) === $p.enm.cnn_sides.Снаружи ? 'outer' : 'inner';
          const pt1 = intersect_point(prays[side], rays.outer, 0, interior);
          const pt2 = intersect_point(prays[side], rays.inner, 0, interior);
          const pt3 = intersect_point(prays2[side2], rays.outer, 0, interior);
          const pt4 = intersect_point(prays2[side2], rays.inner, 0, interior);

          if (profile_point == 'b') {
            pt1 < pt3 ? intersect_point(prays[side], rays.outer, 1) : intersect_point(prays2[side2], rays.outer, 1);
            pt2 < pt4 ? intersect_point(prays[side], rays.inner, 4) : intersect_point(prays2[side2], rays.inner, 4);
            intersect_point(prays2[side2], prays[side], 5);
            if (rays.inner.point_pos(_corns[5]) >= 0 || rays.outer.point_pos(_corns[5]) >= 0) {
              delete _corns[5];
            }
          } else if (profile_point == 'e') {
            pt1 < pt3 ? intersect_point(prays[side], rays.outer, 2) : intersect_point(prays2[side2], rays.outer, 2);
            pt2 < pt4 ? intersect_point(prays[side], rays.inner, 3) : intersect_point(prays2[side2], rays.inner, 3);
            intersect_point(prays2[side2], prays[side], 6);
            if (rays.inner.point_pos(_corns[6]) >= 0 || rays.outer.point_pos(_corns[6]) >= 0) {
              delete _corns[6];
            }
          }
        } else {
          if (profile_point == 'b') {
            intersect_point(prays[side], rays.outer, 1);
            intersect_point(prays[side], rays.inner, 4);
            delete _corns[5];
          } else if (profile_point == 'e') {
            intersect_point(prays[side], rays.outer, 2);
            intersect_point(prays[side], rays.inner, 3);
            delete _corns[6];
          }
        }
      } else if (cnn_type == cnn_types.xx) {

        if (cnn_point.profile instanceof Onlay) {
          const width = this.width * 0.7;
          const l = profile_point == 'b' ? width : generatrix.length - width;
          const p = generatrix.getPointAt(l);
          const n = generatrix.getNormalAt(l).normalize(width);
          const np = new paper.Path({
            insert: false,
            segments: [p.subtract(n), p.add(n)]
          });
          if (profile_point == 'b') {
            intersect_point(np, rays.outer, 1);
            intersect_point(np, rays.inner, 4);
          } else if (profile_point == 'e') {
            intersect_point(np, rays.outer, 2);
            intersect_point(np, rays.inner, 3);
          }
        } else {
          const cnn_point2 = cnn_point.profile.cnn_point(cnn_point.profile_point);
          const profile2 = cnn_point2 && cnn_point2.profile;
          if (profile2) {
            const prays2 = profile2 && profile2.rays;
            const pt1 = intersect_point(prays.inner, rays.outer);
            const pt2 = intersect_point(prays.inner, rays.inner);
            const pt3 = intersect_point(prays2.inner, rays.outer);
            const pt4 = intersect_point(prays2.inner, rays.inner);

            if (profile_point == 'b') {
              intersect_point(prays2.inner, prays.inner, 5);
              pt1 > pt3 ? intersect_point(prays.inner, rays.outer, 1) : intersect_point(prays2.inner, rays.outer, 1);
              pt2 > pt4 ? intersect_point(prays.inner, rays.inner, 4) : intersect_point(prays2.inner, rays.inner, 4);
            } else if (profile_point == 'e') {
              pt1 > pt3 ? intersect_point(prays.inner, rays.outer, 2) : intersect_point(prays2.inner, rays.outer, 2);
              pt2 > pt4 ? intersect_point(prays.inner, rays.inner, 3) : intersect_point(prays2.inner, rays.inner, 3);
              intersect_point(prays2.inner, prays.inner, 6);
            }
          } else {
            if (profile_point == 'b') {
              delete _corns[1];
              delete _corns[4];
            } else if (profile_point == 'e') {
              delete _corns[2];
              delete _corns[3];
            }
          }
        }
      } else if (!cnn_point.profile_point || !cnn_point.cnn || cnn_type == cnn_types.i) {
        if (profile_point == 'b') {
          delete _corns[1];
          delete _corns[4];
        } else if (profile_point == 'e') {
          delete _corns[2];
          delete _corns[3];
        }
      } else if (cnn_type == cnn_types.ad) {
        if (profile_point == 'b') {
          intersect_point(prays.outer, rays.outer, 1);
          intersect_point(prays.inner, rays.inner, 4);
        } else if (profile_point == 'e') {
          intersect_point(prays.outer, rays.outer, 2);
          intersect_point(prays.inner, rays.inner, 3);
        }
      } else if (cnn_type == cnn_types.av) {
        if (this.orientation == $p.enm.orientations.vert) {
          if (profile_point == 'b') {
            intersect_point(prays.outer, rays.outer, 1);
            intersect_point(prays.outer, rays.inner, 4);
          } else if (profile_point == 'e') {
            intersect_point(prays.outer, rays.outer, 2);
            intersect_point(prays.outer, rays.inner, 3);
          }
        } else if (this.orientation == $p.enm.orientations.hor) {
          if (profile_point == 'b') {
            intersect_point(prays.inner, rays.outer, 1);
            intersect_point(prays.inner, rays.inner, 4);
          } else if (profile_point == 'e') {
            intersect_point(prays.inner, rays.outer, 2);
            intersect_point(prays.inner, rays.inner, 3);
          }
        } else {
          cnn_point.err = 'orientation';
        }
      } else if (cnn_type == cnn_types.ah) {
        if (this.orientation == $p.enm.orientations.vert) {
          if (profile_point == 'b') {
            intersect_point(prays.inner, rays.outer, 1);
            intersect_point(prays.inner, rays.inner, 4);
          } else if (profile_point == 'e') {
            intersect_point(prays.inner, rays.outer, 2);
            intersect_point(prays.inner, rays.inner, 3);
          }
        } else if (this.orientation == $p.enm.orientations.hor) {
          if (profile_point == 'b') {
            intersect_point(prays.outer, rays.outer, 1);
            intersect_point(prays.outer, rays.inner, 4);
          } else if (profile_point == 'e') {
            intersect_point(prays.outer, rays.outer, 2);
            intersect_point(prays.outer, rays.inner, 3);
          }
        } else {
          cnn_point.err = 'orientation';
        }
      }

      if (profile_point == 'b') {
        if (!_corns[1]) {
          _corns[1] = this.b.add(this.generatrix.firstCurve.getNormalAt(0, true).normalize(this.d1));
        }
        if (!_corns[4]) {
          _corns[4] = this.b.add(this.generatrix.firstCurve.getNormalAt(0, true).normalize(this.d2));
        }
      } else if (profile_point == 'e') {
        if (!_corns[2]) {
          _corns[2] = this.e.add(this.generatrix.lastCurve.getNormalAt(1, true).normalize(this.d1));
        }
        if (!_corns[3]) {
          _corns[3] = this.e.add(this.generatrix.lastCurve.getNormalAt(1, true).normalize(this.d2));
        }
      }

      return cnn_point;
    }

    interiorPoint() {
      const { generatrix, d1, d2 } = this;
      const igen = generatrix.curves.length == 1 ? generatrix.firstCurve.getPointAt(0.5, true) : generatrix.curves.length == 2 ? generatrix.firstCurve.point2 : generatrix.curves[1].point2;
      const normal = generatrix.getNormalAt(generatrix.getOffsetOf(igen));
      return igen.add(normal.multiply(d1).add(normal.multiply(d2)).divide(2));
    }

    select_corn(point) {

      const res = this.corns(point);

      this.path.segments.forEach(segm => {
        if (segm.point.is_nearest(res.point)) {
          res.segm = segm;
        }
      });

      if (!res.segm && res.point == this.b) {
        res.segm = this.generatrix.firstSegment;
      }

      if (!res.segm && res.point == this.e) {
        res.segm = this.generatrix.lastSegment;
      }

      if (res.segm && res.dist < consts.sticking0) {
        this.project.deselectAll();
        res.segm.selected = true;
      }

      return res;
    }

    is_linear() {
      return this.generatrix.is_linear();
    }

    is_nearest(p) {
      return (this.b.is_nearest(p.b, true) || this.generatrix.is_nearest(p.b)) && (this.e.is_nearest(p.e, true) || this.generatrix.is_nearest(p.e));
    }

    is_collinear(p) {
      let angl = p.e.subtract(p.b).getDirectedAngle(this.e.subtract(this.b));
      if (angl < -180) {
        angl += 180;
      }
      return Math.abs(angl) < consts.orientation_delta;
    }

    joined_nearests() {
      return [];
    }

    redraw() {
      const bcnn = this.postcalc_cnn('b');
      const ecnn = this.postcalc_cnn('e');
      const { path, generatrix, rays, project } = this;

      this.path_points(bcnn, 'b');
      this.path_points(ecnn, 'e');

      path.removeSegments();

      this.corns(5) && path.add(this.corns(5));
      path.add(this.corns(1));

      if (generatrix.is_linear()) {
        path.add(this.corns(2));
        this.corns(6) && path.add(this.corns(6));
        path.add(this.corns(3));
      } else {

        let tpath = new paper.Path({ insert: false });
        let offset1 = rays.outer.getNearestLocation(this.corns(1)).offset;
        let offset2 = rays.outer.getNearestLocation(this.corns(2)).offset;
        let step = (offset2 - offset1) / 50;

        for (let i = offset1 + step; i < offset2; i += step) {
          tpath.add(rays.outer.getPointAt(i));
        }
        tpath.simplify(0.8);
        path.join(tpath);
        path.add(this.corns(2));
        this.corns(6) && path.add(this.corns(6));
        path.add(this.corns(3));

        tpath = new paper.Path({ insert: false });
        offset1 = rays.inner.getNearestLocation(this.corns(3)).offset;
        offset2 = rays.inner.getNearestLocation(this.corns(4)).offset;
        step = (offset2 - offset1) / 50;
        for (let i = offset1 + step; i < offset2; i += step) {
          tpath.add(rays.inner.getPointAt(i));
        }
        tpath.simplify(0.8);
        path.join(tpath);
      }

      path.add(this.corns(4));
      path.closePath();
      path.reduce();

      this.children.forEach(elm => {
        if (elm instanceof ProfileAddl) {
          elm.observer(elm.parent);
          elm.redraw();
        }
      });

      return this;
    }

    mark_direction() {
      const { generatrix, rays: { inner, outer } } = this;
      const gb = generatrix.getPointAt(130);
      const ge = generatrix.getPointAt(230);
      const ib = inner.getNearestPoint(gb);
      const ie = inner.getNearestPoint(ge);
      const ob = outer.getNearestPoint(gb);
      const oe = outer.getNearestPoint(ge);

      const b = ib.add(ob).divide(2);
      const e = ie.add(oe).divide(2);
      const c = b.add(e).divide(2);
      const n = e.subtract(b).rotate(90).normalize(10);
      const c1 = c.add(n);
      const c2 = c.subtract(n);

      const path = new paper.Path({
        parent: this,
        segments: [b, e, c1, c2, e],
        strokeColor: 'darkblue',
        strokeCap: 'round',
        strokeWidth: 2,
        strokeScaling: false
      });
    }

    corns(corn) {
      const { _corns } = this._attr;
      if (typeof corn == 'number') {
        return corn < 10 ? _corns[corn] : this.generatrix.getPointAt(corn);
      } else if (corn instanceof paper.Point) {

        const res = { dist: Infinity, profile: this };
        let dist;

        for (let i = 1; i < 5; i++) {
          dist = _corns[i].getDistance(corn);
          if (dist < res.dist) {
            res.dist = dist;
            res.point = _corns[i];
            res.point_name = i;
          }
        }

        const { hhi } = this;
        if (hhi) {
          dist = hhi.getDistance(corn);
          if (dist <= res.dist) {
            res.dist = hhi.getDistance(corn);
            res.point = hhi;
            res.point_name = 'hhi';
          }
          const { hho } = this;
          dist = hho.getDistance(corn);
          if (dist <= res.dist) {
            res.dist = hho.getDistance(corn);
            res.point = hho;
            res.point_name = 'hho';
          }
        }

        dist = this.b.getDistance(corn);
        if (dist <= res.dist) {
          res.dist = this.b.getDistance(corn);
          res.point = this.b;
          res.point_name = 'b';
        } else {
          dist = this.e.getDistance(corn);
          if (dist <= res.dist) {
            res.dist = this.e.getDistance(corn);
            res.point = this.e;
            res.point_name = 'e';
          }
        }

        return res;
      } else {
        const index = corn.substr(corn.length - 1, 1);
        const axis = corn.substr(corn.length - 2, 1);
        return _corns[index][axis];
      }
    }

    has_cnn(profile, point) {

      let t = this;
      while (t.parent instanceof ProfileItem) {
        t = t.parent;
      }
      while (profile.parent instanceof ProfileItem) {
        profile = profile.parent;
      }

      if (t.b.is_nearest(point, true) && t.cnn_point('b').profile == profile || t.e.is_nearest(point, true) && t.cnn_point('e').profile == profile || profile.b.is_nearest(point, true) && profile.cnn_point('b').profile == t || profile.e.is_nearest(point, true) && profile.cnn_point('e').profile == t) {
        return true;
      }

      return false;
    }

    check_distance(element, res, point, check_only) {
      return this.project.check_distance(element, this, res, point, check_only);
    }

    max_right_angle(ares) {
      const { generatrix } = this;
      let has_a = true;
      ares.forEach(res => {
        res._angle = generatrix.angle_to(res.profile.generatrix, res.point);
        if (res._angle > 180) {
          res._angle = 360 - res._angle;
        }
      });
      ares.sort((a, b) => {
        const aa = Math.abs(a._angle - 90);
        const ab = Math.abs(b._angle - 90);
        return aa - ab;
      });
      return has_a;
    }

  }

  class Profile extends ProfileItem {

    constructor(attr) {

      const fromCoordinates = !!attr.row;

      super(attr);

      if (this.parent) {
        const { project: { _scope, ox }, observer } = this;

        this.observer = observer.bind(this);
        _scope.eve.on(consts.move_points, this.observer);

        this.layer.on_insert_elm(this);

        if (fromCoordinates) {
          const { cnstr, elm } = attr.row;
          ox.coordinates.find_rows({ cnstr, parent: { in: [elm, -elm] }, elm_type: $p.enm.elm_types.Добор }, row => new ProfileAddl({ row, parent: this }));
        }
      }
    }

    get d0() {
      const { _attr } = this;
      if (!_attr.hasOwnProperty('d0')) {
        _attr.d0 = 0;
        const nearest = this.nearest();
        if (nearest) {
          _attr.d0 -= nearest.d2 + (_attr._nearest_cnn ? _attr._nearest_cnn.sz : 20);
        }
      }
      return _attr.d0;
    }

    get elm_type() {
      const { _rays, _nearest } = this._attr;

      if (_rays && !_nearest && (_rays.b.is_tt || _rays.e.is_tt)) {
        return $p.enm.elm_types.Импост;
      }

      if (this.layer.parent instanceof Contour) {
        return $p.enm.elm_types.Створка;
      }

      return $p.enm.elm_types.Рама;
    }

    get pos() {
      const by_side = this.layer.profiles_by_side();
      if (by_side.top == this) {
        return $p.enm.positions.Верх;
      }
      if (by_side.bottom == this) {
        return $p.enm.positions.Низ;
      }
      if (by_side.left == this) {
        return $p.enm.positions.Лев;
      }
      if (by_side.right == this) {
        return $p.enm.positions.Прав;
      }
      return $p.enm.positions.Центр;
    }

    nearest(ign_cnn) {

      const { b, e, _attr, layer, project } = this;
      let { _nearest, _nearest_cnn } = _attr;

      if (!ign_cnn && this.inset.empty()) {
        ign_cnn = true;
      }

      const check_nearest = elm => {
        if (!(elm instanceof Profile || elm instanceof ProfileConnective) || !elm.isInserted()) {
          return;
        }
        let { generatrix } = elm;
        if (elm.elm_type === $p.enm.elm_types.Импост) {
          const pb = elm.cnn_point('b').profile;
          const pe = elm.cnn_point('e').profile;
          if (pb && pb.nearest(true) || pe && pe.nearest(true)) {
            generatrix = generatrix.clone({ insert: false }).elongation(90);
          }
        }
        let is_nearest = [];
        if (generatrix.is_nearest(b)) {
          is_nearest.push(b);
        }
        if (generatrix.is_nearest(e)) {
          is_nearest.push(e);
        }
        if (is_nearest.length < 2 && elm instanceof ProfileConnective) {
          if (this.generatrix.is_nearest(elm.b)) {
            if (is_nearest.every(point => !point.is_nearest(elm.b))) {
              is_nearest.push(elm.b);
            }
          }
          if (this.generatrix.is_nearest(elm.e)) {
            if (is_nearest.every(point => !point.is_nearest(elm.e))) {
              is_nearest.push(elm.e);
            }
          }
        }

        if (is_nearest.length > 1) {
          if (!ign_cnn) {
            if (!_nearest_cnn) {
              _nearest_cnn = project.elm_cnn(this, elm);
            }
            let outer;
            if (elm.is_linear()) {
              outer = Math.abs(elm.angle_hor - this.angle_hor) > 60;
            } else {
              const ob = generatrix.getOffsetOf(generatrix.getNearestPoint(b));
              const oe = generatrix.getOffsetOf(generatrix.getNearestPoint(e));
              outer = ob > oe;
            }
            _attr._nearest_cnn = $p.cat.cnns.elm_cnn(this, elm, $p.enm.cnn_types.acn.ii, _nearest_cnn, false, outer);
          }
          _attr._nearest = elm;
          return true;
        }

        _attr._nearest = null;
        _attr._nearest_cnn = null;
      };

      const find_nearest = children => children.some(elm => {
        if (_nearest == elm || !elm.generatrix) {
          return;
        }
        if (check_nearest(elm)) {
          return true;
        } else {
          _attr._nearest = null;
        }
      });

      if (layer && !check_nearest(_attr._nearest)) {
        if (layer.parent) {
          find_nearest(layer.parent.profiles);
        } else {
          find_nearest(project.l_connective.children);
        }
      }

      return _attr._nearest;
    }

    joined_imposts(check_only) {

      const { rays, generatrix, layer } = this;
      const tinner = [];
      const touter = [];

      const candidates = { b: [], e: [] };

      const { Снаружи } = $p.enm.cnn_sides;
      const add_impost = (ip, curr, point) => {
        const res = { point: generatrix.getNearestPoint(point), profile: curr };
        if (this.cnn_side(curr, ip, rays) === Снаружи) {
          touter.push(res);
        } else {
          tinner.push(res);
        }
      };

      if (layer.profiles.some(curr => {
        if (curr != this) {
          for (const pn of ['b', 'e']) {
            const p = curr.cnn_point(pn);
            if (p.profile == this && p.cnn) {

              if (p.cnn.cnn_type == $p.enm.cnn_types.t) {
                if (check_only) {
                  return true;
                }
                add_impost(curr.corns(1), curr, p.point);
              } else {
                candidates[pn].push(curr.corns(1));
              }
            }
          }
        }
      })) {
        return true;
      }

      ['b', 'e'].forEach(node => {
        if (candidates[node].length > 1) {
          candidates[node].some(ip => {
            if (this.cnn_side(null, ip, rays) === Снаружи) {
              this.cnn_point(node).is_cut = true;
              return true;
            }
          });
        }
      });

      return check_only ? false : { inner: tinner, outer: touter };
    }

    joined_nearests() {
      const res = [];

      this.layer.contours.forEach(contour => {
        contour.profiles.forEach(profile => {
          if (profile.nearest(true) == this) {
            res.push(profile);
          }
        });
      });

      return res;
    }

    cnn_point(node, point) {
      const res = this.rays[node];
      const { cnn, profile, profile_point } = res;

      if (!point) {
        point = this[node];
      }

      if (profile && profile.children.length) {
        if (this.check_distance(profile, res, point, true) === false || res.distance < consts.epsilon) {
          return res;
        }
      }

      res.clear();
      if (this.parent) {
        const { allow_open_cnn } = this.project._dp.sys;
        const ares = [];

        for (const profile of this.parent.profiles) {
          if (this.check_distance(profile, res, point, false) === false || res.distance < (res.is_t || !res.is_l ? consts.sticking : consts.sticking_l)) {
            ares.push({
              profile_point: res.profile_point,
              profile: profile,
              cnn_types: res.cnn_types,
              point: res.point
            });
            res.clear();
          }
        }

        if (ares.length === 1) {
          res._mixin(ares[0]);
        } else if (ares.length >= 2) {
          if (this.max_right_angle(ares)) {
            res._mixin(ares[0]);
            if (cnn && res.cnn_types && res.cnn_types.indexOf(cnn.cnn_type) != -1) {
              res.cnn = cnn;
            }
          } else {
            res.clear();
          }
          res.is_cut = true;
        }
      }

      return res;
    }

    t_parent(be) {
      if (this.elm_type != $p.enm.elm_types.Импост) {
        return this;
      }
      const { _rays } = this._attr;
      if (be === 'b') {
        return _rays && _rays.b.profile;
      }
      if (be === 'e') {
        return _rays && _rays.e.profile;
      }
      return _rays && (_rays.b.profile || _rays.e.profile);
    }
  }

  EditorInvisible.Profile = Profile;
  EditorInvisible.ProfileItem = ProfileItem;

  class ProfileAddl extends ProfileItem {

    constructor(attr) {

      const fromCoordinates = !!attr.row;

      super(attr);

      const { project, _attr, _row } = this;

      _attr.generatrix.strokeWidth = 0;

      if (!attr.side && _row.parent < 0) {
        attr.side = "outer";
      }

      _attr.side = attr.side || "inner";

      if (!_row.parent) {
        _row.parent = this.parent.elm;
        if (this.outer) {
          _row.parent = -_row.parent;
        }
      }

      if (fromCoordinates) {
        const { cnstr, elm } = attr.row;
        project.ox.coordinates.find_rows({ cnstr, parent: { in: [elm, -elm] }, elm_type: $p.enm.elm_types.Добор }, row => new ProfileAddl({ row, parent: this }));
      }
    }

    get d0() {
      this.nearest();
      return this._attr._nearest_cnn ? -this._attr._nearest_cnn.sz : 0;
    }

    get outer() {
      return this._attr.side == "outer";
    }

    get elm_type() {
      return $p.enm.elm_types.Добор;
    }

    nearest() {
      const { _attr, parent, project } = this;
      const _nearest_cnn = _attr._nearest_cnn || project.elm_cnn(this, parent);
      _attr._nearest_cnn = $p.cat.cnns.elm_cnn(this, parent, $p.enm.cnn_types.acn.ii, _nearest_cnn, true);
      return parent;
    }

    cnn_point(node, point) {

      const res = this.rays[node];

      const check_distance = (elm, with_addl) => {

        if (elm == this || elm == this.parent) {
          return;
        }

        const gp = elm.generatrix.getNearestPoint(point);
        let distance;

        if (gp && (distance = gp.getDistance(point)) < consts.sticking) {
          if (distance <= res.distance) {
            res.point = gp;
            res.distance = distance;
            res.profile = elm;
          }
        }

        if (with_addl) {
          elm.getItems({ class: ProfileAddl, parent: elm }).forEach(addl => {
            check_distance(addl, with_addl);
          });
        }
      };

      if (!point) {
        point = this[node];
      }

      if (res.profile && res.profile.children.length) {
        check_distance(res.profile);
        if (res.distance < consts.sticking) {
          return res;
        }
      }

      res.clear();
      res.cnn_types = $p.enm.cnn_types.acn.t;

      this.layer.profiles.forEach(addl => check_distance(addl, true));

      return res;
    }

    path_points(cnn_point, profile_point) {

      const { generatrix, rays } = this;
      const interior = generatrix.getPointAt(generatrix.length / 2);

      const _profile = this;
      const _corns = this._attr._corns;

      if (!generatrix.curves.length) {
        return cnn_point;
      }

      function intersect_point(path1, path2, index) {
        var intersections = path1.getIntersections(path2),
            delta = Infinity,
            tdelta,
            point,
            tpoint;

        if (intersections.length == 1) {
          if (index) _corns[index] = intersections[0].point;else return intersections[0].point.getDistance(cnn_point.point, true);
        } else if (intersections.length > 1) {
          intersections.forEach(o => {
            tdelta = o.point.getDistance(cnn_point.point, true);
            if (tdelta < delta) {
              delta = tdelta;
              point = o.point;
            }
          });
          if (index) _corns[index] = point;else return delta;
        }
      }

      const { profile } = cnn_point;
      if (profile) {
        const prays = profile.rays;

        if (!profile.path.segments.length) {
          profile.redraw();
        }

        if (profile_point == "b") {
          if (profile.cnn_side(this, interior, prays) == $p.enm.cnn_sides.Снаружи) {
            intersect_point(prays.outer, rays.outer, 1);
            intersect_point(prays.outer, rays.inner, 4);
          } else {
            intersect_point(prays.inner, rays.outer, 1);
            intersect_point(prays.inner, rays.inner, 4);
          }
        } else if (profile_point == "e") {
          if (profile.cnn_side(this, interior, prays) == $p.enm.cnn_sides.Снаружи) {
            intersect_point(prays.outer, rays.outer, 2);
            intersect_point(prays.outer, rays.inner, 3);
          } else {
            intersect_point(prays.inner, rays.outer, 2);
            intersect_point(prays.inner, rays.inner, 3);
          }
        }
      }

      if (profile_point == "b") {
        if (!_corns[1]) {
          _corns[1] = this.b.add(generatrix.firstCurve.getNormalAt(0, true).normalize(this.d1));
        }
        if (!_corns[4]) {
          _corns[4] = this.b.add(generatrix.firstCurve.getNormalAt(0, true).normalize(this.d2));
        }
      } else if (profile_point == "e") {
        if (!_corns[2]) {
          _corns[2] = this.e.add(generatrix.lastCurve.getNormalAt(1, true).normalize(this.d1));
        }
        if (!_corns[3]) {
          _corns[3] = this.e.add(generatrix.lastCurve.getNormalAt(1, true).normalize(this.d2));
        }
      }
      return cnn_point;
    }

    do_bind(p, bcnn, ecnn, moved) {

      let imposts, moved_fact;

      const bind_node = (node, cnn) => {

        if (!cnn.profile) {
          return;
        }

        const gen = this.outer ? this.parent.rays.outer : this.parent.rays.inner;
        const mpoint = cnn.profile.generatrix.intersect_point(gen, cnn.point, "nearest");
        if (!mpoint.is_nearest(this[node])) {
          this[node] = mpoint;
          moved_fact = true;
        }
      };

      if (this.parent == p) {
        bind_node("b", bcnn);
        bind_node("e", ecnn);
      }

      if (bcnn.cnn && bcnn.profile == p) {

        bind_node("b", bcnn);
      }
      if (ecnn.cnn && ecnn.profile == p) {

        bind_node("e", ecnn);
      }

      if (moved && moved_fact) {}
    }

    glass_segment() {}

  }

  class ProfileConnective extends ProfileItem {

    constructor(attr) {
      super(attr);
      this.parent = this.project.l_connective;
    }

    get d0() {
      return 0;
    }

    get elm_type() {
      return $p.enm.elm_types.Соединитель;
    }

    cnn_point(node) {
      return this.rays[node];
    }

    move_points(delta, all_points, start_point) {

      const nearests = this.joined_nearests();
      const moved = { profiles: [] };

      super.move_points(delta, all_points, start_point);

      if (all_points !== false && !paper.Key.isDown('control')) {
        nearests.forEach(np => {
          np.do_bind(this, null, null, moved);
          ['b', 'e'].forEach(node => {
            const cp = np.cnn_point(node);
            if (cp.profile) {
              cp.profile.do_bind(np, cp.profile.cnn_point("b"), cp.profile.cnn_point("e"), moved);
            }
          });
        });
      }

      this.project.register_change();
    }

    joined_nearests() {

      const res = [];

      this.project.contours.forEach(contour => {
        contour.profiles.forEach(profile => {
          if (profile.nearest(true) === this) {
            res.push(profile);
          }
        });
      });

      return res;
    }

    nearest() {
      return null;
    }

    save_coordinates() {

      if (!this._attr.generatrix) {
        return;
      }

      const { _row, generatrix } = this;

      _row.x1 = this.x1;
      _row.y1 = this.y1;
      _row.x2 = this.x2;
      _row.y2 = this.y2;
      _row.nom = this.nom;
      _row.path_data = generatrix.pathData;
      _row.parent = 0;

      _row.len = this.length;

      _row.angle_hor = this.angle_hor;

      _row.alp1 = Math.round((this.corns(4).subtract(this.corns(1)).angle - generatrix.getTangentAt(0).angle) * 10) / 10;
      if (_row.alp1 < 0) {
        _row.alp1 = _row.alp1 + 360;
      }

      _row.alp2 = Math.round((generatrix.getTangentAt(generatrix.length).angle - this.corns(2).subtract(this.corns(3)).angle) * 10) / 10;
      if (_row.alp2 < 0) {
        _row.alp2 = _row.alp2 + 360;
      }

      _row.elm_type = this.elm_type;
    }

    remove() {
      this.joined_nearests().forEach(rama => {

        const { inner, outer } = rama.joined_imposts();
        for (const _ref7 of inner.concat(outer)) {
          const { profile } = _ref7;

          profile.rays.clear();
        }
        for (const _ref8 of rama.joined_nearests()) {
          const { _attr, elm } = _ref8;

          _attr._rays && _attr._rays.clear();
        }

        const { _attr, layer } = rama;
        _attr._rays && _attr._rays.clear();
        if (_attr._nearest) {
          _attr._nearest = null;
        }
        if (_attr._nearest_cnn) {
          _attr._nearest_cnn = null;
        }

        layer && layer.notify && layer.notify({ profiles: [rama], points: [] }, consts.move_points);
      });
      super.remove();
    }

  }

  class ConnectiveLayer extends paper.Layer {

    redraw() {
      this.children.forEach(elm => elm.redraw());
    }

    save_coordinates() {
      this.children.forEach(elm => elm.save_coordinates && elm.save_coordinates());
    }

    glasses() {
      return [];
    }

    notify(obj, type = 'update') {}
  }

  EditorInvisible.ProfileConnective = ProfileConnective;

  class BaseLine extends ProfileItem {

    constructor(attr) {
      super(attr);
      this.parent = this.project.l_connective;
      Object.assign(this.generatrix, {
        strokeColor: 'brown',
        fillColor: new paper.Color(1, 0.1),
        strokeScaling: false,
        strokeWidth: 2,
        dashOffset: 4,
        dashArray: [4, 4]
      });
    }

    get d0() {
      return 0;
    }

    get d1() {
      return 0;
    }

    get d2() {
      return 0;
    }

    get path() {
      return this.generatrix;
    }
    set path(v) {}

    setSelection(selection) {
      paper.Item.prototype.setSelection.call(this, selection);
    }

    get oxml() {
      return BaseLine.oxml;
    }

    get elm_type() {
      return $p.enm.elm_types.Линия;
    }

    get length() {
      return this.generatrix.length;
    }

    nearest() {
      return null;
    }

    joined_nearests() {

      const res = [];

      this.project.contours.forEach(contour => {
        contour.profiles.forEach(profile => {
          if (profile.nearest(true) === this) {
            res.push(profile);
          }
        });
      });

      return res;
    }

    joined_imposts(check_only) {
      const tinner = [];
      const touter = [];
      return check_only ? false : { inner: tinner, outer: touter };
    }

    save_coordinates() {

      if (!this._attr.generatrix) {
        return;
      }

      const { _row } = this;

      _row.x1 = this.x1;
      _row.y1 = this.y1;
      _row.x2 = this.x2;
      _row.y2 = this.y2;
      _row.path_data = this.generatrix.pathData;
      _row.parent = this.parent.elm;
      _row.len = this.length;
      _row.angle_hor = this.angle_hor;
      _row.elm_type = this.elm_type;
    }

    cnn_point(node) {
      return this.rays[node];
    }

    redraw() {}

  }

  BaseLine.oxml = {
    ' ': [{ id: 'info', path: 'o.info', type: 'ro' }],
    'Начало': ['x1', 'y1'],
    'Конец': ['x2', 'y2']
  };

  class Onlay extends ProfileItem {

    constructor(attr) {
      super(attr);
      if (this.parent) {
        const { project: { _scope }, observer } = this;
        this.observer = observer.bind(this);
        _scope.eve.on(consts.move_points, this.observer);
      }
    }

    get d0() {
      return 0;
    }

    get elm_type() {
      return $p.enm.elm_types.Раскладка;
    }

    nearest() {}

    joined_imposts(check_only) {

      const { rays, generatrix, parent } = this;
      const tinner = [];
      const touter = [];

      const candidates = { b: [], e: [] };

      const add_impost = (ip, curr, point) => {
        const res = { point: generatrix.getNearestPoint(point), profile: curr };
        if (this.cnn_side(curr, ip, rays) === $p.enm.cnn_sides.Снаружи) {
          touter.push(res);
        } else {
          tinner.push(res);
        }
      };

      if (parent.imposts.some(curr => {
        if (curr != this) {
          for (const pn of ['b', 'e']) {
            const p = curr.cnn_point(pn);
            if (p.profile == this && p.cnn) {

              if (p.cnn.cnn_type == $p.enm.cnn_types.t) {
                if (check_only) {
                  return true;
                }
                add_impost(curr.corns(1), curr, p.point);
              } else {
                candidates[pn].push(curr.corns(1));
              }
            }
          }
        }
      })) {
        return true;
      }

      ['b', 'e'].forEach(node => {
        if (candidates[node].length > 1) {
          candidates[node].some(ip => {
            if (this.cnn_side(null, ip, rays) == $p.enm.cnn_sides.Снаружи) {
              this.cnn_point(node).is_cut = true;
              return true;
            }
          });
        }
      });

      return check_only ? false : { inner: tinner, outer: touter };
    }

    save_coordinates() {

      if (!this._attr.generatrix) {
        return;
      }

      const { _row, project, rays, generatrix } = this;
      const { cnns } = project;
      const { b, e } = rays;
      const row_b = cnns.add({
        elm1: _row.elm,
        node1: "b",
        cnn: b.cnn ? b.cnn.ref : "",
        aperture_len: this.corns(1).getDistance(this.corns(4))
      });
      const row_e = cnns.add({
        elm1: _row.elm,
        node1: "e",
        cnn: e.cnn ? e.cnn.ref : "",
        aperture_len: this.corns(2).getDistance(this.corns(3))
      });

      _row.x1 = this.x1;
      _row.y1 = this.y1;
      _row.x2 = this.x2;
      _row.y2 = this.y2;
      _row.path_data = generatrix.pathData;
      _row.nom = this.nom;
      _row.parent = this.parent.elm;

      _row.len = this.length;

      if (b.profile) {
        row_b.elm2 = b.profile.elm;
        if (b.profile instanceof Filling) row_b.node2 = "t";else if (b.profile.e.is_nearest(b.point)) row_b.node2 = "e";else if (b.profile.b.is_nearest(b.point)) row_b.node2 = "b";else row_b.node2 = "t";
      }
      if (e.profile) {
        row_e.elm2 = e.profile.elm;
        if (e.profile instanceof Filling) row_e.node2 = "t";else if (e.profile.b.is_nearest(e.point)) row_e.node2 = "b";else if (e.profile.e.is_nearest(e.point)) row_e.node2 = "b";else row_e.node2 = "t";
      }

      _row.angle_hor = this.angle_hor;

      _row.alp1 = Math.round((this.corns(4).subtract(this.corns(1)).angle - generatrix.getTangentAt(0).angle) * 10) / 10;
      if (_row.alp1 < 0) _row.alp1 = _row.alp1 + 360;

      _row.alp2 = Math.round((generatrix.getTangentAt(generatrix.length).angle - this.corns(2).subtract(this.corns(3)).angle) * 10) / 10;
      if (_row.alp2 < 0) _row.alp2 = _row.alp2 + 360;

      _row.elm_type = this.elm_type;
    }

    cnn_point(node, point) {

      const res = this.rays[node];

      if (!point) {
        point = this[node];
      }

      if (res.profile && res.profile.children.length) {

        if (res.profile instanceof Filling) {
          const np = res.profile.path.getNearestPoint(point);
          if (np.getDistance(point) < consts.sticking_l) {
            res.point = np;
            return res;
          }
        } else {
          if (this.check_distance(res.profile, res, point, true) === false || res.distance < consts.epsilon) {
            return res;
          }
        }
      }

      res.clear();
      if (this.parent) {
        const res_bind = this.bind_node(point);
        if (res_bind.binded) {
          res._mixin(res_bind, ["point", "profile", "cnn_types", "profile_point"]);
        }
      }
      return res;
    }

    bind_node(point, glasses) {

      if (!glasses) {
        glasses = [this.parent];
      }

      let res = { distance: Infinity, is_l: true };

      glasses.some(glass => {
        const np = glass.path.getNearestPoint(point);
        let distance = np.getDistance(point);

        if (distance < res.distance) {
          res.distance = distance;
          res.point = np;
          res.profile = glass;
          res.cnn_types = $p.enm.cnn_types.acn.t;
        }

        if (distance < consts.sticking_l) {
          res.binded = true;
          return true;
        }

        res.cnn_types = $p.enm.cnn_types.acn.t;
        const ares = [];
        for (let elm of glass.imposts) {
          if (elm !== this && elm.project.check_distance(elm, null, res, point, "node_generatrix") === false) {
            ares.push({
              profile_point: res.profile_point,
              profile: res.profile,
              cnn_types: res.cnn_types,
              point: res.point });
          }
        }

        if (ares.length == 1) {
          res._mixin(ares[0]);
        } else if (ares.length >= 2) {
          if (this.max_right_angle(ares)) {
            res._mixin(ares[0]);
          }
          res.is_cut = true;
        }
      });

      if (!res.binded && res.point && res.distance < consts.sticking) {
        res.binded = true;
      }

      return res;
    }

    move_nodes(from, to) {
      for (let elm of this.parent.imposts) {
        if (elm == this) {
          continue;
        }
        if (elm.b.is_nearest(from)) {
          elm.b = to;
        }
        if (elm.e.is_nearest(from)) {
          elm.e = to;
        }
      }
    }

  }

  class Scheme extends paper.Project {

    constructor(_canvas, _editor, _silent) {

      super(_canvas);

      const _scheme = _editor.project = this;

      const _attr = this._attr = {
        _silent,
        _bounds: null,
        _calc_order_row: null,
        _update_timer: 0
      };

      const _changes = this._ch = [];

      this._dp = $p.dp.buyers_order.create();

      this.magnetism = new Magnetism(this);

      const isBrowser = typeof requestAnimationFrame === 'function';

      this.redraw = () => {

        _attr._opened && !_attr._silent && _scheme._scope && isBrowser && requestAnimationFrame(_scheme.redraw);

        if (!_attr._opened || _attr._saving || !_changes.length) {
          return;
        }

        _changes.length = 0;
        const { contours } = _scheme;

        if (contours.length) {

          _scheme.l_connective.redraw();

          isBrowser && !_attr._silent && contours[0].refresh_prm_links(true);

          for (let contour of contours) {
            contour.redraw();
            if (_changes.length) {
              return;
            }
          }

          _attr._bounds = null;
          contours.forEach(({ contours, l_dimensions }) => {
            contours.forEach(l => {
              l.save_coordinates(true);
              isBrowser && l.refresh_prm_links();
            });
            l_dimensions.redraw();
          });

          _scheme.draw_sizes();

          _scheme.view.update();
        } else {
          _scheme.draw_sizes();
        }
      };

      if (!_attr._silent) {
        this._dp_listener = this._dp_listener.bind(this);
        this._dp._manager.on('update', this._dp_listener);
      }
    }

    _dp_listener(obj, fields) {

      const { _attr, ox, _scope } = this;

      if (_attr._loading || _attr._snapshot || obj != this._dp) {
        return;
      }

      const scheme_changed_names = ['clr', 'sys'];
      const row_changed_names = ['quantity', 'discount_percent', 'discount_percent_internal'];

      if (fields.hasOwnProperty('clr') || fields.hasOwnProperty('sys')) {
        this.notify(this, 'scheme_changed');
      }

      if (fields.hasOwnProperty('clr')) {
        ox.clr = obj.clr;
        this.getItems({ class: BuilderElement }).forEach(elm => {
          if (!(elm instanceof Onlay) && !(elm instanceof Filling)) {
            elm.clr = obj.clr;
          }
        });
      }

      if (fields.hasOwnProperty('sys') && !obj.sys.empty()) {

        obj.sys.refill_prm(ox, 0, true);

        _scope.eve.emit_async('rows', ox, { extra_fields: true, params: true });

        for (const contour of this.contours) {
          contour.on_sys_changed();
        }

        if (obj.sys != $p.wsql.get_user_param('editor_last_sys')) {
          $p.wsql.set_user_param('editor_last_sys', obj.sys.ref);
        }

        if (ox.clr.empty()) {
          ox.clr = obj.sys.default_clr;
        }

        this.register_change(true);
      }

      for (const name of row_changed_names) {
        if (_attr._calc_order_row && fields.hasOwnProperty(name)) {
          _attr._calc_order_row[name] = obj[name];
          this.register_change(true);
        }
      }
    }

    _papam_listener(obj, fields) {
      const { _attr, ox } = this;
      if (_attr._loading || _attr._snapshot) {
        return;
      }
      if (obj._owner === ox.params || obj === ox && fields.hasOwnProperty('params')) {
        this.register_change();
      }
    }

    elm_cnn(elm1, elm2) {
      let res;
      this.cnns.find_rows({
        elm1: elm1.elm,
        elm2: elm2.elm
      }, row => {
        res = row.cnn;
        return false;
      });
      return res;
    }

    get cnns() {
      return this.ox.cnn_elmnts;
    }

    get ox() {
      return this._dp.characteristic;
    }

    set ox(v) {
      const { _dp, _attr, _scope } = this;
      let setted;

      if (!_attr._silent) {
        if (!this.hasOwnProperty('_papam_listener')) {
          this._papam_listener = this._papam_listener.bind(this);
        }
        _dp.characteristic._manager.off('update', this._papam_listener);
        _dp.characteristic._manager.off('rows', this._papam_listener);
      }

      _dp.characteristic = v;

      const ox = _dp.characteristic;

      _dp.len = ox.x;
      _dp.height = ox.y;
      _dp.s = ox.s;
      _dp.sys = ox.sys;
      _dp.clr = ox.clr;

      _attr._calc_order_row = ox.calc_order_row;

      if (_attr._calc_order_row) {
        'quantity,price_internal,discount_percent_internal,discount_percent,price,amount,note'.split(',').forEach(fld => _dp[fld] = _attr._calc_order_row[fld]);
      } else {}

      if (_dp.sys.empty()) {
        if (ox.owner.empty()) {
          _dp.sys = $p.wsql.get_user_param('editor_last_sys');
          setted = !_dp.sys.empty();
        } else {
          $p.cat.production_params.find_rows({ is_folder: false }, o => {
            if (setted) {
              return false;
            }
            o.production.find_rows({ nom: ox.owner }, () => {
              _dp.sys = o;
              setted = true;
              return false;
            });
          });
        }
      }

      if (setted) {
        _dp.sys.refill_prm(ox);
      }

      if (_dp.clr.empty()) {
        _dp.clr = _dp.sys.default_clr;
      }

      if (!_attr._silent) {
        _scope.eve.emit_async('rows', ox, { constructions: true });
        _dp._manager.emit_async('rows', _dp, { extra_fields: true });

        _dp.characteristic._manager.on({
          update: this._papam_listener,
          rows: this._papam_listener
        });
      }
    }

    get builder_props() {
      const { ox, _attr } = this;
      return _attr._builder_props || ox.builder_props;
    }

    load_dimension_lines() {
      const { Размер, Радиус } = $p.enm.elm_types;
      this.ox.coordinates.find_rows({ elm_type: { in: [Размер, Радиус] } }, row => {
        const layer = this.getItem({ cnstr: row.cnstr });
        const Constructor = row.elm_type === Размер ? DimensionLineCustom : DimensionRadius;
        layer && new Constructor({
          parent: layer.l_dimensions,
          row: row
        });
      });
    }

    load_contour(parent) {
      this.ox.constructions.find_rows({ parent: parent ? parent.cnstr : 0 }, row => {
        this.load_contour(new Contour({ parent: parent, row: row }));
      });
    }

    load(id, from_service) {
      const { _attr } = this;
      const _scheme = this;

      function load_object(o) {

        _scheme.ox = o;

        _attr._opened = true;
        _attr._bounds = new paper.Rectangle({
          point: [0, 0],
          size: [o.x, o.y]
        });

        o.coordinates.forEach(row => {
          if (row.elm_type === $p.enm.elm_types.Соединитель) {
            new ProfileConnective({ row });
          } else if (row.elm_type === $p.enm.elm_types.Линия) {
            new BaseLine({ row });
          }
        });

        if (typeof from_service === 'object') {
          _attr._builder_props = Object.assign({}, o.constructor.builder_props_defaults, from_service);
        } else {
          delete _attr._builder_props;
        }

        o = null;

        _scheme.load_contour(null);

        _scheme.redraw(from_service);

        return new Promise((resolve, reject) => {

          _attr._bounds = null;

          _scheme.load_dimension_lines();

          setTimeout(() => {

            _attr._bounds = null;
            _scheme.zoom_fit();

            const { _scope } = _scheme;

            if (!_attr._snapshot) {
              _scope._undo.clear();
              _scope._undo.save_snapshot(_scheme);
              _scope.set_text();
            }

            _scheme.register_change(true);

            if (_scheme.contours.length) {
              _scheme.notify(_scheme.contours[0], 'layer_activated', true);
            }

            delete _attr._loading;

            (_scheme.ox.base_block.empty() || !_scheme.ox.base_block.is_new() ? Promise.resolve() : _scheme.ox.base_block.load()).then(() => {
              if (_scheme.ox.coordinates.count()) {
                if (_scheme.ox.specification.count() || from_service) {
                  if (from_service) {
                    Promise.resolve().then(() => {
                      _scheme.draw_visualization();
                      _scheme.zoom_fit();
                      resolve();
                    });
                  } else {
                    setTimeout(() => _scheme.draw_visualization(), 100);
                  }
                } else {
                  $p.products_building.recalc(_scheme, {});
                }
              } else {
                if (from_service) {
                  resolve();
                } else {
                  _scope.load_stamp && _scope.load_stamp();
                }
              }
              delete _attr._snapshot;

              (!from_service || !_scheme.ox.specification.count()) && resolve();
            });
          });
        });
      }

      _attr._loading = true;
      this.ox = null;
      this.clear();

      if ($p.utils.is_data_obj(id) && id.calc_order && !id.calc_order.is_new()) {
        return load_object(id);
      } else if ($p.utils.is_guid(id) || $p.utils.is_data_obj(id)) {
        return $p.cat.characteristics.get(id, true, true).then(ox => $p.doc.calc_order.get(ox.calc_order, true, true).then(() => load_object(ox)));
      }
    }

    draw_fragment(attr) {

      const { l_dimensions, l_connective } = this;

      const contours = this.getItems({ class: Contour });
      contours.forEach(l => l.hidden = true);
      l_dimensions.visible = false;
      l_connective.visible = false;

      let elm;
      if (attr.elm > 0) {
        elm = this.getItem({ class: BuilderElement, elm: attr.elm });
        elm.draw_fragment && elm.draw_fragment();
      } else if (attr.elm < 0) {
        const cnstr = -attr.elm;
        contours.some(l => {
          if (l.cnstr == cnstr) {
            l.hidden = false;
            l.hide_generatrix();
            l.l_dimensions.redraw(true);
            l.zoom_fit();
            return true;
          }
        });
      }
      this.view.update();
      return elm;
    }

    has_changes() {
      return this._ch.length > 0;
    }

    register_update() {
      const { _attr } = this;
      if (_attr._update_timer) {
        clearTimeout(_attr._update_timer);
      }
      _attr._update_timer = setTimeout(() => {
        this.view && this.view.update();
        _attr._update_timer = 0;
      }, 100);
    }

    register_change(with_update) {

      const { _attr, _ch } = this;

      if (!_attr._loading) {

        _attr._bounds = null;

        this.getItems({ class: Profile }).forEach(p => {
          delete p._attr.d0;
        });

        this.ox._data._modified = true;
        this.notify(this, 'scheme_changed');
      }
      _ch.push(Date.now());

      if (with_update) {
        this.register_update();
      }
    }

    get bounds() {
      const { _attr } = this;
      if (!_attr._bounds) {
        this.contours.forEach(l => {
          if (!_attr._bounds) {
            _attr._bounds = l.bounds;
          } else {
            _attr._bounds = _attr._bounds.unite(l.bounds);
          }
        });
      }
      return _attr._bounds;
    }

    get dimension_bounds() {
      let { bounds } = this;
      this.getItems({ class: DimensionLine }).forEach(dl => {
        if (dl instanceof DimensionLineCustom || dl._attr.impost || dl._attr.contour) {
          bounds = bounds.unite(dl.bounds);
        }
      });
      this.contours.forEach(({ l_visualization }) => {
        const ib = l_visualization._by_insets.bounds;
        if (ib.height && ib.bottom > bounds.bottom) {
          const delta = ib.bottom - bounds.bottom + 10;
          bounds = bounds.unite(new paper.Rectangle(bounds.bottomLeft, bounds.bottomRight.add([0, delta < 250 ? delta * 1.1 : delta * 1.2])));
        }
      });
      return bounds;
    }

    get strokeBounds() {
      let bounds = this.l_dimensions.strokeBounds;
      this.contours.forEach(l => bounds = bounds.unite(l.strokeBounds));
      return bounds;
    }

    get _calc_order_row() {
      const { _attr, ox } = this;
      if (!_attr._calc_order_row && !ox.empty()) {
        _attr._calc_order_row = ox.calc_order_row;
      }
      return _attr._calc_order_row;
    }

    notify(obj, type = 'update', fields) {
      if (obj.type) {
        type = obj.type;
      }
      this._scope.eve.emit_async(type, obj, fields);
    }

    clear() {
      const { _attr } = this;
      const pnames = '_bounds,_update_timer,_loading,_snapshot,_silent';
      for (let fld in _attr) {
        if (!pnames.match(fld)) {
          delete _attr[fld];
        }
      }

      super.clear();
    }

    unload() {
      const { _dp, _attr, _calc_order_row } = this;
      const pnames = '_loading,_saving';
      for (let fld in _attr) {
        if (pnames.match(fld)) {
          _attr[fld] = true;
        } else {
          delete _attr[fld];
        }
      }

      if (this.hasOwnProperty('_dp_listener')) {
        _dp._manager.off('update', this._dp_listener);
        this._dp_listener = null;
      }

      const ox = _dp.characteristic;
      if (this.hasOwnProperty('_papam_listener')) {
        ox._manager.off('update', this._papam_listener);
        ox._manager.off('rows', this._papam_listener);
        this._papam_listener = null;
      }
      if (ox && ox._modified) {
        if (ox.is_new()) {
          if (_calc_order_row) {
            ox.calc_order.production.del(_calc_order_row);
          }
          ox.unload();
        } else {
          setTimeout(ox.load.bind(ox), 100);
        }
      }

      this.remove();
    }

    move_points(delta, all_points) {

      const other = [];
      const layers = [];
      const profiles = new Set();

      const { auto_align, _dp } = this;

      for (const item of this.selectedItems) {
        const { parent, layer } = item;

        if (item instanceof paper.Path && parent instanceof GeneratrixElement && !profiles.has(parent)) {

          profiles.add(parent);

          if (parent._hatching) {
            parent._hatching.remove();
            parent._hatching = null;
          }

          if (layer instanceof ConnectiveLayer) {
            other.push.apply(other, parent.move_points(delta, all_points));
          } else if (!parent.nearest || !parent.nearest()) {

            if (auto_align && parent.elm_type === $p.enm.elm_types.Импост && !parent.layer.layer && Math.abs(delta.x) > 1) {
              continue;
            }

            let check_selected;
            item.segments.forEach(segm => {
              if (segm.selected && other.indexOf(segm) != -1) {
                check_selected = !(segm.selected = false);
              }
            });

            if (check_selected && !item.segments.some(segm => segm.selected)) {
              continue;
            }

            other.push.apply(other, parent.move_points(delta, all_points));

            if (layers.indexOf(layer) == -1) {
              layers.push(layer);
              layer.l_dimensions.clear();
            }
          }
        } else if (item instanceof Filling) {
          item.purge_paths();
        }
      }

      if (other.length && Math.abs(delta.x) > 1) {
        this.do_align(auto_align, profiles);
      } else {
        setTimeout(() => {
          this.contours.forEach(l => l.redraw());
        }, 100);
      }

      _dp._manager.emit_async('update', {}, { x1: true, x2: true, y1: true, y2: true, a1: true, a2: true, cnn1: true, cnn2: true, info: true });
    }

    save_coordinates(attr) {

      const { _attr, bounds, ox } = this;

      if (!bounds) {
        return;
      }

      _attr._saving = true;
      ox._data._loading = true;

      ox.x = bounds.width.round(1);
      ox.y = bounds.height.round(1);
      ox.s = this.area;

      ox.cnn_elmnts.clear();
      ox.glasses.clear();

      this.contours.forEach(contour => contour.save_coordinates());

      this.l_connective.save_coordinates();

      $p.products_building.recalc(this, attr);
    }

    zoom_fit(bounds, isNode) {

      if (!bounds) {
        bounds = this.strokeBounds;
      }

      if (bounds) {
        if (!isNode) {
          isNode = $p.wsql.alasql.utils.isNode;
        }
        const space = isNode ? 160 : 320;
        const min = 900;
        let { width, height, center } = bounds;
        if (width < min) {
          width = min;
        }
        if (height < min) {
          height = min;
        }
        width += space;
        height += space;
        const { view } = this;
        view.zoom = Math.min(view.viewSize.height / height, view.viewSize.width / width);
        const dx = view.viewSize.width - width * view.zoom;
        if (isNode) {
          const dy = view.viewSize.height - height * view.zoom;
          view.center = center.add([dx, -dy]);
        } else {
          view.center = center.add([dx / 2, 50]);
        }
      }
    }

    get_svg(attr) {
      this.deselectAll();

      const svg = this.exportSVG();
      const bounds = this.strokeBounds.unite(this.l_dimensions.strokeBounds);

      svg.setAttribute('x', bounds.x);
      svg.setAttribute('y', bounds.y);
      svg.setAttribute('width', bounds.width);
      svg.setAttribute('height', bounds.height);
      svg.querySelector('g').removeAttribute('transform');

      return svg.outerHTML;
    }

    load_stamp(obx, is_snapshot) {

      const do_load = obx => {

        const { ox } = this;

        this.clear();

        const src = Object.assign({ _not_set_loaded: true }, is_snapshot ? obx : obx._obj);
        ox._mixin(src, null, 'ref,name,calc_order,product,leading_product,leading_elm,origin,base_block,note,partner,_not_set_loaded,_rev'.split(','), true);

        if (!is_snapshot) {
          ox.base_block = obx.base_block.empty() || obx.base_block.calc_order.obj_delivery_state === $p.enm.obj_delivery_states.Шаблон ? obx : obx.base_block;
        }

        this.load(ox);
        ox._data._modified = true;
      };

      this._attr._loading = true;

      if (is_snapshot) {
        this._attr._snapshot = true;
        do_load(obx);
      } else {
        $p.cat.characteristics.get(obx, true, true).then(do_load);
      }
    }

    get auto_align() {
      const { calc_order, base_block } = this.ox;
      const { Шаблон } = $p.enm.obj_delivery_states;
      if (base_block.empty() || calc_order.obj_delivery_state == Шаблон || base_block.calc_order.obj_delivery_state != Шаблон) {
        return false;
      }
      const { auto_align } = $p.job_prm.properties;
      let align;
      if (auto_align) {
        base_block.params.find_rows({ param: auto_align }, row => {
          align = row.value;
          return false;
        });
        return align && align != '_' && align;
      }
    }

    do_align(auto_align, profiles) {

      if (!auto_align || !profiles.size) {
        return;
      }

      const layers = new Set();
      for (const profile of profiles) {
        profile.layer.fillings && layers.add(profile.layer);
      }

      if (this._attr._align_timer) {
        clearTimeout(this._attr._align_timer);
      }

      this._attr._align_timer = setTimeout(() => {

        this._attr._align_timer = 0;

        const glasses = [];
        for (const layer of layers) {
          for (const filling of layer.fillings) {
            glasses.indexOf(filling) == -1 && glasses.push(filling);
          }
        }
        this._scope.glass_align('width', glasses);
      }, 100);
    }

    resize_canvas(w, h) {
      const { viewSize } = this.view;
      viewSize.width = w;
      viewSize.height = h;
    }

    get contours() {
      return this.layers.filter(l => l instanceof Contour);
    }

    get area() {
      return this.contours.reduce((sum, { area }) => sum + area, 0).round(3);
    }

    get form_area() {
      return this.contours.reduce((sum, { form_area }) => sum + form_area, 0).round(3);
    }

    get clr() {
      return this.ox.clr;
    }

    set clr(v) {
      this.ox.clr = v;
    }

    get l_dimensions() {
      const { activeLayer, _attr } = this;

      if (!_attr.l_dimensions) {
        _attr.l_dimensions = new DimensionLayer();
      }
      if (!_attr.l_dimensions.isInserted()) {
        this.addLayer(_attr.l_dimensions);
      }
      if (activeLayer) {
        this._activeLayer = activeLayer;
      }

      return _attr.l_dimensions;
    }

    get l_connective() {
      const { activeLayer, _attr } = this;

      if (!_attr.l_connective) {
        _attr.l_connective = new ConnectiveLayer();
      }
      if (!_attr.l_connective.isInserted()) {
        this.addLayer(_attr.l_connective);
      }
      if (activeLayer) {
        this._activeLayer = activeLayer;
      }

      return _attr.l_connective;
    }

    draw_sizes() {

      const { bounds, l_dimensions, builder_props } = this;

      if (bounds && builder_props.auto_lines) {

        if (!l_dimensions.bottom) {
          l_dimensions.bottom = new DimensionLine({
            pos: 'bottom',
            parent: l_dimensions,
            offset: -120
          });
        } else {
          l_dimensions.bottom.offset = -120;
        }

        if (!l_dimensions.right) {
          l_dimensions.right = new DimensionLine({
            pos: 'right',
            parent: l_dimensions,
            offset: -120
          });
        } else {
          l_dimensions.right.offset = -120;
        }

        if (this.contours.some(l => l.l_dimensions.children.some(dl => dl.pos == 'right' && Math.abs(dl.size - bounds.height) < consts.sticking_l))) {
          l_dimensions.right.visible = false;
        } else {
          l_dimensions.right.redraw();
        }

        if (this.contours.some(l => l.l_dimensions.children.some(dl => dl.pos == 'bottom' && Math.abs(dl.size - bounds.width) < consts.sticking_l))) {
          l_dimensions.bottom.visible = false;
        } else {
          l_dimensions.bottom.redraw();
        }
      } else {
        if (l_dimensions.bottom) {
          l_dimensions.bottom.visible = false;
        }
        if (l_dimensions.right) {
          l_dimensions.right.visible = false;
        }
      }
    }

    draw_visualization() {
      if (this.view) {
        for (let contour of this.contours) {
          contour.draw_visualization();
        }
        this.view.update();
      }
    }

    default_inset(attr) {

      let rows;

      if (!attr.pos) {
        rows = this._dp.sys.inserts(attr.elm_type, true);
        if (attr.inset && rows.some(row => attr.inset == row)) {
          return attr.inset;
        }
        return rows[0];
      }

      rows = this._dp.sys.inserts(attr.elm_type, 'rows');

      if (rows.length == 1) {
        return rows[0].nom;
      }

      const pos_array = Array.isArray(attr.pos);

      function check_pos(pos) {
        if (pos_array) {
          return attr.pos.some(v => v == pos);
        }
        return attr.pos == pos;
      }

      if (attr.inset && rows.some(row => attr.inset == row.nom && (check_pos(row.pos) || row.pos == $p.enm.positions.Любое))) {
        return attr.inset;
      }

      let inset;
      rows.some(row => {
        if (check_pos(row.pos) && row.by_default) {
          return inset = row.nom;
        }
      });
      if (!inset) {
        rows.some(row => {
          if (check_pos(row.pos)) {
            return inset = row.nom;
          }
        });
      }
      if (!inset) {
        rows.some(row => {
          if (row.pos == $p.enm.positions.Любое && row.by_default) {
            return inset = row.nom;
          }
        });
      }
      if (!inset) {
        rows.some(row => {
          if (row.pos == $p.enm.positions.Любое) {
            return inset = row.nom;
          }
        });
      }

      return inset;
    }

    check_inset(attr) {
      const inset = attr.inset ? attr.inset : attr.elm.inset;
      const elm_type = attr.elm ? attr.elm.elm_type : attr.elm_type;
      const rows = [];

      let finded;
      this._dp.sys.elmnts.forEach(row => {
        if (elm_type ? row.elm_type == elm_type : true) {
          if (row.nom === inset) {
            finded = true;
            return false;
          }
          rows.push(row);
        }
      });

      if (finded) {
        return inset;
      }
      if (rows.length) {
        return rows[0].nom;
      }
    }

    check_distance(element, profile, res, point, check_only) {
      const { acn } = $p.enm.cnn_types;

      let distance,
          gp,
          cnns,
          addls,
          bind_node = typeof check_only == 'string' && check_only.indexOf('node') != -1,
          bind_generatrix = typeof check_only == 'string' ? check_only.indexOf('generatrix') != -1 : check_only,
          node_distance;

      function check_node_distance(node) {

        if ((distance = element[node].getDistance(point)) < parseFloat(consts.sticking_l)) {

          if (typeof res.distance == 'number' && res.distance < distance) {
            res.profile = element;
            res.profile_point = node;
            return 1;
          }

          if (profile && (!res.cnn || res.cnn.empty())) {

            cnns = $p.cat.cnns.nom_cnn(element, profile, acn.a);
            if (!cnns.length) {
              if (!element.is_collinear(profile)) {
                cnns = $p.cat.cnns.nom_cnn(profile, element, acn.t);
              }
              if (!cnns.length) {
                return 1;
              }
            }
          } else if (res.cnn && acn.a.indexOf(res.cnn.cnn_type) == -1) {
            return 1;
          }

          res.point = bind_node ? element[node] : point;
          res.distance = distance;
          res.profile = element;
          if (cnns && cnns.length && acn.t.indexOf(cnns[0].cnn_type) != -1) {
            res.profile_point = '';
            res.cnn_types = acn.t;
            if (!res.cnn) {
              res.cnn = cnns[0];
            }
          } else {
            res.profile_point = node;
            res.cnn_types = acn.a;
          }

          return 2;
        }
      }

      const b = res.profile_point === 'b' ? 'b' : 'e';
      const e = b === 'b' ? 'e' : 'b';

      if (element === profile) {
        if (profile.is_linear()) {
          return;
        } else {}
        return;
      } else if ((node_distance = check_node_distance(b)) || (node_distance = check_node_distance(e))) {
        if (res.cnn_types !== acn.a && res.profile_point) {
          res.cnn_types = acn.a;
          res.distance = distance;
        }
        return node_distance == 2 ? false : void 0;
      }

      res.profile_point = '';

      gp = element.generatrix.getNearestPoint(point);
      distance = gp.getDistance(point);

      if (distance < (res.is_t || !res.is_l ? consts.sticking : consts.sticking_l)) {

        if (distance < res.distance || bind_generatrix) {
          if (element.d0 != 0 && element.rays.outer) {
            res.point = element.rays.outer.getNearestPoint(point);
            res.distance = 0;
          } else {
            res.point = gp;
            res.distance = distance;
          }
          res.profile = element;
          res.cnn_types = acn.t;
        }
        if (bind_generatrix) {
          return false;
        }
      }
    }

    default_clr(attr) {
      return this.ox.clr;
    }

    get default_furn() {
      var sys = this._dp.sys,
          res;
      while (true) {
        if (res = $p.job_prm.builder.base_furn[sys.ref]) {
          break;
        }
        if (sys.empty()) {
          break;
        }
        sys = sys.parent;
      }
      if (!res) {
        res = $p.job_prm.builder.base_furn.null;
      }
      if (!res) {
        $p.cat.furns.find_rows({ is_folder: false, is_set: false, id: { not: '' } }, row => {
          res = row;
          return false;
        });
      }
      return res;
    }

    selected_profiles(all) {
      const res = [];
      const count = this.selectedItems.length;

      this.selectedItems.forEach(item => {

        const p = item.parent;

        if (p instanceof ProfileItem) {
          if (all || !item.layer.parent || !p.nearest || !p.nearest()) {

            if (res.indexOf(p) != -1) {
              return;
            }

            if (count < 2 || !(p._attr.generatrix.firstSegment.selected ^ p._attr.generatrix.lastSegment.selected)) {
              res.push(p);
            }
          }
        }
      });

      return res;
    }

    selected_glasses() {
      const res = [];

      this.selectedItems.forEach(item => {

        if (item instanceof Filling && res.indexOf(item) == -1) {
          res.push(item);
        } else if (item.parent instanceof Filling && res.indexOf(item.parent) == -1) {
          res.push(item.parent);
        }
      });

      return res;
    }

    get selected_elm() {
      let res;
      this.selectedItems.some(item => {
        if (item instanceof BuilderElement) {
          return res = item;
        } else if (item.parent instanceof BuilderElement) {
          return res = item.parent;
        }
      });
      return res;
    }

    hitPoints(point, tolerance, selected_first, with_onlays) {
      let item, hit;
      let dist = Infinity;

      function check_corns(elm) {
        const corn = elm.corns(point);
        if (corn.dist < dist) {
          dist = corn.dist;
          if (corn.dist < consts.sticking) {
            hit = {
              item: elm.generatrix,
              point: corn.point
            };
          }
        }
      }

      if (selected_first) {
        this.selectedItems.some(item => hit = item.hitTest(point, { segments: true, tolerance: tolerance || 8 }));
        if (!hit) {
          hit = this.hitTest(point, { segments: true, tolerance: tolerance || 6 });
        }
      } else {
        for (let elm of this.activeLayer.profiles) {
          check_corns(elm);
          for (let addl of elm.addls) {
            check_corns(addl);
          }
        }
        if (with_onlays) {
          for (let elm of this.activeLayer.onlays) {
            check_corns(elm);
          }
        }
      }

      return hit;
    }

    rootLayer(layer) {
      if (!layer) {
        layer = this.activeLayer;
      }
      while (layer.parent) {
        layer = layer.parent;
      }
      return layer;
    }

    deselect_all_points(with_items) {
      this.getItems({ class: paper.Path }).forEach(item => {
        item.segments.forEach(segm => {
          if (segm.selected) {
            segm.selected = false;
          }
        });
        if (with_items && item.selected) {
          item.selected = false;
        }
      });
    }

    get perimeter() {
      let res = [],
          contours = this.contours,
          tmp;

      if (contours.length == 1) {
        return contours[0].perimeter;
      }

      return res;
    }

    get glasses() {
      return this.getItems({ class: Filling });
    }

  }

  EditorInvisible.Scheme = Scheme;

  class EditableText extends paper.PointText {

    constructor(props) {
      props.justification = 'center';
      props.fontFamily = consts.font_family;
      super(props);
      this._edit = null;
      this._owner = props._owner;

      this.on({
        mouseenter: this.mouseenter,
        mouseleave: this.mouseleave,
        click: this.click
      });
    }

    mouseenter(event) {
      this.project._scope.canvas_cursor('cursor-arrow-ruler-light');
    }

    mouseleave(event) {
      this.project._scope.canvas_cursor('cursor-arrow-white');
    }

    click(event) {
      if (!this._edit) {
        const { view, bounds } = this;
        const point = view.projectToView(bounds.topLeft);
        const edit = this._edit = document.createElement('INPUT');
        view.element.parentNode.appendChild(edit);
        edit.style = `left: ${(point.x - 4).toFixed()}px; top: ${point.y.toFixed()}px; width: 60px; border: none; position: absolute;`;
        edit.onblur = () => setTimeout(() => this.edit_remove());
        edit.onkeydown = this.edit_keydown.bind(this);
        edit.value = this.content.replace(/\D$/, '');
        setTimeout(() => {
          edit.focus();
          edit.select();
        });
      }
    }

    edit_keydown(event) {
      switch (event.code) {
        case 'Escape':
        case 'Tab':
          return this.edit_remove();
        case 'Enter':
        case 'NumpadEnter':
          this.apply(parseFloat(this._edit.value));
          return this.edit_remove();
        case 'Digit0':
        case 'Digit1':
        case 'Digit2':
        case 'Digit3':
        case 'Digit4':
        case 'Digit5':
        case 'Digit6':
        case 'Digit7':
        case 'Digit8':
        case 'Digit9':
        case 'Numpad0':
        case 'Numpad1':
        case 'Numpad2':
        case 'Numpad3':
        case 'Numpad4':
        case 'Numpad5':
        case 'Numpad6':
        case 'Numpad7':
        case 'Numpad8':
        case 'Numpad9':
        case '.':
        case 'Period':
        case 'NumpadDecimal':
        case 'ArrowRight':
        case 'ArrowLeft':
        case 'Delete':
        case 'Backspace':
          break;
        case 'Comma':
        case ',':
          event.code = '.';
          break;
        default:
          event.preventDefault();
          event.stopPropagation();
          return false;
      }
    }

    edit_remove() {
      if (this._edit) {
        this._edit.parentNode && this._edit.parentNode.removeChild(this._edit);
        this._edit = null;
      }
    }

    remove() {
      this.edit_remove();
      super.remove();
    }
  }

  class AngleText extends EditableText {

    constructor(props) {
      props.fillColor = 'blue';
      super(props);
      this._ind = props._ind;
    }

    apply(value) {

      const { project, generatrix, _attr } = this._owner;
      const { zoom } = _attr;
      const { curves, segments } = generatrix;
      const c1 = curves[this._ind - 1];
      const c2 = curves[this._ind];
      const loc1 = c1.getLocationAtTime(0.9);
      const loc2 = c2.getLocationAtTime(0.1);
      const center = c1.point2;
      let angle = loc2.tangent.angle - loc1.tangent.negate().angle;
      if (angle < 0) {
        angle += 360;
      }
      const invert = angle > 180;
      if (invert) {
        angle = 360 - angle;
      }
      const ray0 = new paper.Point([c2.point2.x - c2.point1.x, c2.point2.y - c2.point1.y]);
      const ray1 = ray0.clone();
      ray1.angle += invert ? angle - value : value - angle;
      const delta = ray1.subtract(ray0);

      let start;
      for (const segment of segments) {
        if (segment.point.equals(c2.point2)) {
          start = true;
        }
        if (start) {
          segment.point = segment.point.add(delta);
        }
      }
      project.register_change(true);
    }
  }

  class LenText extends EditableText {

    constructor(props) {
      props.fillColor = 'black';
      super(props);
    }

    apply(value) {
      const { path, segment1, segment2, length } = this._owner;
      const { parent: { _attr, project }, segments } = path;
      const { zoom } = _attr;
      const delta = segment1.curve.getTangentAtTime(1).multiply(value * zoom - length);
      let start;
      for (const segment of segments) {
        if (segment === segment2) {
          start = true;
        }
        if (start) {
          segment.point = segment.point.add(delta);
        }
      }
      project.register_change(true);
    }
  }

  class Sectional extends GeneratrixElement {

    initialize(attr) {

      const { project, _attr, _row } = this;
      const h = project.bounds.height + project.bounds.y;

      _attr._rays = {
        b: {},
        e: {},
        clear() {}
      };

      _attr.children = [];

      _attr.zoom = 5;
      _attr.radius = 50;

      if (attr.generatrix) {
        _attr.generatrix = attr.generatrix;
      } else {
        if (_row.path_data) {
          _attr.generatrix = new paper.Path(_row.path_data);
        } else {
          const first_point = new paper.Point([_row.x1, h - _row.y1]);
          _attr.generatrix = new paper.Path(first_point);
          if (_row.r) {
            _attr.generatrix.arcTo(first_point.arc_point(_row.x1, h - _row.y1, _row.x2, h - _row.y2, _row.r + 0.001, _row.arc_ccw, false), [_row.x2, h - _row.y2]);
          } else {
            _attr.generatrix.lineTo([_row.x2, h - _row.y2]);
          }
        }
      }

      _attr.generatrix.strokeColor = 'black';
      _attr.generatrix.strokeWidth = 1;
      _attr.generatrix.strokeScaling = false;
      this.clr = _row.clr.empty() ? $p.job_prm.builder.base_clr : _row.clr;

      this.addChild(_attr.generatrix);
    }

    redraw() {
      const { layer, generatrix, _attr, radius } = this;
      const { children, zoom } = _attr;
      const { segments, curves } = generatrix;

      for (let child of children) {
        child.remove();
      }

      for (let i = 1; i < segments.length - 1; i++) {
        this.draw_angle(i);
      }

      for (let curve of curves) {
        const loc = curve.getLocationAtTime(0.5);
        const normal = loc.normal.normalize(radius);
        children.push(new LenText({
          point: loc.point.add(normal).add([0, normal.y < 0 ? 0 : normal.y / 2]),
          content: (curve.length / zoom).toFixed(0),
          fontSize: radius * 1.4,
          parent: layer,
          _owner: curve
        }));
      }

      return this;
    }

    draw_angle(ind) {
      const { layer, generatrix, _attr, radius } = this;
      let { children, zoom } = _attr;
      const { curves } = generatrix;
      const c1 = curves[ind - 1];
      const c2 = curves[ind];
      const loc1 = c1.getLocationAtTime(0.9);
      const loc2 = c2.getLocationAtTime(0.1);
      const center = c1.point2;
      let angle = loc2.tangent.angle - loc1.tangent.negate().angle;
      if (angle < 0) {
        angle += 360;
      }
      if (angle > 180) {
        angle = 360 - angle;
      }

      if (c1.length < radius || c2.length < radius || 180 - angle < 1) {
        return;
      }

      const from = c1.getLocationAt(c1.length - radius).point;
      const to = c2.getLocationAt(radius).point;
      const end = center.subtract(from.add(to).divide(2)).normalize(radius).negate();
      children.push(new paper.Path.Arc({
        from,
        through: center.add(end),
        to,
        strokeColor: 'grey',
        guide: true,
        parent: layer
      }));

      children.push(new AngleText({
        point: center.add(end.multiply(-2.2)),
        content: angle.toFixed(0) + '°',
        fontSize: radius * 1.4,
        parent: layer,
        _owner: this,
        _ind: ind
      }));
    }

    save_coordinates() {

      const { _row, generatrix } = this;

      if (!generatrix) {
        return;
      }

      _row.x1 = this.x1;
      _row.y1 = this.y1;
      _row.x2 = this.x2;
      _row.y2 = this.y2;
      _row.path_data = generatrix.pathData;
      _row.nom = this.nom;

      _row.len = this.length.round(1);

      _row.elm_type = this.elm_type;
    }

    cnn_point() {}

    get length() {
      const { generatrix, zoom } = this._attr;
      return generatrix.length / zoom;
    }

    get rays() {
      return this._attr._rays;
    }

    get elm_type() {
      return $p.enm.elm_types.Водоотлив;
    }

    get radius() {
      let { generatrix, radius } = this._attr;
      const { height, width } = generatrix.bounds;
      const size = Math.max(width - consts.cutoff, height - consts.cutoff);
      if (size > 0) {
        radius += size / 60;
      }
      return radius;
    }
  }

  EditorInvisible.Sectional = Sectional;

  class Pricing {

    constructor({ md, adapters }) {

      md.once('predefined_elmnts_inited', () => {
        const { pouch } = adapters;
        if (pouch.local.templates || pouch.props.user_node) {
          this.load_prices();
        } else {
          pouch.once('on_log_in', () => this.load_prices());
        }
      });
    }

    load_prices() {

      return this.by_local().then(loc => {
        return !loc && this.by_range();
      }).then(() => {
        const { adapters: { pouch }, doc: { calc_order }, wsql } = $p;
        pouch.emit('pouch_complete_loaded');

        if (pouch.local.doc === pouch.remote.doc) {
          pouch.local.doc.changes({
            since: 'now',
            live: true,
            include_docs: true,
            selector: { class_name: { $in: ['doc.nom_prices_setup', calc_order.class_name] } }
          }).on('change', change => {
            if (change.doc.class_name == 'doc.nom_prices_setup') {
              setTimeout(() => this.by_doc(change.doc), 500);
            } else if (change.doc.class_name == calc_order.class_name) {
              if (pouch.props.user_node) {
                return calc_order.emit('change', change.doc);
              }
              const doc = calc_order.by_ref[change.id.substr(15)];
              const user = pouch.authorized || wsql.get_user_param('user_name');
              if (!doc || user === change.doc.timestamp.user) {
                return;
              }
              pouch.load_changes({ docs: [change.doc], update_only: true });
            }
          });
        }
      });
    }

    build_cache(rows) {
      const { nom, currencies } = $p.cat;
      const note = 'Индекс цен номенклатуры';
      for (const _ref9 of rows) {
        const { key, value } = _ref9;

        if (!Array.isArray(value)) {
          return setTimeout(() => $p.iface.do_reload('', note), 1000);
        }
        const onom = nom.get(key[0], false, true);
        if (!onom || !onom._data) {
          $p.record_log({
            class: 'error',
            note,
            obj: { nom: key[0], value }
          });
          continue;
        }
        if (!onom._data._price) {
          onom._data._price = {};
        }
        const { _price } = onom._data;

        if (!_price[key[1]]) {
          _price[key[1]] = {};
        }
        _price[key[1]][key[2]] = value.map(v => ({
          date: new Date(v.date),
          currency: currencies.get(v.currency),
          price: v.price
        }));
      }
    }

    build_cache_local(prices) {

      const { nom, currencies } = $p.cat;
      const note = 'Индекс цен номенклатуры';
      const date = new Date('2010-01-01');

      for (const ref in prices) {
        if (ref[0] === '_' || ref === 'remote_rev') {
          continue;
        }
        const onom = nom.get(ref, false, true);
        const value = prices[ref];

        if (!onom || !onom._data) {
          $p.record_log({
            class: 'error',
            note,
            obj: { nom: ref, value }
          });
          continue;
        }
        onom._data._price = value;

        for (const cref in value) {
          for (const pref in value[cref]) {
            const price = value[cref][pref][0];
            price.date = date;
            price.currency = currencies.get(price.currency);
          }
        }
      }
    }

    sync_local(pouch, step = 0) {
      return pouch.remote.templates.get(`_local/price_${step}`).then(remote => {
        return pouch.local.templates.get(`_local/price_${step}`).catch(() => ({})).then(local => {

          if (local.remote_rev !== remote._rev) {
            remote.remote_rev = remote._rev;
            if (!local._rev) {
              delete remote._rev;
            } else {
              remote._rev = local._rev;
            }
            pouch.local.templates.put(remote._clone());
          }

          this.build_cache_local(remote);

          return this.sync_local(pouch, ++step);
        });
      }).catch(err => {
        if (step !== 0) {
          pouch.local.templates.get(`_local/price_${step}`).then(local => pouch.local.templates.remove(local)).catch(() => null);
          return true;
        }
      });
    }

    by_local(step = 0) {
      const { pouch } = $p.adapters;

      if (!pouch.local.templates) {
        return Promise.resolve(false);
      }

      const pre = step === 0 && pouch.local.templates.adapter !== 'http' && pouch.authorized ? pouch.remote.templates.info().then(() => this.sync_local(pouch)).catch(err => null) : Promise.resolve();

      return pre.then(loaded => {
        if (loaded) {
          return loaded;
        } else {
          return pouch.local.templates.get(`_local/price_${step}`);
        }
      }).then(prices => {
        if (prices === true) {
          return prices;
        }
        this.build_cache_local(prices);
        pouch.emit('nom_prices', ++step);
        return this.by_local(step);
      }).catch(err => {
        return step !== 0;
      });
    }

    by_range(startkey, step = 0) {

      const { pouch } = $p.adapters;
      const { templates, doc } = pouch.local;

      return (templates || doc).query('doc/doc_nom_prices_setup_slice_last', {
        limit: 600,
        include_docs: false,
        startkey: startkey || [''],
        endkey: ['\ufff0'],
        reduce: true,
        group: true
      }).then(res => {
        this.build_cache(res.rows);
        pouch.emit('nom_prices', ++step);
        if (res.rows.length === 600) {
          return this.by_range(res.rows[res.rows.length - 1].key, step);
        }
      }).catch(err => {
        $p.record_log(err);
      });
    }

    by_doc({ goods }) {
      const keys = goods.map(({ nom, nom_characteristic, price_type }) => [nom, nom_characteristic, price_type]);
      const { templates, doc } = $p.adapters.pouch.local;
      return (templates || doc).query("doc/doc_nom_prices_setup_slice_last", {
        include_docs: false,
        keys: keys,
        reduce: true,
        group: true
      }).then(res => {
        this.build_cache(res.rows);
      });
    }

    nom_price(nom, characteristic, price_type, prm, row) {

      if (row && prm) {
        const { _owner } = prm.calc_order_row._owner,
              price_prm = {
          price_type: price_type,
          characteristic: characteristic,
          date: _owner.date,
          currency: _owner.doc_currency
        };

        if (price_type == prm.price_type.price_type_first_cost && !prm.price_type.formula.empty()) {
          price_prm.formula = prm.price_type.formula;
        } else if (price_type == prm.price_type.price_type_sale && !prm.price_type.sale_formula.empty()) {
          price_prm.formula = prm.price_type.sale_formula;
        }
        if (!characteristic.clr.empty()) {
          price_prm.clr = characteristic.clr;
        }
        row.price = nom._price(price_prm);

        return row.price;
      }
    }

    price_type(prm) {

      const { utils, job_prm, enm, ireg, cat } = $p;
      const empty_formula = cat.formulas.get();
      const empty_price_type = cat.nom_prices_types.get();

      prm.price_type = {
        marginality: 1.9,
        marginality_min: 1.2,
        marginality_internal: 1.5,
        discount: 0,
        discount_external: 10,
        extra_charge_external: 0,
        price_type_first_cost: empty_price_type,
        price_type_sale: empty_price_type,
        price_type_internal: empty_price_type,
        formula: empty_formula,
        sale_formula: empty_formula,
        internal_formula: empty_formula,
        external_formula: empty_formula
      };

      const { calc_order_row } = prm;
      const { nom, characteristic } = calc_order_row;
      const { partner } = calc_order_row._owner._owner;
      const filter = nom.price_group.empty() ? { price_group: nom.price_group } : { price_group: { in: [nom.price_group, cat.price_groups.get()] } };
      const ares = [];

      ireg.margin_coefficients.find_rows(filter, row => {

        let ok = true;
        if (!row.key.empty()) {
          row.key.params.forEach(row_prm => {

            const { property } = row_prm;
            if (property.is_calculated) {
              ok = utils.check_compare(property.calculated_value({ calc_order_row }), property.extract_value(row_prm), row_prm.comparison_type, enm.comparison_types);
            } else if (property.empty()) {
              const vpartner = cat.partners.get(row_prm._obj.value, false, true);
              if (vpartner && !vpartner.empty()) {
                ok = vpartner == partner;
              }
            } else {
              let finded;
              characteristic.params.find_rows({
                cnstr: 0,
                param: property
              }, row_x => {
                finded = row_x;
                return false;
              });
              if (finded) {
                ok = utils.check_compare(finded.value, property.extract_value(row_prm), row_prm.comparison_type, enm.comparison_types);
              } else {
                ok = false;
              }
            }
            if (!ok) {
              return false;
            }
          });
        }
        if (ok) {
          ares.push(row);
        }
      });

      if (ares.length) {
        ares.sort((a, b) => {

          if (!a.key.empty() && b.key.empty() || a.key.priority > b.key.priority) {
            return -1;
          }
          if (a.key.empty() && !b.key.empty() || a.key.priority < b.key.priority) {
            return 1;
          }

          if (a.price_group.ref > b.price_group.ref) {
            return -1;
          }
          if (a.price_group.ref < b.price_group.ref) {
            return 1;
          }

          return 0;
        });
        Object.keys(prm.price_type).forEach(key => {
          prm.price_type[key] = ares[0][key];
        });
      }

      partner.extra_fields.find_rows({
        property: job_prm.pricing.dealer_surcharge
      }, row => {
        const val = parseFloat(row.value);
        if (val) {
          prm.price_type.extra_charge_external = val;
        }
        return false;
      });

      return prm.price_type;
    }

    calc_first_cost(prm) {

      const { marginality_in_spec } = $p.job_prm.pricing;
      const fake_row = {};

      if (!prm.spec) return;

      if (prm.spec.count()) {
        prm.spec.forEach(row => {

          const { _obj, nom, characteristic } = row;

          this.nom_price(nom, characteristic, prm.price_type.price_type_first_cost, prm, _obj);
          _obj.amount = _obj.price * _obj.totqty1;

          if (marginality_in_spec) {
            fake_row.nom = nom;
            const tmp_price = this.nom_price(nom, characteristic, prm.price_type.price_type_sale, prm, fake_row);
            _obj.amount_marged = tmp_price * _obj.totqty1;
          }
        });
        prm.calc_order_row.first_cost = prm.spec.aggregate([], ["amount"]).round(2);
      } else {
        fake_row.nom = prm.calc_order_row.nom;
        fake_row.characteristic = prm.calc_order_row.characteristic;
        prm.calc_order_row.first_cost = this.nom_price(fake_row.nom, fake_row.characteristic, prm.price_type.price_type_first_cost, prm, fake_row);
      }

      prm.order_rows && prm.order_rows.forEach(value => {
        const fake_prm = {
          spec: value.characteristic.specification,
          calc_order_row: value
        };
        this.price_type(fake_prm);
        this.calc_first_cost(fake_prm);
      });
    }

    calc_amount(prm) {

      const { calc_order_row, price_type } = prm;
      const { marginality_in_spec } = $p.job_prm.pricing;
      const price_cost = marginality_in_spec && prm.spec.count() ? prm.spec.aggregate([], ["amount_marged"]) : this.nom_price(calc_order_row.nom, calc_order_row.characteristic, price_type.price_type_sale, prm, {});

      if (price_cost) {
        calc_order_row.price = price_cost.round(2);
      } else {
        calc_order_row.price = marginality_in_spec ? 0 : (calc_order_row.first_cost * price_type.marginality).round(2);
      }

      calc_order_row.marginality = calc_order_row.first_cost ? calc_order_row.price * ((100 - calc_order_row.discount_percent) / 100) / calc_order_row.first_cost : 0;

      let extra_charge = $p.wsql.get_user_param("surcharge_internal", "number");
      if (!$p.current_user.partners_uids.length || !extra_charge) {
        extra_charge = price_type.extra_charge_external || 0;
      }

      calc_order_row.price_internal = (calc_order_row.price * (100 - calc_order_row.discount_percent) / 100 * (100 + extra_charge) / 100).round(2);

      !prm.hand_start && calc_order_row.value_change("price", {}, calc_order_row.price, true);

      prm.order_rows && prm.order_rows.forEach(value => {
        const fake_prm = {
          spec: value.characteristic.specification,
          calc_order_row: value
        };
        this.price_type(fake_prm);
        this.calc_amount(fake_prm);
      });
    }

    from_currency_to_currency(amount, date, from, to) {

      const { main_currency } = $p.job_prm.pricing;

      if (!to || to.empty()) {
        to = main_currency;
      }
      if (!from || from.empty()) {
        from = main_currency;
      }
      if (from == to) {
        return amount;
      }
      if (!date) {
        date = new Date();
      }
      if (!this.cource_sql) {
        this.cource_sql = $p.wsql.alasql.compile("select top 1 * from `ireg_currency_courses` where `currency` = ? and `period` <= ? order by `period` desc");
      }

      let cfrom = { course: 1, multiplicity: 1 },
          cto = { course: 1, multiplicity: 1 };
      if (from != main_currency) {
        const tmp = this.cource_sql([from.ref, date]);
        if (tmp.length) cfrom = tmp[0];
      }
      if (to != main_currency) {
        const tmp = this.cource_sql([to.ref, date]);
        if (tmp.length) cto = tmp[0];
      }

      return amount * cfrom.course / cfrom.multiplicity * cto.multiplicity / cto.course;
    }

    cut_upload() {

      if (!$p.current_user.role_available("СогласованиеРасчетовЗаказов") && !$p.current_user.role_available("ИзменениеТехнологическойНСИ")) {
        $p.msg.show_msg({
          type: "alert-error",
          text: $p.msg.error_low_acl,
          title: $p.msg.error_rights
        });
        return true;
      }

      function upload_acc() {
        const mgrs = ["cat.users", "cat.individuals", "cat.organizations", "cat.partners", "cat.contracts", "cat.currencies", "cat.nom_prices_types", "cat.price_groups", "cat.cashboxes", "cat.partner_bank_accounts", "cat.organization_bank_accounts", "cat.projects", "cat.stores", "cat.cash_flow_articles", "cat.cost_items", "cat.price_groups", "cat.delivery_areas", "ireg.currency_courses", "ireg.margin_coefficients"];

        const { pouch } = $p.adapters;
        pouch.local.ram.replicate.to(pouch.remote.ram, {
          filter: doc => mgrs.indexOf(doc._id.split("|")[0]) != -1
        }).on('change', info => {}).on('paused', err => {}).on('active', () => {}).on('denied', err => {
          $p.msg.show_msg(err.reason);
          $p.record_log(err);
        }).on('complete', info => {

          if ($p.current_user.role_available("ИзменениеТехнологическойНСИ")) upload_tech();else $p.msg.show_msg({
            type: "alert-info",
            text: $p.msg.sync_complite,
            title: $p.msg.sync_title
          });
        }).on('error', err => {
          $p.msg.show_msg(err.reason);
          $p.record_log(err);
        });
      }

      function upload_tech() {
        const mgrs = ["cat.units", "cat.nom", "cat.nom_groups", "cat.nom_units", "cat.nom_kinds", "cat.elm_visualization", "cat.destinations", "cat.property_values", "cat.property_values_hierarchy", "cat.inserts", "cat.insert_bind", "cat.color_price_groups", "cat.clrs", "cat.furns", "cat.cnns", "cat.production_params", "cat.parameters_keys", "cat.formulas", "cch.properties", "cch.predefined_elmnts"];
        const { pouch } = $p.adapters;
        pouch.local.ram.replicate.to(pouch.remote.ram, {
          filter: doc => mgrs.indexOf(doc._id.split("|")[0]) != -1
        }).on('change', info => {}).on('paused', err => {}).on('active', () => {}).on('denied', err => {
          $p.msg.show_msg(err.reason);
          $p.record_log(err);
        }).on('complete', info => {
          $p.msg.show_msg({
            type: "alert-info",
            text: $p.msg.sync_complite,
            title: $p.msg.sync_title
          });
        }).on('error', err => {
          $p.msg.show_msg(err.reason);
          $p.record_log(err);
        });
      }

      if ($p.current_user.role_available("СогласованиеРасчетовЗаказов")) upload_acc();else upload_tech();
    }

  }

  $p.pricing = new Pricing($p);

  class ProductsBuilding {

    constructor(listen) {

      let added_cnn_spec, ox, spec, constructions, coordinates, cnn_elmnts, glass_specification, params;

      function cnn_row(elm1, elm2) {
        let res = cnn_elmnts.find_rows({ elm1: elm1, elm2: elm2 });
        if (res.length) {
          return res[0].row;
        }
        res = cnn_elmnts.find_rows({ elm1: elm2, elm2: elm1 });
        if (res.length) {
          return res[0].row;
        }
        return 0;
      }

      function cnn_need_add_spec(cnn, elm1, elm2, point) {
        if (cnn && cnn.cnn_type == $p.enm.cnn_types.xx) {
          if (!added_cnn_spec.points) {
            added_cnn_spec.points = [];
          }
          for (let p of added_cnn_spec.points) {
            if (p.is_nearest(point, true)) {
              return false;
            }
          }
          added_cnn_spec.points.push(point);
          return true;
        } else if (!cnn || !elm1 || !elm2 || added_cnn_spec[elm1] == elm2 || added_cnn_spec[elm2] == elm1) {
          return false;
        }
        added_cnn_spec[elm1] = elm2;
        return true;
      }

      function cnn_add_spec(cnn, elm, len_angl, cnn_other) {
        if (!cnn) {
          return;
        }
        const sign = cnn.cnn_type == $p.enm.cnn_types.Наложение ? -1 : 1;
        const { new_spec_row, calc_count_area_mass } = ProductsBuilding;

        cnn_filter_spec(cnn, elm, len_angl).forEach(row_cnn_spec => {

          const { nom } = row_cnn_spec;

          if (nom instanceof $p.CatInserts) {
            if (len_angl && (row_cnn_spec.sz || row_cnn_spec.coefficient)) {
              const tmp_len_angl = len_angl._clone();
              tmp_len_angl.len = (len_angl.len - sign * 2 * row_cnn_spec.sz) * (row_cnn_spec.coefficient || 0.001);
              nom.calculate_spec({ elm, len_angl: tmp_len_angl, ox });
            } else {
              nom.calculate_spec({ elm, len_angl, ox });
            }
          } else {

            const row_spec = new_spec_row({ row_base: row_cnn_spec, origin: len_angl.origin || cnn, elm, nom, spec, ox });

            if (nom.is_pieces) {
              if (!row_cnn_spec.coefficient) {
                row_spec.qty = row_cnn_spec.quantity;
              } else {
                row_spec.qty = ((len_angl.len - sign * 2 * row_cnn_spec.sz) * row_cnn_spec.coefficient * row_cnn_spec.quantity - 0.5).round(nom.rounding_quantity);
              }
            } else {
              row_spec.qty = row_cnn_spec.quantity;

              if (row_cnn_spec.sz || row_cnn_spec.coefficient) {
                let sz = row_cnn_spec.sz,
                    finded,
                    qty;
                if (cnn_other) {
                  cnn_other.specification.find_rows({ nom }, row => {
                    sz += row.sz;
                    qty = row.quantity;
                    return !(finded = true);
                  });
                }
                if (!finded) {
                  sz *= 2;
                }
                if (!row_spec.qty && finded && len_angl.art1) {
                  row_spec.qty = qty;
                }
                row_spec.len = (len_angl.len - sign * sz) * (row_cnn_spec.coefficient || 0.001);
              }
            }

            if (!row_cnn_spec.formula.empty()) {
              const qty = row_cnn_spec.formula.execute({
                ox,
                elm,
                len_angl,
                cnstr: 0,
                inset: $p.utils.blank.guid,
                row_cnn: row_cnn_spec,
                row_spec: row_spec
              });
              if (row_cnn_spec.formula.condition_formula && !qty) {
                row_spec.qty = 0;
              }
            }
            calc_count_area_mass(row_spec, spec, len_angl, row_cnn_spec.angle_calc_method);
          }
        });
      }

      function cnn_filter_spec(cnn, elm, len_angl) {

        const res = [];
        const { angle_hor } = elm;
        const { art1, art2 } = $p.job_prm.nom;
        const { САртикулом1, САртикулом2 } = $p.enm.specification_installation_methods;
        const { check_params } = ProductsBuilding;

        const { cnn_type, specification, selection_params } = cnn;
        const { ii, xx, acn } = $p.enm.cnn_types;

        specification.each(row => {
          const { nom } = row;
          if (!nom || nom.empty() || nom == art1 || nom == art2) {
            return;
          }

          if (row.for_direct_profile_only > 0 && !elm.is_linear() || row.for_direct_profile_only < 0 && elm.is_linear()) {
            return;
          }

          if (cnn_type == ii) {
            if (row.amin > angle_hor || row.amax < angle_hor || row.sz_min > len_angl.len || row.sz_max < len_angl.len) {
              return;
            }
          } else {
            if (row.amin > len_angl.angle || row.amax < len_angl.angle) {
              return;
            }
          }

          if (row.set_specification == САртикулом1 && len_angl.art2 || row.set_specification == САртикулом2 && len_angl.art1) {
            return;
          }
          if (len_angl.art2 && acn.a.indexOf(cnn_type) != -1 && row.set_specification != САртикулом2 && cnn_type != xx) {
            return;
          }

          if (check_params({ params: selection_params, row_spec: row, elm, ox })) {
            res.push(row);
          }
        });

        return res;
      }

      function furn_spec(contour) {

        if (!contour.parent) {
          return false;
        }

        const { furn_cache, furn } = contour;
        const { new_spec_row, calc_count_area_mass } = ProductsBuilding;

        if (!furn_check_opening_restrictions(contour, furn_cache)) {
          return;
        }

        contour.update_handle_height(furn_cache);

        const blank_clr = $p.cat.clrs.get();
        furn.furn_set.get_spec(contour, furn_cache).each(row => {
          const elm = { elm: -contour.cnstr, clr: blank_clr };
          const row_spec = new_spec_row({ elm, row_base: row, origin: row.origin, spec, ox });

          if (row.is_procedure_row) {
            row_spec.elm = row.handle_height_min;
            row_spec.len = row.coefficient / 1000;
            row_spec.qty = 0;
            row_spec.totqty = 1;
            row_spec.totqty1 = 1;
          } else {
            row_spec.qty = row.quantity * (!row.coefficient ? 1 : row.coefficient);
            calc_count_area_mass(row_spec, spec);
          }
        });
      }

      function furn_check_opening_restrictions(contour, cache) {

        let ok = true;
        const { new_spec_row } = ProductsBuilding;
        const { side_count, furn, direction } = contour;

        if (furn.open_type !== $p.enm.open_types.Глухое && furn.side_count && side_count !== furn.side_count) {
          const row_base = { clr: $p.cat.clrs.get(), nom: $p.job_prm.nom.furn_error };
          contour.profiles.forEach(elm => {
            new_spec_row({ elm, row_base, origin: furn, spec, ox });
          });
          return ok = false;
        }

        furn.open_tunes.each(row => {
          const elm = contour.profile_by_furn_side(row.side, cache);
          const prev = contour.profile_by_furn_side(row.side === 1 ? side_count : row.side - 1, cache);
          const next = contour.profile_by_furn_side(row.side === side_count ? 1 : row.side + 1, cache);
          const len = elm._row.len - prev.nom.sizefurn - next.nom.sizefurn;

          const angle = direction == $p.enm.open_directions.Правое ? elm.generatrix.angle_to(prev.generatrix, elm.e) : prev.generatrix.angle_to(elm.generatrix, elm.b);

          const { lmin, lmax, amin, amax } = row;
          if (len < lmin || len > lmax || angle < amin || angle > amax && amax > 0 || !elm.is_linear() && !row.arc_available) {
            new_spec_row({ elm, row_base: { clr: $p.cat.clrs.get(), nom: $p.job_prm.nom.furn_error }, origin: furn, spec, ox });
            ok = false;
          }
        });

        return ok;
      }

      function cnn_spec_nearest(elm) {
        const nearest = elm.nearest();
        if (nearest && nearest._row.clr != $p.cat.clrs.predefined('НеВключатьВСпецификацию') && elm._attr._nearest_cnn) {
          cnn_add_spec(elm._attr._nearest_cnn, elm, {
            angle: 0,
            alp1: 0,
            alp2: 0,
            len: elm._attr._len,
            origin: cnn_row(elm.elm, nearest.elm)
          });
        }
      }

      function base_spec_profile(elm) {

        const { _row, rays } = elm;

        if (_row.nom.empty() || _row.nom.is_service || _row.nom.is_procedure || _row.clr == $p.cat.clrs.predefined('НеВключатьВСпецификацию')) {
          return;
        }

        const { b, e } = rays;

        if (!b.cnn || !e.cnn) {
          return;
        }
        b.check_err();
        e.check_err();

        const prev = b.profile;
        const next = e.profile;
        const row_cnn_prev = b.cnn && b.cnn.main_row(elm);
        const row_cnn_next = e.cnn && e.cnn.main_row(elm);
        const { new_spec_row, calc_count_area_mass } = ProductsBuilding;

        let row_spec;

        const row_cnn = row_cnn_prev || row_cnn_next;
        if (row_cnn) {

          row_spec = new_spec_row({ elm, row_base: row_cnn, nom: _row.nom, origin: cnn_row(_row.elm, prev ? prev.elm : 0), spec, ox });
          row_spec.qty = row_cnn.quantity;

          const seam = $p.enm.angle_calculating_ways.СварнойШов;
          const d45 = Math.sin(Math.PI / 4);
          const dprev = row_cnn_prev ? row_cnn_prev.angle_calc_method == seam && _row.alp1 > 0 ? row_cnn_prev.sz * d45 / Math.sin(_row.alp1 / 180 * Math.PI) : row_cnn_prev.sz : 0;
          const dnext = row_cnn_next ? row_cnn_next.angle_calc_method == seam && _row.alp2 > 0 ? row_cnn_next.sz * d45 / Math.sin(_row.alp2 / 180 * Math.PI) : row_cnn_next.sz : 0;

          row_spec.len = (_row.len - dprev - dnext) * ((row_cnn_prev ? row_cnn_prev.coefficient : 0.001) + (row_cnn_next ? row_cnn_next.coefficient : 0.001)) / 2;

          elm._attr._len = _row.len;
          _row.len = (_row.len - (!row_cnn_prev || row_cnn_prev.angle_calc_method == seam ? 0 : row_cnn_prev.sz) - (!row_cnn_next || row_cnn_next.angle_calc_method == seam ? 0 : row_cnn_next.sz)) * 1000 * ((row_cnn_prev ? row_cnn_prev.coefficient : 0.001) + (row_cnn_next ? row_cnn_next.coefficient : 0.001)) / 2;

          if (!elm.is_linear()) {
            row_spec.len = row_spec.len + _row.nom.arc_elongation / 1000;
          }

          if (row_cnn_prev && !row_cnn_prev.formula.empty()) {
            row_cnn_prev.formula.execute({
              ox: ox,
              elm: elm,
              cnstr: 0,
              inset: $p.utils.blank.guid,
              row_cnn: row_cnn_prev,
              row_spec: row_spec
            });
          } else if (row_cnn_next && !row_cnn_next.formula.empty()) {
            row_cnn_next.formula.execute({
              ox: ox,
              elm: elm,
              cnstr: 0,
              inset: $p.utils.blank.guid,
              row_cnn: row_cnn_next,
              row_spec: row_spec
            });
          }

          const angle_calc_method_prev = row_cnn_prev ? row_cnn_prev.angle_calc_method : null;
          const angle_calc_method_next = row_cnn_next ? row_cnn_next.angle_calc_method : null;
          const { СоединениеПополам, Соединение } = $p.enm.angle_calculating_ways;
          calc_count_area_mass(row_spec, spec, _row, angle_calc_method_prev, angle_calc_method_next, angle_calc_method_prev == СоединениеПополам || angle_calc_method_prev == Соединение ? prev.generatrix.angle_to(elm.generatrix, b.point) : 0, angle_calc_method_next == СоединениеПополам || angle_calc_method_next == Соединение ? elm.generatrix.angle_to(next.generatrix, e.point) : 0);
        }

        const len_angl = {
          angle: 0,
          alp1: prev ? prev.generatrix.angle_to(elm.generatrix, elm.b, true) : 90,
          alp2: next ? elm.generatrix.angle_to(next.generatrix, elm.e, true) : 90,
          len: row_spec ? row_spec.len * 1000 : _row.len,
          art1: false,
          art2: true
        };
        if (cnn_need_add_spec(b.cnn, _row.elm, prev ? prev.elm : 0, b.point)) {

          len_angl.angle = len_angl.alp2;

          if (b.cnn.cnn_type == $p.enm.cnn_types.t || b.cnn.cnn_type == $p.enm.cnn_types.i || b.cnn.cnn_type == $p.enm.cnn_types.xx) {
            if (cnn_need_add_spec(e.cnn, next ? next.elm : 0, _row.elm, e.point)) {
              cnn_add_spec(e.cnn, elm, len_angl, b.cnn);
            }
          } else {
            cnn_add_spec(e.cnn, elm, len_angl, b.cnn);
          }

          len_angl.angle = len_angl.alp1;
          len_angl.art2 = false;
          len_angl.art1 = true;
          cnn_add_spec(b.cnn, elm, len_angl, e.cnn);
        }

        elm.inset.calculate_spec({ elm, ox });

        cnn_spec_nearest(elm);

        elm.addls.forEach(base_spec_profile);

        ox.inserts.find_rows({ cnstr: -elm.elm }, ({ inset, clr }) => {

          if (inset.is_order_row == $p.enm.specification_order_row_types.Продукция) {
            $p.record_log('inset_elm_spec: specification_order_row_types.Продукция');
          }

          len_angl.origin = inset;
          len_angl.angle = elm.angle_hor;
          len_angl.cnstr = elm.layer.cnstr;
          delete len_angl.art1;
          delete len_angl.art2;
          inset.calculate_spec({ elm, len_angl, ox });
        });
      }

      function base_spec_sectional(elm) {

        const { _row, _attr, inset, layer } = elm;

        if (_row.nom.empty() || _row.nom.is_service || _row.nom.is_procedure || _row.clr == $p.cat.clrs.predefined('НеВключатьВСпецификацию')) {
          return;
        }

        const spec_tmp = spec;

        inset.calculate_spec({ elm, ox });

        ox.inserts.find_rows({ cnstr: -elm.elm }, ({ inset, clr }) => {

          if (inset.is_order_row == $p.enm.specification_order_row_types.Продукция) {
            const cx = Object.assign(ox.find_create_cx(elm.elm, inset.ref), inset.contour_attrs(layer));
            ox._order_rows.push(cx);
            spec = cx.specification.clear();
          }

          const len_angl = {
            angle: 0,
            alp1: 0,
            alp2: 0,
            len: 0,
            origin: inset,
            cnstr: layer.cnstr
          };
          inset.calculate_spec({ elm, len_angl, ox, spec });
        });

        spec = spec_tmp;
      }

      function base_spec_glass(elm) {

        const { profiles, imposts, _row } = elm;

        if (_row.clr == $p.cat.clrs.predefined('НеВключатьВСпецификацию')) {
          return;
        }

        const glength = profiles.length;

        for (let i = 0; i < glength; i++) {
          const curr = profiles[i];

          if (curr.profile && curr.profile._row.clr == $p.cat.clrs.predefined('НеВключатьВСпецификацию')) {
            return;
          }

          const prev = (i == 0 ? profiles[glength - 1] : profiles[i - 1]).profile;
          const next = (i == glength - 1 ? profiles[0] : profiles[i + 1]).profile;
          const row_cnn = cnn_elmnts.find_rows({ elm1: _row.elm, elm2: curr.profile.elm });

          const len_angl = {
            angle: 0,
            alp1: prev.generatrix.angle_to(curr.profile.generatrix, curr.b, true),
            alp2: curr.profile.generatrix.angle_to(next.generatrix, curr.e, true),
            len: row_cnn.length ? row_cnn[0].aperture_len : 0,
            origin: cnn_row(_row.elm, curr.profile.elm)

          };

          len_angl.len > 3 && cnn_add_spec(curr.cnn, curr.profile, len_angl);
        }

        elm.inset.calculate_spec({ elm, ox });

        imposts.forEach(base_spec_profile);

        ox.inserts.find_rows({ cnstr: -elm.elm }, ({ inset, clr }) => {
          if (inset.is_order_row == $p.enm.specification_order_row_types.Продукция) {
            $p.record_log('inset_elm_spec: specification_order_row_types.Продукция');
          }
          inset.calculate_spec({ elm, ox, clr });
        });
      }

      function inset_contour_spec(contour) {

        const spec_tmp = spec;

        ox.inserts.find_rows({ cnstr: contour.cnstr }, ({ inset, clr }) => {

          if (inset.is_order_row == $p.enm.specification_order_row_types.Продукция) {
            const cx = Object.assign(ox.find_create_cx(-contour.cnstr, inset.ref), inset.contour_attrs(contour));
            ox._order_rows.push(cx);
            spec = cx.specification.clear();
          }

          const elm = {
            _row: {},
            elm: 0,
            clr: clr,
            layer: contour
          };
          const len_angl = {
            angle: 0,
            alp1: 0,
            alp2: 0,
            len: 0,
            origin: inset,
            cnstr: contour.cnstr
          };
          inset.calculate_spec({ elm, len_angl, ox, spec });
        });

        spec = spec_tmp;
      }

      function base_spec(scheme) {

        const { Contour, Filling, Sectional, Profile, ProfileConnective } = $p.Editor;

        added_cnn_spec = {};

        for (const contour of scheme.getItems({ class: Contour })) {

          for (const elm of contour.children) {
            elm instanceof Profile && base_spec_profile(elm);
          }

          for (const elm of contour.children) {
            if (elm instanceof Filling) {
              base_spec_glass(elm);
            } else if (elm instanceof Sectional) {
              base_spec_sectional(elm);
            }
          }

          furn_spec(contour);

          inset_contour_spec(contour);
        }

        for (const elm of scheme.l_connective.children) {
          if (elm instanceof ProfileConnective) {
            base_spec_profile(elm);
          }
        }

        inset_contour_spec({
          cnstr: 0,
          project: scheme,
          get perimeter() {
            return this.project.perimeter;
          }
        });
      }

      this.recalc = function (scheme, attr) {

        ox = scheme.ox;
        spec = ox.specification;
        constructions = ox.constructions;
        coordinates = ox.coordinates;
        cnn_elmnts = ox.cnn_elmnts;
        glass_specification = ox.glass_specification;
        params = ox.params;

        spec.clear();

        ox._order_rows = [];

        base_spec(scheme);

        spec.group_by('nom,clr,characteristic,len,width,s,elm,alp1,alp2,origin,dop', 'qty,totqty,totqty1');

        scheme.draw_visualization();
        scheme.notify(scheme, 'coordinates_calculated', attr);

        if (ox.calc_order_row) {
          $p.spec_building.specification_adjustment({
            scheme: scheme,
            calc_order_row: ox.calc_order_row,
            spec: spec,
            save: attr.save
          }, true);
        }

        if (attr.snapshot) {
          scheme.notify(scheme, 'scheme_snapshot', attr);
        }

        if (attr.save) {

          if (attr.svg !== false) {
            ox.svg = scheme.get_svg();
          }

          ox.save().then(() => {
            attr.svg !== false && $p.msg.show_msg([ox.name, 'Спецификация рассчитана']);
            delete scheme._attr._saving;
            ox.calc_order.characteristic_saved(scheme, attr);
            scheme._scope && scheme._scope.eve.emit('characteristic_saved', scheme, attr);
          }).then(() => {
            if (scheme._scope || attr.close) {
              return new Promise((resolve, reject) => {
                setTimeout(() => ox.calc_order._modified && ox.calc_order.save().then(resolve).catch(reject), 1000);
              });
            }
          }).catch(err => {

            delete scheme._attr._saving;

            if (err.msg && err.msg._shown) {
              return;
            }

            let text = err.message || err;
            if (ox._data && ox._data._err) {
              if (typeof ox._data._err === 'object') {
                $p.md.emit('alert', Object.assign({ obj: ox }, ox._data._err));
                delete ox._data._err;
                return;
              }
              text += `\n${ox._data._err}`;
              delete ox._data._err;
            }

            $p.md.emit('alert', { type: 'alert-error', obj: ox, text });
          });
        } else {
          delete scheme._attr._saving;
        }

        ox._data._loading = false;
      };
    }

    static check_params({ params, row_spec, elm, cnstr, origin, ox }) {

      let ok = true;

      params.find_rows({ elm: row_spec.elm }, prm_row => {
        ok = prm_row.param.check_condition({ row_spec, prm_row, elm, cnstr, origin, ox });
        if (!ok) {
          return false;
        }
      });

      return ok;
    }

    static new_spec_row({ row_spec, elm, row_base, nom, origin, spec, ox }) {
      if (!row_spec) {
        row_spec = spec.add();
      }
      row_spec.nom = nom || row_base.nom;
      if (!row_spec.nom.visualization.empty()) {
        row_spec.dop = -1;
      } else if (row_spec.nom.is_procedure) {
        row_spec.dop = -2;
      }
      row_spec.characteristic = row_base.nom_characteristic;
      if (!row_spec.characteristic.empty() && row_spec.characteristic.owner != row_spec.nom) {
        row_spec.characteristic = $p.utils.blank.guid;
      }
      row_spec.clr = $p.cat.clrs.by_predefined(row_base ? row_base.clr : elm.clr, elm.clr, ox.clr, elm, spec);
      row_spec.elm = elm.elm;
      if (origin) {
        row_spec.origin = origin;
      }
      return row_spec;
    }

    static calc_qty_len(row_spec, row_base, len) {

      const { nom } = row_spec;

      if (nom.cutting_optimization_type == $p.enm.cutting_optimization_types.Нет || nom.cutting_optimization_type.empty() || nom.is_pieces) {
        if (!row_base.coefficient || !len) {
          row_spec.qty = row_base.quantity;
        } else {
          if (!nom.is_pieces) {
            row_spec.qty = row_base.quantity;
            row_spec.len = (len - row_base.sz) * (row_base.coefficient || 0.001);
            if (nom.rounding_quantity) {
              row_spec.qty = (row_spec.qty * row_spec.len).round(nom.rounding_quantity);
              row_spec.len = 0;
            }
            ;
          } else if (!nom.rounding_quantity) {
            row_spec.qty = Math.round((len - row_base.sz) * row_base.coefficient * row_base.quantity - 0.5);
          } else {
            row_spec.qty = ((len - row_base.sz) * row_base.coefficient * row_base.quantity).round(nom.rounding_quantity);
          }
        }
      } else {
        row_spec.qty = row_base.quantity;
        row_spec.len = (len - row_base.sz) * (row_base.coefficient || 0.001);
      }
    }

    static calc_count_area_mass(row_spec, spec, row_coord, angle_calc_method_prev, angle_calc_method_next, alp1, alp2) {

      if (!row_spec.qty) {
        if (row_spec.dop >= 0) {
          spec.del(row_spec.row - 1, true);
        }
        return;
      }

      if (row_spec.totqty1 && row_spec.totqty) {
        return;
      }

      if (!angle_calc_method_next) {
        angle_calc_method_next = angle_calc_method_prev;
      }

      if (angle_calc_method_prev && !row_spec.nom.is_pieces) {

        const { Основной, СварнойШов, СоединениеПополам, Соединение, _90 } = $p.enm.angle_calculating_ways;

        if (angle_calc_method_prev == Основной || angle_calc_method_prev == СварнойШов) {
          row_spec.alp1 = row_coord.alp1;
        } else if (angle_calc_method_prev == _90) {
          row_spec.alp1 = 90;
        } else if (angle_calc_method_prev == СоединениеПополам) {
          row_spec.alp1 = (alp1 || row_coord.alp1) / 2;
        } else if (angle_calc_method_prev == Соединение) {
          row_spec.alp1 = alp1 || row_coord.alp1;
        }

        if (angle_calc_method_next == Основной || angle_calc_method_next == СварнойШов) {
          row_spec.alp2 = row_coord.alp2;
        } else if (angle_calc_method_next == _90) {
          row_spec.alp2 = 90;
        } else if (angle_calc_method_next == СоединениеПополам) {
          row_spec.alp2 = (alp2 || row_coord.alp2) / 2;
        } else if (angle_calc_method_next == Соединение) {
          row_spec.alp2 = alp2 || row_coord.alp2;
        }
      }

      if (row_spec.len) {
        if (row_spec.width && !row_spec.s) {
          row_spec.s = row_spec.len * row_spec.width;
        }
      } else {
        row_spec.s = 0;
      }

      if (row_spec.s) {
        row_spec.totqty = row_spec.qty * row_spec.s;
      } else if (row_spec.len) {
        row_spec.totqty = row_spec.qty * row_spec.len;
      } else {
        row_spec.totqty = row_spec.qty;
      }

      row_spec.totqty1 = row_spec.totqty * row_spec.nom.loss_factor;

      ['len', 'width', 's', 'qty', 'alp1', 'alp2'].forEach(fld => row_spec[fld] = row_spec[fld].round(4));
      ['totqty', 'totqty1'].forEach(fld => row_spec[fld] = row_spec[fld].round(6));
    }

  }

  if (typeof global !== 'undefined') {
    global.ProductsBuilding = ProductsBuilding;
  }
  $p.ProductsBuilding = ProductsBuilding;
  $p.products_building = new ProductsBuilding(true);

  class SpecBuilding {

    constructor($p) {}

    calc_row_spec(prm, cancel) {}

    specification_adjustment(attr, with_price) {

      const { scheme, calc_order_row, spec, save } = attr;
      const calc_order = calc_order_row._owner._owner;
      const order_rows = new Map();
      const adel = [];
      const ox = calc_order_row.characteristic;
      const nom = ox.empty() ? calc_order_row.nom : calc_order_row.nom = ox.owner;

      $p.pricing.price_type(attr);

      spec.find_rows({ ch: { in: [-1, -2] } }, row => adel.push(row));
      adel.forEach(row => spec.del(row, true));

      $p.cat.insert_bind.insets(ox).forEach(({ inset, elm_type }) => {

        const elm = {
          _row: {},
          elm: 0,
          get perimeter() {
            return scheme ? scheme.perimeter : [];
          },
          clr: ox.clr,
          project: scheme
        };
        const len_angl = {
          angle: 0,
          alp1: 0,
          alp2: 0,
          len: 0,
          cnstr: 0,
          origin: inset
        };
        inset.calculate_spec({ elm, len_angl, ox, spec });
      });

      if (!ox.empty()) {
        adel.length = 0;
        calc_order.production.forEach(row => {
          if (row.ordn === ox) {
            if (ox._order_rows.indexOf(row.characteristic) === -1) {
              adel.push(row);
            } else {
              order_rows.set(row.characteristic, row);
            }
          }
        });
        adel.forEach(row => calc_order.production.del(row.row - 1));
      }

      const ax = [];

      ox._order_rows && ox._order_rows.forEach(cx => {
        const row = order_rows.get(cx) || calc_order.production.add({ characteristic: cx });
        row.nom = cx.owner;
        row.unit = row.nom.storage_unit;
        row.ordn = ox;
        row.len = cx.x;
        row.width = cx.y;
        row.s = cx.s;
        row.qty = calc_order_row.qty;
        row.quantity = calc_order_row.quantity;

        save && ax.push(cx.save());
        order_rows.set(cx, row);
      });
      if (order_rows.size) {
        attr.order_rows = order_rows;
      }

      if (with_price) {
        $p.pricing.calc_first_cost(attr);

        $p.pricing.calc_amount(attr);
      }

      if (save && !attr.scheme && (ox.is_new() || ox._modified)) {
        ax.push(ox.save());
      }

      return ax;
    }

  }

  $p.spec_building = new SpecBuilding($p);

  (function ({ prototype }) {
    const { value_mgr } = prototype;
    prototype.value_mgr = function (row, f, mf, array_enabled, v) {
      const tmp = value_mgr.call(this, row, f, mf, array_enabled, v);
      if (tmp) {
        return tmp;
      }
      if (f == 'trans') {
        return $p.doc.calc_order;
      } else if (f == 'partner') {
        return $p.cat.partners;
      }
    };
  })($p.classes.DataManager);

  (function (_mgr) {

    const acn = {
      ii: [_mgr.Наложение],
      i: [_mgr.НезамкнутыйКонтур],
      a: [_mgr.УгловоеДиагональное, _mgr.УгловоеКВертикальной, _mgr.УгловоеКГоризонтальной, _mgr.КрестВСтык],
      t: [_mgr.ТОбразное, _mgr.КрестВСтык]
    };

    Object.defineProperties(_mgr, {
      ad: {
        get() {
          return this.УгловоеДиагональное;
        }
      },
      av: {
        get() {
          return this.УгловоеКВертикальной;
        }
      },
      ah: {
        get() {
          return this.УгловоеКГоризонтальной;
        }
      },
      t: {
        get() {
          return this.ТОбразное;
        }
      },
      ii: {
        get() {
          return this.Наложение;
        }
      },
      i: {
        get() {
          return this.НезамкнутыйКонтур;
        }
      },
      xt: {
        get() {
          return this.КрестПересечение;
        }
      },
      xx: {
        get() {
          return this.КрестВСтык;
        }
      },

      acn: {
        value: acn
      }

    });
  })($p.enm.cnn_types);

  (function (_mgr) {

    const cache = {};

    _mgr.__define({

      profiles: {
        get() {
          return cache.profiles || (cache.profiles = [_mgr.Рама, _mgr.Створка, _mgr.Импост, _mgr.Штульп]);
        }
      },

      profile_items: {
        get() {
          return cache.profile_items || (cache.profile_items = [_mgr.Рама, _mgr.Створка, _mgr.Импост, _mgr.Штульп, _mgr.Добор, _mgr.Соединитель, _mgr.Раскладка]);
        }
      },

      rama_impost: {
        get() {
          return cache.rama_impost || (cache.rama_impost = [_mgr.Рама, _mgr.Импост]);
        }
      },

      impost_lay: {
        get() {
          return cache.impost_lay || (cache.impost_lay = [_mgr.Импост, _mgr.Раскладка]);
        }
      },

      stvs: {
        get() {
          return cache.stvs || (cache.stvs = [_mgr.Створка]);
        }
      },

      glasses: {
        get() {
          return cache.glasses || (cache.glasses = [_mgr.Стекло, _mgr.Заполнение]);
        }
      }

    });
  })($p.enm.elm_types);

  (function (_mgr) {

    _mgr.additions_groups = [_mgr.Подоконник, _mgr.Водоотлив, _mgr.МоскитнаяСетка, _mgr.Откос, _mgr.Профиль, _mgr.Монтаж, _mgr.Доставка, _mgr.Набор];
  })($p.enm.inserts_types);

  (function ({ enm }) {

    enm.debit_credit_kinds.__define({
      debit: {
        get() {
          return this.Приход;
        }
      },
      credit: {
        get() {
          return this.Расход;
        }
      }
    });

    enm.open_types.__define({

      is_opening: {
        value(v) {
          if (!v || v.empty() || v == this.Глухое || v == this.Неподвижное) {
            return false;
          }
          return true;
        }
      }

    });

    enm.orientations.__define({

      hor: {
        get() {
          return this.Горизонтальная;
        }
      },

      vert: {
        get() {
          return this.Вертикальная;
        }
      },

      incline: {
        get() {
          return this.Наклонная;
        }
      }
    });

    enm.positions.__define({

      left: {
        get() {
          return this.Лев;
        }
      },

      right: {
        get() {
          return this.Прав;
        }
      },

      top: {
        get() {
          return this.Верх;
        }
      },

      bottom: {
        get() {
          return this.Низ;
        }
      },

      hor: {
        get() {
          return this.ЦентрГоризонталь;
        }
      },

      vert: {
        get() {
          return this.ЦентрВертикаль;
        }
      }
    });
  })($p);

  $p.md.once('predefined_elmnts_inited', () => {
    const _mgr = $p.cat.characteristics;

    _mgr.adapter.load_view(_mgr, 'linked', {
      limit: 10000,
      include_docs: true,
      startkey: [$p.utils.blank.guid, 'cat.characteristics'],
      endkey: [$p.utils.blank.guid, 'cat.characteristics\u0fff']
    }).then(() => {
      const { current_user } = $p;
      if (current_user && (current_user.role_available('СогласованиеРасчетовЗаказов') || current_user.role_available('ИзменениеТехнологическойНСИ') || current_user.role_available('РедактированиеЦен'))) {
        return;
      };
      _mgr.metadata().form.obj.tabular_sections.specification.widths = "50,*,70,*,50,70,70,80,70,70,70,0,0,0";
    });
  });

  $p.CatCharacteristics = class CatCharacteristics extends $p.CatCharacteristics {

    before_save(attr) {

      const { prod_nom, calc_order, _data } = this;

      if (calc_order.is_read_only) {
        _data._err = {
          title: 'Права доступа',
          type: 'alert-error',
          text: `Запрещено изменять заказ в статусе ${calc_order.obj_delivery_state}`
        };
        return false;
      }

      const name = this.prod_name();
      if (name) {
        this.name = name;
      }

      this.partner = calc_order.partner;
    }

    add_inset_params(inset, cnstr, blank_inset) {
      const ts_params = this.params;
      const params = [];

      ts_params.find_rows({ cnstr: cnstr, inset: blank_inset || inset }, row => {
        params.indexOf(row.param) === -1 && params.push(row.param);
        return row.param;
      });

      inset.used_params.forEach(param => {
        if ((!param.is_calculated || param.show_calculated) && params.indexOf(param) == -1) {
          ts_params.add({
            cnstr: cnstr,
            inset: blank_inset || inset,
            param: param
          });
          params.push(param);
        }
      });

      ts_params.find_rows({ cnstr: cnstr, inset: blank_inset || inset }, row => {
        const links = row.param.params_links({ grid: { selection: { cnstr } }, obj: row });
        row.hide = links.some(link => link.hide);
      });
    }

    prod_name(short) {
      const { calc_order_row, calc_order, leading_product, sys, clr, origin } = this;
      let name = '';

      if (calc_order_row) {

        if (calc_order.number_internal) {
          name = calc_order.number_internal.trim();
        } else {
          let num0 = calc_order.number_doc,
              part = '';
          for (let i = 0; i < num0.length; i++) {
            if (isNaN(parseInt(num0[i]))) {
              name += num0[i];
            } else {
              break;
            }
          }
          for (let i = num0.length - 1; i > 0; i--) {
            if (isNaN(parseInt(num0[i]))) {
              break;
            }
            part = num0[i] + part;
          }
          name += parseInt(part || 0).toFixed(0);
        }

        name += '/' + calc_order_row.row.pad();

        if (!leading_product.empty()) {
          name += ':' + leading_product.calc_order_row.row.pad();
        }

        if (!sys.empty()) {
          name += '/' + sys.name;
        } else if (!origin.empty()) {
          name += '/' + origin.name;
        }

        if (!short) {

          if (!clr.empty()) {
            name += '/' + this.clr.name;
          }

          if (this.x && this.y) {
            name += '/' + this.x.toFixed(0) + 'x' + this.y.toFixed(0);
          } else if (this.x) {
            name += '/' + this.x.toFixed(0);
          } else if (this.y) {
            name += '/' + this.y.toFixed(0);
          }

          if (this.z) {
            if (this.x || this.y) {
              name += 'x' + this.z.toFixed(0);
            } else {
              name += '/' + this.z.toFixed(0);
            }
          }

          if (this.s) {
            name += '/S:' + this.s.toFixed(3);
          }

          let sprm = '';
          this.params.find_rows({ cnstr: 0 }, row => {
            if (row.param.include_to_name && sprm.indexOf(String(row.value)) == -1) {
              sprm && (sprm += ';');
              sprm += String(row.value);
            }
          });
          if (sprm) {
            name += '|' + sprm;
          }
        }
      }
      return name;
    }

    open_origin(row_id) {
      try {
        let { origin } = this.specification.get(row_id);
        if (typeof origin == 'number') {
          origin = this.cnn_elmnts.get(origin - 1).cnn;
        }
        if (origin.is_new()) {
          return $p.msg.show_msg({
            type: 'alert-warning',
            text: `Пустая ссылка на настройки в строке №${row_id + 1}`,
            title: o.presentation
          });
        }
        origin.form_obj();
      } catch (err) {
        $p.record_log(err);
      }
    }

    find_create_cx(elm, origin) {
      const { _manager, calc_order, params, inserts } = this;
      let cx;
      _manager.find_rows({ leading_product: this, leading_elm: elm, origin }, obj => {
        if (!obj._deleted) {
          cx = obj;
          return false;
        }
      });
      if (!cx) {
        cx = $p.cat.characteristics.create({
          calc_order: calc_order,
          leading_product: this,
          leading_elm: elm,
          origin: origin
        }, false, true)._set_loaded();
      }

      const { length, width } = $p.job_prm.properties;
      cx.params.clear();
      params.find_rows({ cnstr: -elm, inset: origin }, row => {
        if (row.param != length && row.param != width) {
          cx.params.add({ param: row.param, value: row.value });
        }
      });
      inserts.find_rows({ cnstr: -elm, inset: origin }, row => {
        cx.clr = row.clr;
      });
      cx.name = cx.prod_name();
      return cx;
    }

    get calc_order_row() {
      let _calc_order_row;
      this.calc_order.production.find_rows({ characteristic: this }, _row => {
        _calc_order_row = _row;
        return false;
      });
      return _calc_order_row;
    }

    get prod_nom() {
      if (!this.sys.empty()) {

        var setted,
            param = this.params;

        if (this.sys.production.count() == 1) {
          this.owner = this.sys.production.get(0).nom;
        } else if (this.sys.production.count() > 1) {
          this.sys.production.each(row => {

            if (setted) {
              return false;
            }

            if (row.param && !row.param.empty()) {
              param.find_rows({ cnstr: 0, param: row.param, value: row.value }, () => {
                setted = true;
                param._owner.owner = row.nom;
                return false;
              });
            }
          });
          if (!setted) {
            this.sys.production.find_rows({ param: $p.utils.blank.guid }, row => {
              setted = true;
              param._owner.owner = row.nom;
              return false;
            });
          }
          if (!setted) {
            this.owner = this.sys.production.get(0).nom;
          }
        }
      }

      return this.owner;
    }

    get builder_props() {
      const defaults = this.constructor.builder_props_defaults;
      const props = {};
      let tmp;
      try {
        tmp = JSON.parse(this._obj.builder_props || '{}');
      } catch (e) {
        tmp = props;
      }
      for (const prop in defaults) {
        if (tmp.hasOwnProperty(prop)) {
          props[prop] = typeof tmp[prop] === 'number' ? tmp[prop] : !!tmp[prop];
        } else {
          props[prop] = defaults[prop];
        }
      }
      return props;
    }
    set builder_props(v) {
      if (this.empty()) {
        return;
      }
      const { _obj, _data } = this;
      const name = 'builder_props';
      if (_data && _data._loading) {
        _obj[name] = v;
        return;
      }
      let _modified;
      if (!_obj[name] || typeof _obj[name] !== 'string') {
        _obj[name] = JSON.stringify(this.constructor.builder_props_defaults);
        _modified = true;
      }
      const props = this.builder_props;
      for (const prop in v) {
        if (props[prop] !== v[prop]) {
          props[prop] = v[prop];
          _modified = true;
        }
      }
      if (_modified) {
        _obj[name] = JSON.stringify(props);
        this.__notify(name);
      }
    }

    recalc(attr = {}, editor) {

      const remove = !editor;
      if (remove) {
        editor = new $p.EditorInvisible();
      }
      const project = editor.create_scheme();
      return project.load(this, true).then(() => {

        project.save_coordinates({ save: true, svg: false });
      }).then(() => {
        project.ox = '';
        if (remove) {
          editor.unload();
        } else {
          project.unload();
        }
        return this;
      });
    }

    draw(attr = {}, editor) {

      const ref = $p.utils.snake_ref(this.ref);
      const res = attr.res || {};
      res[ref] = { imgs: {} };

      const remove = !editor;
      if (remove) {
        editor = new $p.EditorInvisible();
      }
      const project = editor.create_scheme();
      return project.load(this, attr.builder_props || true).then(() => {
        const { _obj: { glasses, constructions, coordinates } } = this;
        if (attr.elm) {
          project.draw_fragment({ elm: attr.elm });
          const num = attr.elm > 0 ? `g${attr.elm}` : `l${attr.elm}`;
          if (attr.format === 'png') {
            res[ref].imgs[num] = project.view.element.toDataURL('image/png').substr(22);
          } else {
            res[ref].imgs[num] = project.get_svg(attr);
          }
        } else if (attr.glasses) {
          res[ref].glasses = glasses.map(glass => Object.assign({}, glass));
          res[ref].glasses.forEach(row => {
            const glass = project.draw_fragment({ elm: row.elm });
            if (attr.format === 'png') {
              res[ref].imgs[`g${row.elm}`] = project.view.element.toDataURL('image/png').substr(22);
            } else {
              res[ref].imgs[`g${row.elm}`] = project.get_svg(attr);
            }
            if (glass) {
              row.formula_long = glass.formula(true);
              glass.visible = false;
            }
          });
        } else {
          if (attr.format === 'png') {
            res[ref].imgs[`l0`] = project.view.element.toDataURL('image/png').substr(22);
          } else {
            res[ref].imgs[`l0`] = project.get_svg(attr);
          }
          if (attr.glasses !== false) {
            constructions.forEach(({ cnstr }) => {
              project.draw_fragment({ elm: -cnstr });
              if (attr.format === 'png') {
                res[ref].imgs[`l${cnstr}`] = project.view.element.toDataURL('image/png').substr(22);
              } else {
                res[ref].imgs[`l${cnstr}`] = project.get_svg(attr);
              }
            });
          }
        }
      }).then(() => {
        project.ox = '';
        if (remove) {
          editor.unload();
        } else {
          project.unload();
        }
        return res;
      });
    }

  };

  $p.CatCharacteristics.builder_props_defaults = {
    auto_lines: true,
    custom_lines: true,
    cnns: true,
    visualization: true,
    txts: true,
    rounding: 0,
    mosquito: true
  };

  $p.CatCharacteristicsInsertsRow.prototype.value_change = function (field, type, value) {
    if (field == 'inset') {
      if (value != this.inset) {
        const { _owner } = this._owner;
        const { cnstr } = this;

        if (value != $p.utils.blank.guid) {
          const res = _owner.params.find_rows({ cnstr, inset: value, row: { not: this.row } });
          if (res.length) {
            $p.md.emit('alert', {
              obj: _owner,
              row: this,
              title: $p.msg.data_error,
              type: 'alert-error',
              text: 'Нельзя добавлять две одинаковые вставки в один контур'
            });
            return false;
          }
        }

        !this.inset.empty() && _owner.params.clear({ inset: this.inset, cnstr });

        this._obj.inset = value;

        _owner.add_inset_params(this.inset, cnstr);
      }
    }
  };

  $p.cat.clrs.__define({

    by_predefined: {
      value(clr, clr_elm, clr_sch, elm, spec) {

        const { predefined_name } = clr;
        if (predefined_name) {
          switch (predefined_name) {
            case 'КакЭлемент':
              return clr_elm;
            case 'КакИзделие':
              return clr_sch;
            case 'КакЭлементСнаружи':
              return clr_elm.clr_out.empty() ? clr_elm : clr_elm.clr_out;
            case 'КакЭлементИзнутри':
              return clr_elm.clr_in.empty() ? clr_elm : clr_elm.clr_in;
            case 'КакИзделиеСнаружи':
              return clr_sch.clr_out.empty() ? clr_sch : clr_sch.clr_out;
            case 'КакИзделиеИзнутри':
              return clr_sch.clr_in.empty() ? clr_sch : clr_sch.clr_in;
            case 'КакЭлементИнверсный':
              return this.inverted(clr_elm);
            case 'КакИзделиеИнверсный':
              return this.inverted(clr_sch);
            case 'БезЦвета':
              return this.get();
            case 'КакВедущий':
            case 'КакВедущийИзнутри':
            case 'КакВедущийСнаружи':
            case 'КакВедущийИнверсный':
              const sub_clr = this.predefined(predefined_name.replace('КакВедущий', 'КакЭлемент'));
              const t_parent = elm && elm.t_parent();
              if (!elm || elm === t_parent) {
                return this.by_predefined(sub_clr, clr_elm);
              }
              let finded = false;
              spec && spec.find_rows({ elm: t_parent.elm, nom: t_parent.nom }, row => {
                finded = this.by_predefined(sub_clr, row.clr);
                return false;
              });
              return finded || clr_elm;

            default:
              return clr_elm;
          }
        }
        return clr.empty() ? clr_elm : clr;
      }
    },

    inverted: {
      value(clr) {
        if (clr.clr_in == clr.clr_out || clr.clr_in.empty() || clr.clr_out.empty()) {
          return clr;
        }
        const ares = $p.wsql.alasql("select top 1 ref from ? where clr_in = ? and clr_out = ? and (not ref = ?)", [this.alatable, clr.clr_out.ref, clr.clr_in.ref, $p.utils.blank.guid]);
        return ares.length ? this.get(ares[0]) : clr;
      }
    },

    selection_exclude_service: {
      value(mf, sys) {

        if (mf.choice_params) {
          mf.choice_params.length = 0;
        } else {
          mf.choice_params = [];
        }

        mf.choice_params.push({
          name: "parent",
          path: { not: $p.cat.clrs.predefined("СЛУЖЕБНЫЕ") }
        });

        if (sys) {
          mf.choice_params.push({
            name: "ref",
            get path() {
              const res = [];
              let clr_group, elm;

              function add_by_clr(clr) {
                if (clr instanceof $p.CatClrs) {
                  const { ref } = clr;
                  if (clr.is_folder) {
                    $p.cat.clrs.alatable.forEach(row => row.parent == ref && res.push(row.ref));
                  } else {
                    res.push(ref);
                  }
                } else if (clr instanceof $p.CatColor_price_groups) {
                  clr.clr_conformity.forEach(({ clr1 }) => add_by_clr(clr1));
                }
              }

              if (sys instanceof $p.Editor.BuilderElement) {
                clr_group = sys.inset.clr_group;
                if (clr_group.empty() && !(sys instanceof $p.Editor.Filling)) {
                  clr_group = sys.project._dp.sys.clr_group;
                }
              } else if (sys.hasOwnProperty('sys') && sys.hasOwnProperty('profile') && sys.profile.inset) {
                const sclr_group = sys.sys.clr_group;
                const iclr_group = sys.profile.inset.clr_group;
                clr_group = iclr_group.empty() ? sclr_group : iclr_group;
              } else if (sys.sys && sys.sys.clr_group) {
                clr_group = sys.sys.clr_group;
              } else {
                clr_group = sys.clr_group;
              }

              if (clr_group.empty() || !clr_group.clr_conformity.count()) {
                return { not: '' };
              }
              add_by_clr(clr_group);
              return { in: res };
            }
          });
        }
      }
    },

    form_selection: {
      value(pwnd, attr) {

        const eclr = this.get();

        attr.hide_filter = true;

        attr.toolbar_click = function (btn_id, wnd) {

          if (btn_id == "btn_select" && !eclr.clr_in.empty() && !eclr.clr_out.empty()) {

            if (eclr.clr_in == eclr.clr_out) {
              pwnd.on_select.call(pwnd, eclr.clr_in);
            } else {
              const ares = $p.wsql.alasql("select top 1 ref from cat_clrs where clr_in = ? and clr_out = ? and (not ref = ?)", [eclr.clr_in.ref, eclr.clr_out.ref, $p.utils.blank.guid]);

              if (ares.length) {
                pwnd.on_select.call(pwnd, $p.cat.clrs.get(ares[0]));
              } else {
                $p.cat.clrs.create({
                  clr_in: eclr.clr_in,
                  clr_out: eclr.clr_out,
                  name: eclr.clr_in.name + " \\ " + eclr.clr_out.name,
                  parent: $p.job_prm.builder.composite_clr_folder
                }).then(obj => obj.register_on_server()).then(obj => pwnd.on_select.call(pwnd, obj)).catch(err => $p.msg.show_msg({
                  type: 'alert-warning',
                  text: 'Недостаточно прав для добавления составного цвета',
                  title: 'Составной цвет'
                }));
              }
            }

            wnd.close();
            return false;
          }
        };

        const wnd = this.constructor.prototype.form_selection.call(this, pwnd, attr);

        function get_option_list(selection, val) {

          selection.clr_in = $p.utils.blank.guid;
          selection.clr_out = $p.utils.blank.guid;

          if (attr.selection) {
            attr.selection.some(sel => {
              for (var key in sel) {
                if (key == "ref") {
                  selection.ref = sel.ref;
                  return true;
                }
              }
            });
          }

          return this.constructor.prototype.get_option_list.call(this, selection, val);
        }

        return (wnd instanceof Promise ? wnd : Promise.resolve(wnd)).then(wnd => {

          const tb_filter = wnd.elmnts.filter;

          tb_filter.__define({
            get_filter: {
              value() {
                const res = {
                  selection: []
                };
                if (clr_in.getSelectedValue()) res.selection.push({ clr_in: clr_in.getSelectedValue() });
                if (clr_out.getSelectedValue()) res.selection.push({ clr_out: clr_out.getSelectedValue() });
                if (res.selection.length) res.hide_tree = true;
                return res;
              }
            }
          });

          wnd.attachEvent("onClose", () => {

            clr_in.unload();
            clr_out.unload();

            eclr.clr_in = $p.utils.blank.guid;
            eclr.clr_out = $p.utils.blank.guid;

            return true;
          });

          eclr.clr_in = $p.utils.blank.guid;
          eclr.clr_out = $p.utils.blank.guid;

          const clr_in = new $p.iface.OCombo({
            parent: tb_filter.div.obj,
            obj: eclr,
            field: 'clr_in',
            width: 160,
            hide_frm: true,
            get_option_list: get_option_list
          });
          const clr_out = new $p.iface.OCombo({
            parent: tb_filter.div.obj,
            obj: eclr,
            field: 'clr_out',
            width: 160,
            hide_frm: true,
            get_option_list: get_option_list
          });

          const clr_in_title = document.createElement('DIV');
          clr_in_title.innerHTML = 'Со стороны петель';
          clr_in_title.style = 'position: absolute;top: -4px;padding-left: 2px;font-size: small;color: gray;';
          tb_filter.div.obj.appendChild(clr_in_title);

          clr_in.DOMelem.style.float = 'left';
          clr_in.DOMelem_input.placeholder = 'Цвет изнутри';
          clr_out.DOMelem_input.placeholder = 'Цвет снаружи';

          clr_in.attachEvent('onChange', tb_filter.call_event);
          clr_out.attachEvent('onChange', tb_filter.call_event);
          clr_in.attachEvent('onClose', tb_filter.call_event);
          clr_out.attachEvent('onClose', tb_filter.call_event);

          wnd.elmnts.toolbar.hideItem('btn_new');
          wnd.elmnts.toolbar.hideItem('btn_edit');
          wnd.elmnts.toolbar.hideItem('btn_delete');

          wnd.elmnts.toolbar.setItemText('btn_select', '<b>Выбрать или создать</b>');

          return wnd;
        });
      },
      configurable: true,
      writable: true
    },

    sync_grid: {
      value(attr, grid) {

        if (attr.action == "get_selection" && attr.selection && attr.selection.some(function (v) {
          return v.hasOwnProperty("clr_in") || v.hasOwnProperty("clr_out");
        })) {
          delete attr.parent;
          delete attr.initial_value;
        }

        return $p.classes.DataManager.prototype.sync_grid.call(this, attr, grid);
      }
    }
  });

  $p.CatClrs = class CatClrs extends $p.CatClrs {

    register_on_server() {
      const { pouch } = $p.adapters;
      return pouch.save_obj(this, { db: pouch.remote.ram });
    }

    get sides() {
      const res = { is_in: false, is_out: false };
      if (!this.empty() && !this.predefined_name) {
        if (this.clr_in.empty() && this.clr_out.empty()) {
          res.is_in = res.is_out = true;
        } else {
          if (!this.clr_in.empty() && !this.clr_in.predefined_name) {
            res.is_in = true;
          }
          if (!this.clr_out.empty() && !this.clr_out.predefined_name) {
            res.is_out = true;
          }
        }
      }
      return res;
    }
  };

  $p.cat.cnns.__define({

    _nomcache: {
      value: {}
    },

    sql_selection_list_flds: {
      value(initial_value) {
        return "SELECT _t_.ref, _t_.`_deleted`, _t_.is_folder, _t_.id, _t_.name as presentation, _k_.synonym as cnn_type," + " case when _t_.ref = '" + initial_value + "' then 0 else 1 end as is_initial_value FROM cat_cnns AS _t_" + " left outer join enm_cnn_types as _k_ on _k_.ref = _t_.cnn_type %3 %4 LIMIT 300";
      }
    },

    nom_cnn: {
      value(nom1, nom2, cnn_types, ign_side, is_outer) {

        const { ProfileItem, BuilderElement, Filling } = $p.Editor;
        const { Вертикальная } = $p.enm.orientations;

        if (nom1 instanceof ProfileItem && nom2 instanceof ProfileItem && cnn_types && cnn_types.indexOf($p.enm.cnn_types.УгловоеДиагональное) != -1 && nom1.orientation != Вертикальная && nom2.orientation == Вертикальная) {
          return this.nom_cnn(nom2, nom1, cnn_types);
        }

        const side = is_outer ? $p.enm.cnn_sides.Снаружи : !ign_side && nom1 instanceof ProfileItem && nom2 instanceof ProfileItem && nom2.cnn_side(nom1);

        let onom2,
            a1,
            a2,
            thickness1,
            thickness2,
            is_i = false,
            art1glass = false,
            art2glass = false;

        if (!nom2 || $p.utils.is_data_obj(nom2) && nom2.empty()) {
          is_i = true;
          onom2 = nom2 = $p.cat.nom.get();
        } else {
          if (nom2 instanceof BuilderElement) {
            onom2 = nom2.nom;
          } else if ($p.utils.is_data_obj(nom2)) {
            onom2 = nom2;
          } else {
            onom2 = $p.cat.nom.get(nom2);
          }
        }

        const ref1 = nom1.ref;
        const ref2 = onom2.ref;

        if (!is_i) {
          if (nom1 instanceof Filling) {
            art1glass = true;
            thickness1 = nom1.thickness;
          } else if (nom2 instanceof Filling) {
            art2glass = true;
            thickness2 = nom2.thickness;
          }
        }

        if (!this._nomcache[ref1]) {
          this._nomcache[ref1] = {};
        }
        a1 = this._nomcache[ref1];
        if (!a1[ref2]) {
          a2 = a1[ref2] = [];
          this.each(cnn => {
            let is_nom1 = art1glass ? cnn.art1glass && thickness1 >= cnn.tmin && thickness1 <= cnn.tmax && cnn.cnn_type == $p.enm.cnn_types.Наложение : false,
                is_nom2 = art2glass ? cnn.art2glass && thickness2 >= cnn.tmin && thickness2 <= cnn.tmax : false;

            cnn.cnn_elmnts.each(row => {
              if (is_nom1 && is_nom2) {
                return false;
              }
              is_nom1 = is_nom1 || row.nom1 == ref1 && (row.nom2.empty() || row.nom2 == onom2);
              is_nom2 = is_nom2 || row.nom2 == onom2 && (row.nom1.empty() || row.nom1 == ref1);
            });
            if (is_nom1 && is_nom2) {
              a2.push(cnn);
            }
          });
        }

        if (cnn_types) {
          const types = Array.isArray(cnn_types) ? cnn_types : $p.enm.cnn_types.acn.a.indexOf(cnn_types) != -1 ? $p.enm.cnn_types.acn.a : [cnn_types];
          return a1[ref2].filter(cnn => {
            if (types.indexOf(cnn.cnn_type) != -1) {
              if (!side) {
                return true;
              }
              if (cnn.sd1 == $p.enm.cnn_sides.Изнутри) {
                return side == $p.enm.cnn_sides.Изнутри;
              } else if (cnn.sd1 == $p.enm.cnn_sides.Снаружи) {
                return side == $p.enm.cnn_sides.Снаружи;
              } else {
                return true;
              }
            }
          });
        }

        return a1[ref2];
      }
    },

    elm_cnn: {
      value(elm1, elm2, cnn_types, curr_cnn, ign_side, is_outer) {

        if (curr_cnn && cnn_types && cnn_types.indexOf(curr_cnn.cnn_type) != -1 && cnn_types != $p.enm.cnn_types.acn.ii) {

          if (!ign_side && curr_cnn.sd1 == $p.enm.cnn_sides.Изнутри) {
            if (typeof is_outer == 'boolean') {
              if (!is_outer) {
                return curr_cnn;
              }
            } else {
              if (elm2.cnn_side(elm1) == $p.enm.cnn_sides.Изнутри) {
                return curr_cnn;
              }
            }
          } else if (!ign_side && curr_cnn.sd1 == $p.enm.cnn_sides.Снаружи) {
            if (is_outer || elm2.cnn_side(elm1) == $p.enm.cnn_sides.Снаружи) return curr_cnn;
          } else {
            return curr_cnn;
          }
        }

        const cnns = this.nom_cnn(elm1, elm2, cnn_types, ign_side, is_outer);

        if (cnns.length) {
          const sides = [$p.enm.cnn_sides.Изнутри, $p.enm.cnn_sides.Снаружи];
          if (cnns.length > 1) {
            cnns.sort((a, b) => {
              if (sides.indexOf(a.sd1) != -1 && sides.indexOf(b.sd1) == -1) {
                return 1;
              }
              if (sides.indexOf(b.sd1) != -1 && sides.indexOf(a.sd1) == -1) {
                return -1;
              }
              if (a.priority > b.priority) {
                return -1;
              }
              if (a.priority < b.priority) {
                return 1;
              }
              if (a.name > b.name) {
                return -1;
              }
              if (a.name < b.name) {
                return 1;
              }
              return 0;
            });
          }
          return cnns[0];
        } else {}
      }
    }

  });

  $p.CatCnns.prototype.__define({

    main_row: {
      value(elm) {

        var ares,
            nom = elm.nom;

        if ($p.enm.cnn_types.acn.a.indexOf(this.cnn_type) != -1) {

          var art12 = elm.orientation == $p.enm.orientations.Вертикальная ? $p.job_prm.nom.art1 : $p.job_prm.nom.art2;

          ares = this.specification.find_rows({ nom: art12 });
          if (ares.length) return ares[0]._row;
        }

        if (this.cnn_elmnts.find_rows({ nom1: nom }).length) {
          ares = this.specification.find_rows({ nom: $p.job_prm.nom.art1 });
          if (ares.length) return ares[0]._row;
        }
        if (this.cnn_elmnts.find_rows({ nom2: nom }).length) {
          ares = this.specification.find_rows({ nom: $p.job_prm.nom.art2 });
          if (ares.length) return ares[0]._row;
        }
        ares = this.specification.find_rows({ nom: nom });
        if (ares.length) return ares[0]._row;
      }
    },

    check_nom2: {
      value(nom) {
        var ref = $p.utils.is_data_obj(nom) ? nom.ref : nom;
        return this.cnn_elmnts._obj.some(function (row) {
          return row.nom == ref;
        });
      }
    }

  });

  $p.cat.contracts.__define({

    sql_selection_list_flds: {
      value(initial_value) {
        return "SELECT _t_.ref, _t_.`_deleted`, _t_.is_folder, _t_.id, _t_.name as presentation, _k_.synonym as contract_kind, _m_.synonym as mutual_settlements, _o_.name as organization, _p_.name as partner," + " case when _t_.ref = '" + initial_value + "' then 0 else 1 end as is_initial_value FROM cat_contracts AS _t_" + " left outer join cat_organizations as _o_ on _o_.ref = _t_.organization" + " left outer join cat_partners as _p_ on _p_.ref = _t_.owner" + " left outer join enm_mutual_contract_settlements as _m_ on _m_.ref = _t_.mutual_settlements" + " left outer join enm_contract_kinds as _k_ on _k_.ref = _t_.contract_kind %3 %4 LIMIT 300";
      }
    },

    by_partner_and_org: {
      value(partner, organization, contract_kind = $p.enm.contract_kinds.СПокупателем) {

        const { main_contract } = $p.cat.partners.get(partner);

        if (main_contract && main_contract.contract_kind == contract_kind && main_contract.organization == organization) {
          return main_contract;
        }

        const res = this.find_rows({ owner: partner, organization: organization, contract_kind: contract_kind });
        res.sort((a, b) => a.date > b.date);
        return res.length ? res[0] : this.get();
      }
    }

  });

  Object.defineProperties($p.cat.divisions, {
    get_option_list: {
      value(selection, val) {
        const list = [];
        $p.current_user.acl_objs.find_rows({ type: "cat.divisions" }, ({ acl_obj }) => {
          if (acl_obj && list.indexOf(acl_obj) == -1) {
            list.push(acl_obj);
            acl_obj._children().forEach(o => list.indexOf(o) == -1 && list.push(o));
          }
        });
        if (!list.length) {
          return this.constructor.prototype.get_option_list.call(this, selection, val);
        }

        function check(v) {
          if ($p.utils.is_equal(v.value, val)) v.selected = true;
          return v;
        }

        const l = [];
        $p.utils._find_rows.call(this, list, selection, v => l.push(check({ text: v.presentation, value: v.ref })));

        l.sort(function (a, b) {
          if (a.text < b.text) {
            return -1;
          } else if (a.text > b.text) {
            return 1;
          }
          return 0;
        });
        return Promise.resolve(l);
      },
      writable: true
    }
  });

  $p.CatElm_visualization.prototype.__define({

    draw: {
      value(elm, layer, offset) {

        const { CompoundPath, PointText, constructor } = elm.project._scope;

        let subpath;

        if (this.svg_path.indexOf('{"method":') == 0) {

          const attr = JSON.parse(this.svg_path);

          if (attr.method == "subpath_outer") {
            subpath = elm.rays.outer.get_subpath(elm.corns(1), elm.corns(2)).equidistant(attr.offset || 10);
            subpath.parent = layer._by_spec;
            subpath.strokeWidth = attr.strokeWidth || 4;
            subpath.strokeColor = attr.strokeColor || 'red';
            subpath.strokeCap = attr.strokeCap || 'round';
            if (attr.dashArray) {
              subpath.dashArray = attr.dashArray;
            }
          }
        } else if (this.svg_path) {

          if (this.mode === 1) {
            const attr = JSON.parse(this.attributes || '{}');
            subpath = new PointText(Object.assign({
              parent: layer._by_spec,
              fillColor: 'black',
              fontFamily: $p.job_prm.builder.font_family,
              fontSize: attr.fontSize || 60,
              guide: true,
              content: this.svg_path
            }, attr));
          } else {
            subpath = new CompoundPath({
              pathData: this.svg_path,
              parent: layer._by_spec,
              strokeColor: 'black',
              fillColor: elm.constructor.clr_by_clr.call(elm, elm._row.clr, false),
              strokeScaling: false,
              guide: true,
              pivot: [0, 0],
              opacity: elm.opacity
            });
          }

          if (elm instanceof constructor.Filling) {
            subpath.position = elm.bounds.topLeft.add([20, 10]);
          } else {
            const { generatrix, rays: { inner, outer } } = elm;
            let angle_hor;
            if (elm.is_linear() || offset < 0) angle_hor = generatrix.getTangentAt(0).angle;else if (offset > generatrix.length) angle_hor = generatrix.getTangentAt(generatrix.length).angle;else angle_hor = generatrix.getTangentAt(offset).angle;

            if ((this.rotate != -1 || elm.orientation == $p.enm.orientations.Горизонтальная) && angle_hor != this.angle_hor) {
              subpath.rotation = angle_hor - this.angle_hor;
            }

            offset += generatrix.getOffsetOf(generatrix.getNearestPoint(elm.corns(1)));

            const p0 = generatrix.getPointAt(offset > generatrix.length ? generatrix.length : offset || 0);

            if (this.elm_side == -1) {
              const p1 = inner.getNearestPoint(p0);
              const p2 = outer.getNearestPoint(p0);

              subpath.position = p1.add(p2).divide(2);
            } else if (!this.elm_side) {
              subpath.position = inner.getNearestPoint(p0);
            } else {
              subpath.position = outer.getNearestPoint(p0);
            }
          }
        }
      }
    }

  });

  Object.defineProperties($p.cat.furns, {

    sql_selection_list_flds: {
      value(initial_value) {
        return "SELECT _t_.ref, _t_.`_deleted`, _t_.is_folder, _t_.parent, case when _t_.is_folder then '' else _t_.id end as id, _t_.name as presentation, _k_.synonym as open_type, \
					 case when _t_.ref = '" + initial_value + "' then 0 else 1 end as is_initial_value FROM cat_furns AS _t_ \
					 left outer join enm_open_types as _k_ on _k_.ref = _t_.open_type %3 %4 LIMIT 300";
      }
    },

    get_option_list: {
      value(selection, val) {

        const { characteristic, sys } = paper.project._dp;
        const { furn } = $p.job_prm.properties;

        if (furn && sys && !sys.empty()) {

          const links = furn.params_links({
            grid: { selection: { cnstr: 0 } },
            obj: { _owner: { _owner: characteristic } }
          });

          if (links.length) {
            const list = [];
            links.forEach(link => link.values.forEach(row => list.push(this.get(row._obj.value))));

            function check(v) {
              if ($p.utils.is_equal(v.value, val)) v.selected = true;
              return v;
            }

            const l = [];
            $p.utils._find_rows.call(this, list, selection, v => l.push(check({ text: v.presentation, value: v.ref })));

            l.sort((a, b) => {
              if (a.text < b.text) {
                return -1;
              } else if (a.text > b.text) {
                return 1;
              }
              return 0;
            });
            return Promise.resolve(l);
          }
        }
        return this.constructor.prototype.get_option_list.call(this, selection, val);
      },
      configurable: true
    }

  });

  $p.CatFurns = class CatFurns extends $p.CatFurns {

    refill_prm({ project, furn, cnstr }) {

      const fprms = project.ox.params;
      const { direction } = $p.job_prm.properties;

      const aprm = furn.furn_set.add_furn_prm();
      aprm.sort((a, b) => {
        if (a.presentation > b.presentation) {
          return 1;
        }
        if (a.presentation < b.presentation) {
          return -1;
        }
        return 0;
      });

      aprm.forEach(v => {

        if (v == direction) {
          return;
        }

        let prm_row,
            forcibly = true;
        fprms.find_rows({ param: v, cnstr: cnstr }, row => {
          prm_row = row;
          return forcibly = false;
        });
        if (!prm_row) {
          prm_row = fprms.add({ param: v, cnstr: cnstr }, true);
        }

        const { param } = prm_row;
        project._dp.sys.furn_params.each(row => {
          if (row.param == param) {
            if (row.forcibly || forcibly) {
              prm_row.value = row.value;
            }
            prm_row.hide = row.hide || param.is_calculated && !param.show_calculated;
            return false;
          }
        });

        param.linked_values(param.params_links({
          grid: { selection: { cnstr: cnstr } },
          obj: { _owner: { _owner: project.ox } }
        }), prm_row);
      });

      const adel = [];
      fprms.find_rows({ cnstr: cnstr, inset: $p.utils.blank.guid }, row => {
        if (aprm.indexOf(row.param) == -1) {
          adel.push(row);
        }
      });
      adel.forEach(row => fprms.del(row, true));
    }

    add_furn_prm(aprm = [], afurn_set = []) {

      if (afurn_set.indexOf(this.ref) != -1) {
        return;
      }

      afurn_set.push(this.ref);

      this.selection_params.each(row => {
        aprm.indexOf(row.param) == -1 && !row.param.is_calculated && aprm.push(row.param);
      });

      this.specification.each(row => {
        row.nom instanceof $p.CatFurns && row.nom.add_furn_prm(aprm, afurn_set);
      });

      return aprm;
    }

    get_spec(contour, cache, exclude_dop) {

      const res = $p.dp.buyers_order.create({ specification: [] }, true).specification;
      const { ox } = contour.project;
      const { НаПримыкающий } = $p.enm.transfer_operations_options;

      this.specification.find_rows({ dop: 0 }, row_furn => {

        if (!row_furn.check_restrictions(contour, cache)) {
          return;
        }

        if (!exclude_dop) {
          this.specification.find_rows({ is_main_specification_row: false, elm: row_furn.elm }, dop_row => {

            if (!dop_row.check_restrictions(contour, cache)) {
              return;
            }

            if (dop_row.is_procedure_row) {

              const invert = contour.direction == $p.enm.open_directions.Правое;
              const elm = contour.profile_by_furn_side(dop_row.side, cache);
              const { len } = elm._row;
              const { sizefurn } = elm.nom;
              const dx1 = $p.job_prm.builder.add_d ? sizefurn : 0;
              const faltz = len - 2 * sizefurn;

              let invert_nearest = false,
                  coordin = 0;

              if (dop_row.offset_option == $p.enm.offset_options.Формула) {
                if (!dop_row.formula.empty()) {
                  coordin = dop_row.formula.execute({ ox, elm, contour, len, sizefurn, dx1, faltz, invert, dop_row });
                }
              } else if (dop_row.offset_option == $p.enm.offset_options.РазмерПоФальцу) {
                coordin = faltz + dop_row.contraction;
              } else if (dop_row.offset_option == $p.enm.offset_options.ОтРучки) {
                const { generatrix } = elm;
                const hor = contour.handle_line(elm);
                coordin = generatrix.getOffsetOf(generatrix.intersect_point(hor)) - generatrix.getOffsetOf(generatrix.getNearestPoint(elm.corns(1))) + (invert ? dop_row.contraction : -dop_row.contraction);
              } else if (dop_row.offset_option == $p.enm.offset_options.ОтСередины) {
                coordin = len / 2 + (invert ? dop_row.contraction : -dop_row.contraction);
              } else {
                if (invert) {
                  if (dop_row.offset_option == $p.enm.offset_options.ОтКонцаСтороны) {
                    coordin = dop_row.contraction;
                  } else {
                    coordin = len - dop_row.contraction;
                  }
                } else {
                  if (dop_row.offset_option == $p.enm.offset_options.ОтКонцаСтороны) {
                    coordin = len - dop_row.contraction;
                  } else {
                    coordin = dop_row.contraction;
                  }
                }
              }

              const procedure_row = res.add(dop_row);
              procedure_row.origin = this;
              procedure_row.handle_height_max = contour.cnstr;
              if (dop_row.transfer_option == НаПримыкающий) {
                const nearest = elm.nearest();
                const { outer } = elm.rays;
                const nouter = nearest.rays.outer;
                const point = outer.getPointAt(outer.getOffsetOf(outer.getNearestPoint(elm.corns(1))) + coordin);
                procedure_row.handle_height_min = nearest.elm;
                procedure_row.coefficient = nouter.getOffsetOf(nouter.getNearestPoint(point)) - nouter.getOffsetOf(nouter.getNearestPoint(nearest.corns(1)));
                if (dop_row.overmeasure) {
                  procedure_row.coefficient += nearest.dx0;
                }
              } else {
                procedure_row.handle_height_min = elm.elm;
                procedure_row.coefficient = coordin;
                if (dop_row.overmeasure) {
                  procedure_row.coefficient += elm.dx0;
                }
              }

              return;
            } else if (!dop_row.quantity) {
              return;
            }

            if (dop_row.is_set_row) {
              const { nom } = dop_row;
              nom && nom.get_spec(contour, cache).each(sub_row => {
                if (sub_row.is_procedure_row) {
                  res.add(sub_row);
                } else if (sub_row.quantity) {
                  res.add(sub_row).quantity = (row_furn.quantity || 1) * (dop_row.quantity || 1) * sub_row.quantity;
                }
              });
            } else {
              res.add(dop_row).origin = this;
            }
          });
        }

        if (row_furn.is_set_row) {
          const { nom } = row_furn;
          nom && nom.get_spec(contour, cache, exclude_dop).each(sub_row => {
            if (sub_row.is_procedure_row) {
              res.add(sub_row);
            } else if (!sub_row.quantity) {
              return;
            }
            res.add(sub_row).quantity = (row_furn.quantity || 1) * sub_row.quantity;
          });
        } else {
          if (row_furn.quantity) {
            const row_spec = res.add(row_furn);
            row_spec.origin = this;
            if (!row_furn.formula.empty() && !row_furn.formula.condition_formula) {
              row_furn.formula.execute({ ox, contour, row_furn, row_spec });
            }
          }
        }
      });

      return res;
    }

  };

  $p.CatFurnsSpecificationRow = class CatFurnsSpecificationRow extends $p.CatFurnsSpecificationRow {

    check_restrictions(contour, cache) {
      const { elm, dop, handle_height_min, handle_height_max, formula } = this;
      const { direction, h_ruch, cnstr } = contour;

      if (h_ruch < handle_height_min || handle_height_max && h_ruch > handle_height_max) {
        return false;
      }

      if (!cache.ignore_formulas && !formula.empty() && formula.condition_formula && !formula.execute({ ox: cache.ox, contour, row_furn: this })) {
        return false;
      }

      const { selection_params, specification_restrictions } = this._owner._owner;
      const prop_direction = $p.job_prm.properties.direction;

      let res = true;

      selection_params.find_rows({ elm, dop }, prm_row => {
        const ok = prop_direction == prm_row.param ? direction == prm_row.value : prm_row.param.check_condition({ row_spec: this, prm_row, cnstr, ox: cache.ox });
        if (!ok) {
          return res = false;
        }
      });

      if (res) {

        specification_restrictions.find_rows({ elm, dop }, row => {
          const { lmin, lmax, amin, amax, side, for_direct_profile_only } = row;
          const elm = contour.profile_by_furn_side(side, cache);

          if (for_direct_profile_only === -1 && elm.is_linear()) {
            return res = false;
          }
          if (for_direct_profile_only === 1 && !elm.is_linear()) {
            return res = false;
          }

          const { side_count } = contour;
          const prev = contour.profile_by_furn_side(row.side === 1 ? side_count : row.side - 1, cache);
          const next = contour.profile_by_furn_side(row.side === side_count ? 1 : row.side + 1, cache);
          const len = (elm._row.len - prev.nom.sizefurn - next.nom.sizefurn).round();
          if (len < lmin || len > lmax) {
            return res = false;
          }

          const angle = direction == $p.enm.open_directions.Правое ? elm.generatrix.angle_to(prev.generatrix, elm.e) : prev.generatrix.angle_to(elm.generatrix, elm.b);
          if (angle < amin || angle > amax) {
            return res = false;
          }
        });
      }

      return res;
    }

    get nom() {
      return this._getter('nom') || this._getter('nom_set');
    }
    set nom(v) {
      if (v !== '') {
        this._setter('nom', v);
      }
    }

    get nom_set() {
      return this.nom;
    }
    set nom_set(v) {
      this.nom = v;
    }

  };

  (({ md }) => {
    const { fields } = md.get("cat.furns").tabular_sections.specification;
    fields.nom_set = fields.nom;
  })($p);

  $p.cat.insert_bind.__define({

    insets: {
      value(ox) {
        const { sys, owner } = ox;
        const res = [];
        this.forEach(o => {
          o.production.forEach(row => {
            const { nom } = row;
            if (sys._hierarchy(nom) || owner._hierarchy(nom)) {
              o.inserts.forEach(({ inset, elm_type }) => {
                if (!res.some(irow => irow.inset == inset && irow.elm_type == elm_type)) {
                  res.push({ inset, elm_type });
                }
              });
            }
          });
        });
        return res;
      }
    }

  });

  $p.md.once('predefined_elmnts_inited', () => {
    $p.cat.scheme_settings && $p.cat.scheme_settings.find_schemas('dp.buyers_order.production');
  });

  $p.cat.inserts.__define({

    _inserts_types_filling: {
      value: [$p.enm.inserts_types.Заполнение]
    },

    _prms_by_type: {
      value(insert_type) {
        const prms = new Set();
        this.find_rows({ available: true, insert_type }, inset => {
          inset.used_params.forEach(param => {
            !param.is_calculated && prms.add(param);
          });
          inset.specification.forEach(({ nom }) => {
            if (nom) {
              const { used_params } = nom;
              used_params && used_params.forEach(param => {
                !param.is_calculated && prms.add(param);
              });
            }
          });
        });
        return prms;
      }
    },

    ItemData: {
      value: class ItemData {
        constructor(item, Renderer) {

          this.Renderer = Renderer;
          this.count = 0;

          class ItemRow extends $p.DpBuyers_orderProductionRow {

            tune(ref, mf, column) {

              const { inset } = this;
              const prm = $p.cch.properties.get(ref);

              if (mf.choice_params) {
                const adel = new Set();
                for (const choice of mf.choice_params) {
                  if (choice.name !== 'owner' && choice.path != prm) {
                    adel.add(choice);
                  }
                }
                for (const choice of adel) {
                  mf.choice_params.splice(mf.choice_params.indexOf(choice), 1);
                }
              } else {
                mf.choice_params = [];
              }

              const prms = new Set();
              inset.used_params.forEach(param => {
                !param.is_calculated && prms.add(param);
              });
              inset.specification.forEach(({ nom }) => {
                if (nom) {
                  const { used_params } = nom;
                  used_params && used_params.forEach(param => {
                    !param.is_calculated && prms.add(param);
                  });
                }
              });
              mf.read_only = !prms.has(prm);

              if (!mf.read_only) {
                const links = prm.params_links({ grid: { selection: {} }, obj: this });
                const hide = links.some(link => link.hide);
                if (hide && !mf.read_only) {
                  mf.read_only = true;
                }

                if (links.length) {
                  const filter = {};
                  prm.filter_params_links(filter, null, links);
                  filter.ref && mf.choice_params.push({
                    name: 'ref',
                    path: filter.ref
                  });
                }
              }
            }
          }

          this.ProductionRow = ItemRow;

          const meta = $p.dp.buyers_order.metadata('production');
          this.meta = meta._clone();

          this.meta.fields.inset.choice_params[0].path = item;
          this.meta.fields.inset.disable_clear = true;

          const changed = new Set();

          for (const param of $p.cat.inserts._prms_by_type(item)) {

            $p.cat.scheme_settings.find_rows({ obj: 'dp.buyers_order.production', name: item.name }, scheme => {
              if (!scheme.fields.find({ field: param.ref })) {
                const row = scheme.fields.add({
                  field: param.ref,
                  caption: param.caption,
                  use: true
                });
                const note = scheme.fields.find({ field: 'note' });
                note && scheme.fields.swap(row, note);

                changed.add(scheme);
              }
            });

            const mf = this.meta.fields[param.ref] = {
              synonym: param.caption,
              type: param.type
            };
            if (param.type.types.some(type => type === 'cat.property_values')) {
              mf.choice_params = [{ name: 'owner', path: param }];
            }

            Object.defineProperty(ItemRow.prototype, param.ref, {
              get() {
                const { product_params } = this._owner._owner;
                const row = product_params.find({ elm: this.row, param }) || product_params.add({ elm: this.row, param });
                return row.value;
              },
              set(v) {
                const { product_params } = this._owner._owner;
                const row = product_params.find({ elm: this.row, param }) || product_params.add({ elm: this.row, param });
                row.value = v;
              }
            });
          }

          for (const scheme of changed) {
            const { doc } = $p.adapters.pouch.local;
            if (doc.adapter === 'http' && !scheme.user) {
              doc.getSession().then(({ userCtx }) => {
                if (userCtx.roles.indexOf('doc_full') !== -1) {
                  scheme.save();
                }
              });
            } else {
              scheme.save();
            }
          }
        }

      }
    },

    by_thickness: {
      value(min, max) {

        if (!this._by_thickness) {
          this._by_thickness = {};
          this.find_rows({ insert_type: { in: this._inserts_types_filling } }, ins => {
            if (ins.thickness > 0) {
              if (!this._by_thickness[ins.thickness]) this._by_thickness[ins.thickness] = [];
              this._by_thickness[ins.thickness].push(ins);
            }
          });
        }

        const res = [];
        for (let thickness in this._by_thickness) {
          if (parseFloat(thickness) >= min && parseFloat(thickness) <= max) Array.prototype.push.apply(res, this._by_thickness[thickness]);
        }
        return res;
      }
    },

    sql_selection_list_flds: {
      value(initial_value) {
        return "SELECT _t_.ref, _t_.`_deleted`, _t_.is_folder, _t_.id, _t_.name as presentation, _k_.synonym as insert_type," + " case when _t_.ref = '" + initial_value + "' then 0 else 1 end as is_initial_value FROM cat_inserts AS _t_" + " left outer join enm_inserts_types as _k_ on _k_.ref = _t_.insert_type %3 %4 LIMIT 300";
      }
    }

  });

  $p.CatInserts = class CatInserts extends $p.CatInserts {

    nom(elm, strict) {

      const { _data } = this;

      if (!strict && !elm && _data.nom) {
        return _data.nom;
      }

      const main_rows = [];
      let _nom;

      const { check_params } = ProductsBuilding;

      this.specification.find_rows({ is_main_elm: true }, row => {
        if (elm && !check_params({
          params: this.selection_params,
          ox: elm.project.ox,
          elm: elm,
          row_spec: row,
          cnstr: 0,
          origin: elm.fake_origin || 0
        })) {
          return;
        }
        main_rows.push(row);
      });

      if (!main_rows.length && !strict && this.specification.count()) {
        main_rows.push(this.specification.get(0));
      }

      if (main_rows.length && main_rows[0].nom instanceof $p.CatInserts) {
        if (main_rows[0].nom == this) {
          _nom = $p.cat.nom.get();
        } else {
          _nom = main_rows[0].nom.nom(elm, strict);
        }
      } else if (main_rows.length) {
        if (elm && !main_rows[0].formula.empty()) {
          try {
            _nom = main_rows[0].formula.execute({ elm });
            if (!_nom) {
              _nom = main_rows[0].nom;
            }
          } catch (e) {
            _nom = main_rows[0].nom;
          }
        } else {
          _nom = main_rows[0].nom;
        }
      } else {
        _nom = $p.cat.nom.get();
      }

      if (main_rows.length < 2) {
        _data.nom = typeof _nom == 'string' ? $p.cat.nom.get(_nom) : _nom;
      } else {
        _data.nom = _nom;
      }

      return _data.nom;
    }

    contour_attrs(contour) {

      const main_rows = [];
      const res = { calc_order: contour.project.ox.calc_order };

      this.specification.find_rows({ is_main_elm: true }, row => {
        main_rows.push(row);
        return false;
      });

      if (main_rows.length) {
        const irow = main_rows[0],
              sizes = {},
              sz_keys = {},
              sz_prms = ['length', 'width', 'thickness'].map(name => {
          const prm = $p.job_prm.properties[name];
          sz_keys[prm.ref] = name;
          return prm;
        });

        res.owner = irow.nom instanceof $p.CatInserts ? irow.nom.nom() : irow.nom;

        contour.project.ox.params.find_rows({
          cnstr: contour.cnstr,
          inset: this,
          param: { in: sz_prms }
        }, row => {
          sizes[sz_keys[row.param.ref]] = row.value;
        });

        if (Object.keys(sizes).length > 0) {
          res.x = sizes.length ? (sizes.length + irow.sz) * (irow.coefficient * 1000 || 1) : 0;
          res.y = sizes.width ? (sizes.width + irow.sz) * (irow.coefficient * 1000 || 1) : 0;
          res.s = (res.x * res.y / 1000000).round(3);
          res.z = sizes.thickness * (irow.coefficient * 1000 || 1);
        } else {
          if (irow.count_calc_method == $p.enm.count_calculating_ways.ПоФормуле && !irow.formula.empty()) {
            irow.formula.execute({
              ox: contour.project.ox,
              contour: contour,
              inset: this,
              row_ins: irow,
              res: res
            });
          }
          if (irow.count_calc_method == $p.enm.count_calculating_ways.ПоПлощади && this.insert_type == $p.enm.inserts_types.МоскитнаяСетка) {
            const bounds = contour.bounds_inner(irow.sz);
            res.x = bounds.width.round(1);
            res.y = bounds.height.round(1);
            res.s = (res.x * res.y / 1000000).round(3);
          } else {
            res.x = contour.w + irow.sz;
            res.y = contour.h + irow.sz;
            res.s = (res.x * res.y / 1000000).round(3);
          }
        }
      }

      return res;
    }

    check_restrictions(row, elm, by_perimetr, len_angl) {

      const { _row } = elm;
      const len = len_angl ? len_angl.len : _row.len;
      const is_linear = elm.is_linear ? elm.is_linear() : true;
      let is_tabular = true;

      if (row.smin > _row.s || _row.s && row.smax && row.smax < _row.s) {
        return false;
      }

      if (row.is_main_elm && !row.quantity) {
        return false;
      }

      if (row.for_direct_profile_only > 0 && !is_linear || row.for_direct_profile_only < 0 && is_linear) {
        return false;
      }

      if ($p.utils.is_data_obj(row)) {

        if (row.impost_fixation == $p.enm.impost_mount_options.ДолжныБытьКрепленияИмпостов) {
          if (!elm.joined_imposts(true)) {
            return false;
          }
        } else if (row.impost_fixation == $p.enm.impost_mount_options.НетКрепленийИмпостовИРам) {
          if (elm.joined_imposts(true)) {
            return false;
          }
        }
        is_tabular = false;
      }

      if (!is_tabular || by_perimetr || row.count_calc_method != $p.enm.count_calculating_ways.ПоПериметру) {
        if (row.lmin > len || row.lmax < len && row.lmax > 0) {
          return false;
        }
        if (row.ahmin > _row.angle_hor || row.ahmax < _row.angle_hor) {
          return false;
        }
      }

      return true;
    }

    filtered_spec({ elm, is_high_level_call, len_angl, own_row, ox }) {

      const res = [];

      if (this.empty()) {
        return res;
      }

      function fake_row(row) {
        if (row._metadata) {
          const res = {};
          for (let fld in row._metadata().fields) {
            res[fld] = row[fld];
          }
          return res;
        } else {
          return Object.assign({}, row);
        }
      }

      const { insert_type, check_restrictions } = this;
      const { Профиль, Заполнение } = $p.enm.inserts_types;
      const { check_params } = ProductsBuilding;

      if (is_high_level_call && insert_type == Заполнение) {

        const glass_rows = [];
        ox.glass_specification.find_rows({ elm: elm.elm }, row => {
          glass_rows.push(row);
        });

        if (glass_rows.length) {
          glass_rows.forEach(row => {
            row.inset.filtered_spec({ elm, len_angl, ox, own_row: { clr: row.clr } }).forEach(row => {
              res.push(row);
            });
          });
          return res;
        }
      }

      this.specification.forEach(row => {

        if (!check_restrictions(row, elm, insert_type == Профиль, len_angl)) {
          return;
        }

        if (own_row && row.clr.empty() && !own_row.clr.empty()) {
          row = fake_row(row);
          row.clr = own_row.clr;
        }
        if (!check_params({
          params: this.selection_params,
          ox: ox,
          elm: elm,
          row_spec: row,
          cnstr: len_angl && len_angl.cnstr,
          origin: len_angl && len_angl.origin
        })) {
          return;
        }

        if (row.nom instanceof $p.CatInserts) {
          row.nom.filtered_spec({ elm, len_angl, ox, own_row: own_row || row }).forEach(subrow => {
            const fakerow = fake_row(subrow);
            fakerow.quantity = (subrow.quantity || 1) * (row.quantity || 1);
            fakerow.coefficient = (subrow.coefficient || 1) * (row.coefficient || 1);
            fakerow._origin = row.nom;
            if (fakerow.clr.empty()) {
              fakerow.clr = row.clr;
            }
            res.push(fakerow);
          });
        } else {
          res.push(row);
        }
      });

      return res;
    }

    calculate_spec({ elm, len_angl, ox, spec, clr }) {

      const { _row } = elm;
      const { ПоПериметру, ПоШагам, ПоФормуле, ДляЭлемента, ПоПлощади } = $p.enm.count_calculating_ways;
      const { profile_items } = $p.enm.elm_types;
      const { new_spec_row, calc_qty_len, calc_count_area_mass } = ProductsBuilding;

      if (!spec) {
        spec = ox.specification;
      }

      this.filtered_spec({ elm, is_high_level_call: true, len_angl, ox, clr }).forEach(row_ins_spec => {

        const origin = row_ins_spec._origin || this;

        let row_spec;

        if (row_ins_spec.count_calc_method != ПоПериметру && row_ins_spec.count_calc_method != ПоШагам || profile_items.indexOf(_row.elm_type) != -1) {
          row_spec = new_spec_row({ elm, row_base: row_ins_spec, origin, spec, ox });
        }

        if (row_ins_spec.count_calc_method == ПоФормуле && !row_ins_spec.formula.empty()) {
          row_spec = new_spec_row({ row_spec, elm, row_base: row_ins_spec, origin, spec, ox });
        } else if (profile_items.indexOf(_row.elm_type) != -1 || row_ins_spec.count_calc_method == ДляЭлемента) {
          calc_qty_len(row_spec, row_ins_spec, len_angl ? len_angl.len : _row.len);
        } else {

          if (row_ins_spec.count_calc_method == ПоПлощади) {
            row_spec.qty = row_ins_spec.quantity;
            if (this.insert_type == $p.enm.inserts_types.МоскитнаяСетка) {
              const bounds = elm.layer.bounds_inner(row_ins_spec.sz);
              row_spec.len = bounds.height * (row_ins_spec.coefficient || 0.001);
              row_spec.width = bounds.width * (row_ins_spec.coefficient || 0.001);
              row_spec.s = (row_spec.len * row_spec.width).round(3);
            } else {
              row_spec.len = (_row.y2 - _row.y1 - row_ins_spec.sz) * (row_ins_spec.coefficient || 0.001);
              row_spec.width = (_row.x2 - _row.x1 - row_ins_spec.sz) * (row_ins_spec.coefficient || 0.001);
              row_spec.s = _row.s;
            }
          } else if (row_ins_spec.count_calc_method == ПоПериметру) {
            const row_prm = { _row: { len: 0, angle_hor: 0, s: _row.s } };
            const perimeter = elm.perimeter ? elm.perimeter : this.insert_type == $p.enm.inserts_types.МоскитнаяСетка ? elm.layer.perimeter_inner(row_ins_spec.sz) : elm.layer.perimeter;
            perimeter.forEach(rib => {
              row_prm._row._mixin(rib);
              row_prm.is_linear = () => rib.profile ? rib.profile.is_linear() : true;
              if (this.check_restrictions(row_ins_spec, row_prm, true)) {
                row_spec = new_spec_row({ elm, row_base: row_ins_spec, origin, spec, ox });
                const qty = !row_ins_spec.formula.empty() && row_ins_spec.formula.execute({
                  ox: ox,
                  elm: rib.profile || rib,
                  cnstr: len_angl && len_angl.cnstr || 0,
                  inset: len_angl && len_angl.hasOwnProperty('cnstr') ? len_angl.origin : $p.utils.blank.guid,
                  row_ins: row_ins_spec,
                  row_spec: row_spec,
                  clr,
                  len: rib.len
                });
                if (qty) {
                  if (!row_spec.qty) {
                    row_spec.qty = qty;
                  }
                } else {
                  calc_qty_len(row_spec, row_ins_spec, rib.len);
                }
                calc_count_area_mass(row_spec, spec, _row, row_ins_spec.angle_calc_method);
              }
              row_spec = null;
            });
          } else if (row_ins_spec.count_calc_method == ПоШагам) {

            const bounds = this.insert_type == $p.enm.inserts_types.МоскитнаяСетка ? elm.layer.bounds_inner(row_ins_spec.sz) : { height: _row.y2 - _row.y1, width: _row.x2 - _row.x1 };

            const h = !row_ins_spec.step_angle || row_ins_spec.step_angle == 180 ? bounds.height : bounds.width;
            const w = !row_ins_spec.step_angle || row_ins_spec.step_angle == 180 ? bounds.width : bounds.height;
            if (row_ins_spec.step) {
              let qty = 0;
              let pos;
              if (row_ins_spec.do_center && h >= row_ins_spec.step) {
                pos = h / 2;
                if (pos >= row_ins_spec.offsets && pos <= h - row_ins_spec.offsets) {
                  qty++;
                }
                for (let i = 1; i <= Math.ceil(h / row_ins_spec.step); i++) {
                  pos = h / 2 + i * row_ins_spec.step;
                  if (pos >= row_ins_spec.offsets && pos <= h - row_ins_spec.offsets) {
                    qty++;
                  }
                  pos = h / 2 - i * row_ins_spec.step;
                  if (pos >= row_ins_spec.offsets && pos <= h - row_ins_spec.offsets) {
                    qty++;
                  }
                }
              } else {
                for (let i = 1; i <= Math.ceil(h / row_ins_spec.step); i++) {
                  pos = i * row_ins_spec.step;
                  if (pos >= row_ins_spec.offsets && pos <= h - row_ins_spec.offsets) {
                    qty++;
                  }
                }
              }

              if (qty) {
                row_spec = new_spec_row({ elm, row_base: row_ins_spec, origin, spec, ox });
                calc_qty_len(row_spec, row_ins_spec, w);
                row_spec.qty *= qty;
                calc_count_area_mass(row_spec, spec, _row, row_ins_spec.angle_calc_method);
              }
              row_spec = null;
            }
          } else {
            throw new Error("count_calc_method: " + row_ins_spec.count_calc_method);
          }
        }

        if (row_spec) {
          if (!row_ins_spec.formula.empty()) {
            const qty = row_ins_spec.formula.execute({
              ox: ox,
              elm: elm,
              cnstr: len_angl && len_angl.cnstr || 0,
              inset: len_angl && len_angl.hasOwnProperty('cnstr') ? len_angl.origin : $p.utils.blank.guid,
              row_ins: row_ins_spec,
              row_spec: row_spec,
              clr,
              len: len_angl ? len_angl.len : _row.len
            });
            if (row_ins_spec.count_calc_method == ПоФормуле) {
              row_spec.qty = qty;
            } else if (row_ins_spec.formula.condition_formula && !qty) {
              row_spec.qty = 0;
            }
          }
          calc_count_area_mass(row_spec, spec, _row, row_ins_spec.angle_calc_method);
        }
      });
    }

    get thickness() {

      const { _data } = this;

      if (!_data.hasOwnProperty("thickness")) {
        _data.thickness = 0;
        const nom = this.nom(null, true);
        if (nom && !nom.empty()) {
          _data.thickness = nom.thickness;
        } else {
          this.specification.forEach(({ nom }) => {
            if (nom) {
              _data.thickness += nom.thickness;
            }
          });
        }
      }

      return _data.thickness;
    }

    get used_params() {
      const res = [];
      this.selection_params.forEach(({ param }) => {
        if (!param.empty() && res.indexOf(param) == -1) {
          res.push(param);
        }
      });
      this.product_params.forEach(({ param }) => {
        if (!param.empty() && res.indexOf(param) == -1) {
          res.push(param);
        }
      });
      return res;
    }

  };

  $p.cat.nom.__define({

    sql_selection_list_flds: {
      value(initial_value) {
        return "SELECT _t_.ref, _t_.`_deleted`, _t_.is_folder, _t_.id, _t_.article, _t_.name as presentation, _u_.name as nom_unit, _k_.name as nom_kind, _t_.thickness," + " case when _t_.ref = '" + initial_value + "' then 0 else 1 end as is_initial_value FROM cat_nom AS _t_" + " left outer join cat_units as _u_ on _u_.ref = _t_.base_unit" + " left outer join cat_nom_kinds as _k_ on _k_.ref = _t_.nom_kind %3 %4 LIMIT 300";
      }
    },

    sql_selection_where_flds: {
      value(filter) {
        return " OR _t_.article LIKE '" + filter + "' OR _t_.id LIKE '" + filter + "' OR _t_.name LIKE '" + filter + "'";
      }
    },

    load_array: {
      value(aattr, forse) {
        const units = [];
        for (const row of aattr) {
          if (row.units) {
            row.units.split('\n').forEach(urow => {
              const uattr = urow.split(',');
              units.push({
                ref: uattr[0],
                owner: row.ref,
                id: uattr[1],
                name: uattr[2],
                qualifier_unit: uattr[3],
                heft: parseFloat(uattr[4]),
                volume: parseFloat(uattr[5]),
                coefficient: parseFloat(uattr[6]),
                rounding_threshold: parseFloat(uattr[7])
              });
            });
            delete row.units;
          }
        }
        const res = this.constructor.prototype.load_array.call(this, aattr, forse);
        units.length && $p.cat.nom_units.load_array(units, forse);
        return res;
      }
    }
  });

  $p.CatNom.prototype.__define({

    _price: {
      value(attr) {

        let price = 0,
            currency = $p.job_prm.pricing.main_currency,
            start_date = $p.utils.blank.date;

        if (!attr) {
          attr = { currency };
        }
        const { _price } = this._data;
        const { x, y, z, clr, ref, calc_order } = attr.characteristic || {};

        if (attr.price_type) {

          if ($p.utils.is_data_obj(attr.price_type)) {
            attr.price_type = attr.price_type.ref;
          }

          if (!attr.characteristic) {
            attr.characteristic = $p.utils.blank.guid;
          } else if ($p.utils.is_data_obj(attr.characteristic)) {
            attr.characteristic = ref;
            if (!calc_order.empty()) {
              const tmp = [];
              const { by_ref } = $p.cat.characteristics;
              for (let clrx in _price) {
                const cx = by_ref[clrx];
                if (cx && cx.clr == clr) {
                  if (_price[clrx][attr.price_type]) {
                    if (cx.x && x && cx.x - x < -10) {
                      continue;
                    }
                    if (cx.y && y && cx.y - y < -10) {
                      continue;
                    }
                    tmp.push({
                      cx,
                      rate: (cx.x && x ? Math.abs(cx.x - x) : 0) + (cx.y && y ? Math.abs(cx.y - y) : 0) + (cx.z && z && cx.z == z ? 1 : 0)
                    });
                  }
                }
              }
              if (tmp.length) {
                tmp.sort((a, b) => a.rate - b.rate);
                attr.characteristic = tmp[0].cx.ref;
              }
            }
          }
          if (!attr.date) {
            attr.date = new Date();
          }

          if (_price) {
            if (_price[attr.characteristic]) {
              if (_price[attr.characteristic][attr.price_type]) {
                _price[attr.characteristic][attr.price_type].forEach(row => {
                  if (row.date > start_date && row.date <= attr.date) {
                    price = row.price;
                    currency = row.currency;
                    start_date = row.date;
                  }
                });
              }
            } else if (attr.clr) {
              const { by_ref } = $p.cat.characteristics;
              for (let clrx in _price) {
                const cx = by_ref[clrx];
                if (cx && cx.clr == attr.clr) {
                  if (_price[clrx][attr.price_type]) {
                    _price[clrx][attr.price_type].forEach(row => {
                      if (row.date > start_date && row.date <= attr.date) {
                        price = row.price;
                        currency = row.currency;
                        start_date = row.date;
                      }
                    });
                    break;
                  }
                }
              }
            }
          }
        }

        if (attr.formula) {

          if (!price && _price && _price[$p.utils.blank.guid]) {
            if (_price[$p.utils.blank.guid][attr.price_type]) {
              _price[$p.utils.blank.guid][attr.price_type].forEach(row => {
                if (row.date > start_date && row.date <= attr.date) {
                  price = row.price;
                  currency = row.currency;
                  start_date = row.date;
                }
              });
            }
          }
          price = attr.formula.execute({
            nom: this,
            characteristic: $p.cat.characteristics.get(attr.characteristic, false),
            date: attr.date,
            price, currency, x, y, z, clr, calc_order
          });
        }

        return $p.pricing.from_currency_to_currency(price, attr.date, currency, attr.currency);
      }
    },

    grouping: {
      get() {
        if (!this.hasOwnProperty('_grouping')) {
          this.extra_fields.find_rows({ property: $p.job_prm.properties.grouping }, row => {
            this._grouping = row.value.name;
          });
        }
        return this._grouping || '';
      }
    },

    presentation: {
      get() {
        return this.name + (this.article ? ' ' + this.article : '');
      },
      set(v) {}
    },

    by_clr_key: {
      value(clr) {

        if (this.clr == clr) {
          return this;
        }
        if (!this._clr_keys) {
          this._clr_keys = new Map();
        }
        const { _clr_keys } = this;
        if (_clr_keys.has(clr)) {
          return _clr_keys.get(clr);
        }
        if (_clr_keys.size) {
          return this;
        }

        const clr_key = $p.job_prm.properties.clr_key && $p.job_prm.properties.clr_key.ref;
        let clr_value;
        this.extra_fields.find_rows({ property: $p.job_prm.properties.clr_key }, row => clr_value = row.value);
        if (!clr_value) {
          return this;
        }

        this._manager.alatable.forEach(nom => {
          nom.extra_fields && nom.extra_fields.some(row => {
            row.property === clr_key && row.value === clr_value && _clr_keys.set($p.cat.clrs.get(nom.clr), $p.cat.nom.get(nom.ref));
          });
        });

        if (_clr_keys.has(clr)) {
          return _clr_keys.get(clr);
        }
        if (!_clr_keys.size) {
          _clr_keys.set(0, 0);
        }
        return this;
      }
    },

    toJSON: {
      value() {
        const { _obj, ref } = this;
        const { guid } = $p.utils.blank;
        if (!_obj.units && !_obj.is_folder) {
          _obj.units = '';
          for (const unit of $p.cat.nom_units.alatable) {
            if (unit.owner === ref) {
              if (_obj.units) {
                _obj.units += '\n';
              }
              _obj.units += `${unit.ref},${unit.id},${unit.name},${unit.qualifier_unit},${unit.heft},${unit.volume},${unit.coefficient},${unit.rounding_threshold}`;
            }
          }
        }
        for (const fld in _obj) {
          if (_obj[fld] === guid) {
            _obj[fld] = '';
          }
        }
        return _obj;
      }
    }

  });

  $p.cat.partners.__define({

    sql_selection_where_flds: {
      value(filter) {
        return " OR inn LIKE '" + filter + "' OR name_full LIKE '" + filter + "' OR name LIKE '" + filter + "'";
      }
    }
  });

  $p.CatPartners.prototype.__define({

    addr: {
      get() {

        return this.contact_information._obj.reduce(function (val, row) {

          if (row.kind == $p.cat.contact_information_kinds.predefined("ЮрАдресКонтрагента") && row.presentation) return row.presentation;else if (val) return val;else if (row.presentation && (row.kind == $p.cat.contact_information_kinds.predefined("ФактАдресКонтрагента") || row.kind == $p.cat.contact_information_kinds.predefined("ПочтовыйАдресКонтрагента"))) return row.presentation;
        }, "");
      }
    },

    phone: {
      get() {

        return this.contact_information._obj.reduce(function (val, row) {

          if (row.kind == $p.cat.contact_information_kinds.predefined("ТелефонКонтрагента") && row.presentation) return row.presentation;else if (val) return val;else if (row.kind == $p.cat.contact_information_kinds.predefined("ТелефонКонтрагентаМобильный") && row.presentation) return row.presentation;
        }, "");
      }
    },

    long_presentation: {
      get() {
        const { addr, phone, inn, kpp } = this;
        let res = this.name_full || this.name;

        if (inn) {
          res += ", ИНН" + inn;
        }
        if (kpp) {
          res += ", КПП" + kpp;
        }
        if (addr) {
          res += ", " + addr;
        }
        if (phone) {
          res += ", " + phone;
        }
        return res;
      }
    }
  });

  $p.cat.production_params.__define({

    slist: function (prop, is_furn) {
      var res = [],
          rt,
          at,
          pmgr,
          op = this.get(prop);

      if (op && op.type.is_ref) {
        for (rt in op.type.types) if (op.type.types[rt].indexOf(".") > -1) {
          at = op.type.types[rt].split(".");
          pmgr = $p[at[0]][at[1]];
          if (pmgr) {
            if (pmgr.class_name == "enm.open_directions") pmgr.each(function (v) {
              if (v.name != $p.enm.tso.folding) res.push({ value: v.ref, text: v.synonym });
            });else pmgr.find_rows({ owner: prop }, function (v) {
              res.push({ value: v.ref, text: v.presentation });
            });
          }
        }
      }
      return res;
    }
  });

  $p.CatProduction_params.prototype.__define({

    noms: {
      get() {
        const noms = [];
        this.elmnts._obj.forEach(({ nom }) => !$p.utils.is_empty_guid(nom) && noms.indexOf(nom) == -1 && noms.push(nom));
        return noms;
      }
    },

    furns: {
      value(ox) {
        const { furn } = $p.job_prm.properties;
        const { furns } = $p.cat;
        const list = [];
        if (furn) {
          const links = furn.params_links({
            grid: { selection: { cnstr: 0 } },
            obj: { _owner: { _owner: ox } }
          });
          if (links.length) {
            links.forEach(link => link.values._obj.forEach(({ value, by_default, forcibly }) => {
              const v = furns.get(value);
              v && list.push({ furn: v, by_default, forcibly });
            }));
          }
        }
        return list;
      }
    },

    inserts: {
      value(elm_types, by_default) {
        var __noms = [];
        if (!elm_types) elm_types = $p.enm.elm_types.rama_impost;else if (typeof elm_types == "string") elm_types = $p.enm.elm_types[elm_types];else if (!Array.isArray(elm_types)) elm_types = [elm_types];

        this.elmnts.each(row => {
          if (!row.nom.empty() && elm_types.indexOf(row.elm_type) != -1 && (by_default == "rows" || !__noms.some(e => row.nom == e.nom))) __noms.push(row);
        });

        if (by_default == "rows") return __noms;

        __noms.sort(function (a, b) {

          if (by_default) {

            if (a.by_default && !b.by_default) return -1;else if (!a.by_default && b.by_default) return 1;else return 0;
          } else {
            if (a.nom.name < b.nom.name) return -1;else if (a.nom.name > b.nom.name) return 1;else return 0;
          }
        });
        return __noms.map(e => e.nom);
      }
    },

    refill_prm: {
      value(ox, cnstr = 0, force) {

        const prm_ts = !cnstr ? this.product_params : this.furn_params;
        const adel = [];
        const auto_align = ox.calc_order.obj_delivery_state == $p.enm.obj_delivery_states.Шаблон && $p.job_prm.properties.auto_align;
        const { params } = ox;

        function add_prm(proto) {
          let row;
          params.find_rows({ cnstr: cnstr, param: proto.param }, _row => {
            row = _row;
            return false;
          });

          if (!row) {
            if (cnstr) {
              return;
            }
            row = params.add({ cnstr: cnstr, param: proto.param, value: proto.value });
          }

          const links = proto.param.params_links({ grid: { selection: { cnstr } }, obj: row });
          const hide = proto.hide || links.some(link => link.hide);
          if (row.hide != hide) {
            row.hide = hide;
          }

          if (proto.forcibly && row.value != proto.value) {
            row.value = proto.value;
          }
        }

        if (!cnstr) {
          params.find_rows({ cnstr: cnstr }, row => {
            const { param } = row;
            if (param !== auto_align && prm_ts.find_rows({ param }).length == 0) {
              adel.push(row);
            }
          });
          adel.forEach(row => params.del(row));
        }

        prm_ts.forEach(add_prm);

        !cnstr && auto_align && add_prm({ param: auto_align, value: '', hide: false });

        if (!cnstr) {
          ox.sys = this;
          ox.owner = ox.prod_nom;

          const furns = this.furns(ox);

          ox.constructions.forEach(row => {
            if (!row.furn.empty()) {
              let changed = force;
              if (furns.length) {
                if (furns.some(frow => {
                  if (frow.forcibly) {
                    row.furn = frow.furn;
                    return changed = true;
                  }
                })) {
                  ;
                } else if (furns.some(frow => row.furn === frow.furn)) {
                  ;
                } else if (furns.some(frow => {
                  if (frow.by_default) {
                    row.furn = frow.furn;
                    return changed = true;
                  }
                })) {
                  ;
                } else {
                  row.furn = furns[0].furn;
                  changed = true;
                }
              }

              if (changed) {
                const contour = paper.project && paper.project.getItem({ cnstr: row.cnstr });
                if (contour) {
                  row.furn.refill_prm(contour);
                  contour.notify(contour, 'furn_changed');
                } else {
                  ox.sys.refill_prm(ox, row.cnstr);
                }
              }
            }
          });
        }
      }
    }

  });

  $p.DocCalc_order = class DocCalc_order extends $p.DocCalc_order {

    after_create() {

      const { enm, cat, current_user, DocCalc_order } = $p;

      if (!current_user) {
        return Promise.resolve(this);
      }

      const { acl_objs } = current_user;

      acl_objs.find_rows({ by_default: true, type: cat.organizations.class_name }, row => {
        this.organization = row.acl_obj;
        return false;
      });

      DocCalc_order.set_department.call(this);

      acl_objs.find_rows({ by_default: true, type: cat.partners.class_name }, row => {
        this.partner = row.acl_obj;
        return false;
      });

      this.contract = cat.contracts.by_partner_and_org(this.partner, this.organization);

      this.manager = current_user;

      this.obj_delivery_state = enm.obj_delivery_states.Черновик;

      return this.number_doc ? Promise.resolve(this) : this.new_number_doc();
    }

    before_save() {

      const {
        obj_delivery_states: { Отклонен, Отозван, Шаблон, Подтвержден, Отправлен },
        elm_types: { ОшибкаКритическая, ОшибкаИнфо }
      } = $p.enm;
      const must_be_saved = [Подтвержден, Отправлен].indexOf(this.obj_delivery_state) == -1;

      if (this.posted) {
        if (this.obj_delivery_state == Отклонен || this.obj_delivery_state == Отозван || this.obj_delivery_state == Шаблон) {
          $p.msg.show_msg && $p.msg.show_msg({
            type: 'alert-warning',
            text: 'Нельзя провести заказ со статусом<br/>"Отклонён", "Отозван" или "Шаблон"',
            title: this.presentation
          });
          return false;
        } else if (this.obj_delivery_state != Подтвержден) {
          this.obj_delivery_state = Подтвержден;
        }
      } else if (this.obj_delivery_state == Подтвержден) {
        this.obj_delivery_state = Отправлен;
      }

      if (this.obj_delivery_state == Шаблон) {
        this.department = $p.utils.blank.guid;
        this.partner = $p.utils.blank.guid;
      } else {
        if (this.department.empty()) {
          $p.msg.show_msg && $p.msg.show_msg({
            type: 'alert-warning',
            text: 'Не заполнен реквизит "офис продаж" (подразделение)',
            title: this.presentation
          });
          return false || must_be_saved;
        }
        if (this.partner.empty()) {
          $p.msg.show_msg && $p.msg.show_msg({
            type: 'alert-warning',
            text: 'Не указан контрагент (дилер)',
            title: this.presentation
          });
          return false || must_be_saved;
        }
      }

      let doc_amount = 0,
          internal = 0;
      const errors = this._data.errors = new Map();
      this.production.forEach(({ amount, amount_internal, characteristic }) => {
        doc_amount += amount;
        internal += amount_internal;
        characteristic.specification.forEach(({ nom }) => {
          if ([ОшибкаКритическая, ОшибкаИнфо].indexOf(nom.elm_type) !== -1) {
            if (!errors.has(characteristic)) {
              errors.set(characteristic, new Set());
            }
            if (!errors.has(nom.elm_type)) {
              errors.set(nom.elm_type, new Set());
            }
            errors.get(characteristic).add(nom);
            errors.get(nom.elm_type).add(nom);
          }
        });
      });
      const { rounding } = this;
      this.doc_amount = doc_amount.round(rounding);
      this.amount_internal = internal.round(rounding);
      this.amount_operation = $p.pricing.from_currency_to_currency(doc_amount, this.date, this.doc_currency).round(rounding);

      const { _obj, obj_delivery_state, category } = this;

      if (obj_delivery_state == 'Шаблон') {
        _obj.state = 'template';
      } else if (category == 'service') {
        _obj.state = 'service';
      } else if (category == 'complaints') {
        _obj.state = 'complaints';
      } else if (obj_delivery_state == 'Отправлен') {
        _obj.state = 'sent';
      } else if (obj_delivery_state == 'Отклонен') {
        _obj.state = 'declined';
      } else if (obj_delivery_state == 'Подтвержден') {
        _obj.state = 'confirmed';
      } else if (obj_delivery_state == 'Архив') {
        _obj.state = 'zarchive';
      } else {
        _obj.state = 'draft';
      }

      return this.product_rows(true).then(() => {
        return this._manager.pouch_db.query('linked', { startkey: [this.ref, 'cat.characteristics'], endkey: [this.ref, 'cat.characteristics\u0fff'] }).then(({ rows }) => {
          let res = Promise.resolve();
          let deleted = 0;
          for (const _ref10 of rows) {
            const { id } = _ref10;

            const ref = id.substr(20);
            if (this.production.find_rows({ characteristic: ref }).length) {
              continue;
            }
            deleted++;
            res = res.then(() => $p.cat.characteristics.get(ref, 'promise')).then(ox => !ox.is_new() && !ox._deleted && ox.mark_deleted(true));
          }
          return res.then(() => deleted);
        }).then(res => {
          res && this._manager.emit_async('svgs', this);
        }).catch(err => null);
      }).then(() => this);
    }

    value_change(field, type, value) {
      if (field === 'organization') {
        this.organization = value;
        if (this.contract.organization != value) {
          this.contract = $p.cat.contracts.by_partner_and_org(this.partner, value);
          this.new_number_doc();
        }
      } else if (field === 'partner' && this.contract.owner != value) {
        this.contract = $p.cat.contracts.by_partner_and_org(value, this.organization);
      }
      this._manager.emit_add_fields(this, ['contract']);
    }

    after_del_row(name) {
      name === 'production' && this.product_rows();
      return this;
    }

    unload() {
      this.production.forEach(({ characteristic }) => {
        if (!characteristic.empty() && characteristic.calc_order === this) {
          characteristic.unload();
        }
      });
      return super.unload();
    }

    get doc_currency() {
      const currency = this.contract.settlements_currency;
      return currency.empty() ? $p.job_prm.pricing.main_currency : currency;
    }

    set doc_currency(v) {}

    get rounding() {
      const { pricing } = $p.job_prm;
      if (!pricing.hasOwnProperty('rounding')) {
        const parts = this.doc_currency.parameters_russian_recipe.split(',');
        pricing.rounding = parseInt(parts[parts.length - 1]);
        if (isNaN(pricing.rounding)) {
          pricing.rounding = 2;
        }
      }
      return pricing.rounding;
    }

    get contract() {
      return this._getter('contract');
    }
    set contract(v) {
      this._setter('contract', v);
      this.vat_consider = this.contract.vat_consider;
      this.vat_included = this.contract.vat_included;
    }

    product_rows(save) {
      let res = Promise.resolve();
      this.production.forEach(({ row, characteristic }) => {
        if (!characteristic.empty() && characteristic.calc_order === this) {
          if (characteristic.product !== row || characteristic._modified || characteristic.partner !== this.partner || characteristic.obj_delivery_state !== this.obj_delivery_state || characteristic.department !== this.department) {

            characteristic.product = row;
            characteristic.obj_delivery_state = this.obj_delivery_state;
            characteristic.partner = this.partner;
            characteristic.department = this.department;

            if (!characteristic.owner.empty()) {
              if (save) {
                res = res.then(() => characteristic.save());
              } else {
                characteristic.name = characteristic.prod_name();
              }
            }
          }
        }
      });
      return res;
    }

    dispatching_totals() {
      var options = {
        reduce: true,
        limit: 10000,
        group: true,
        keys: []
      };
      this.production.forEach(({ nom, characteristic }) => {
        if (!characteristic.empty() && !nom.is_procedure && !nom.is_service && !nom.is_accessory) {
          options.keys.push([characteristic.ref, '305e374b-3aa9-11e6-bf30-82cf9717e145', 1, 0]);
        }
      });
      return $p.adapters.pouch.remote.doc.query('server/dispatching', options).then(function ({ rows }) {
        const res = {};
        rows && rows.forEach(function ({ key, value }) {
          if (value.plan) {
            value.plan = moment(value.plan).format('L');
          }
          if (value.fact) {
            value.fact = moment(value.fact).format('L');
          }
          res[key[0]] = value;
        });
        return res;
      });
    }

    print_data(attr = {}) {
      const { organization, bank_account, partner, contract, manager } = this;
      const { individual_person } = manager;
      const our_bank_account = bank_account && !bank_account.empty() ? bank_account : organization.main_bank_account;
      const get_imgs = [];
      const { cat: { contact_information_kinds, characteristics }, utils: { blank, blob_as_text, snake_ref } } = $p;

      const res = {
        АдресДоставки: this.shipping_address,
        ВалютаДокумента: this.doc_currency.presentation,
        ДатаЗаказаФорматD: moment(this.date).format('L'),
        ДатаЗаказаФорматDD: moment(this.date).format('LL'),
        ДатаТекущаяФорматD: moment().format('L'),
        ДатаТекущаяФорматDD: moment().format('LL'),
        ДоговорДатаФорматD: moment(contract.date.valueOf() == blank.date.valueOf() ? this.date : contract.date).format('L'),
        ДоговорДатаФорматDD: moment(contract.date.valueOf() == blank.date.valueOf() ? this.date : contract.date).format('LL'),
        ДоговорНомер: contract.number_doc ? contract.number_doc : this.number_doc,
        ДоговорСрокДействия: moment(contract.validity).format('L'),
        ЗаказНомер: this.number_doc,
        Контрагент: partner.presentation,
        КонтрагентОписание: partner.long_presentation,
        КонтрагентДокумент: '',
        КонтрагентКЛДолжность: '',
        КонтрагентКЛДолжностьРП: '',
        КонтрагентКЛИмя: '',
        КонтрагентКЛИмяРП: '',
        КонтрагентКЛК: '',
        КонтрагентКЛОснованиеРП: '',
        КонтрагентКЛОтчество: '',
        КонтрагентКЛОтчествоРП: '',
        КонтрагентКЛФамилия: '',
        КонтрагентКЛФамилияРП: '',
        КонтрагентИНН: partner.inn,
        КонтрагентКПП: partner.kpp,
        КонтрагентЮрФизЛицо: '',
        КратностьВзаиморасчетов: this.settlements_multiplicity,
        КурсВзаиморасчетов: this.settlements_course,
        ЛистКомплектацииГруппы: '',
        ЛистКомплектацииСтроки: '',
        Организация: organization.presentation,
        ОрганизацияГород: organization.contact_information._obj.reduce((val, row) => val || row.city, '') || 'Москва',
        ОрганизацияАдрес: organization.contact_information._obj.reduce((val, row) => {
          if (row.kind == contact_information_kinds.predefined('ЮрАдресОрганизации') && row.presentation) {
            return row.presentation;
          } else if (val) {
            return val;
          } else if (row.presentation && (row.kind == contact_information_kinds.predefined('ФактАдресОрганизации') || row.kind == contact_information_kinds.predefined('ПочтовыйАдресОрганизации'))) {
            return row.presentation;
          }
        }, ''),
        ОрганизацияТелефон: organization.contact_information._obj.reduce((val, row) => {
          if (row.kind == contact_information_kinds.predefined('ТелефонОрганизации') && row.presentation) {
            return row.presentation;
          } else if (val) {
            return val;
          } else if (row.kind == contact_information_kinds.predefined('ФаксОрганизации') && row.presentation) {
            return row.presentation;
          }
        }, ''),
        ОрганизацияБанкБИК: our_bank_account.bank.id,
        ОрганизацияБанкГород: our_bank_account.bank.city,
        ОрганизацияБанкКоррСчет: our_bank_account.bank.correspondent_account,
        ОрганизацияБанкНаименование: our_bank_account.bank.name,
        ОрганизацияБанкНомерСчета: our_bank_account.account_number,
        ОрганизацияИндивидуальныйПредприниматель: organization.individual_entrepreneur.presentation,
        ОрганизацияИНН: organization.inn,
        ОрганизацияКПП: organization.kpp,
        ОрганизацияСвидетельствоДатаВыдачи: organization.certificate_date_issue,
        ОрганизацияСвидетельствоКодОргана: organization.certificate_authority_code,
        ОрганизацияСвидетельствоНаименованиеОргана: organization.certificate_authority_name,
        ОрганизацияСвидетельствоСерияНомер: organization.certificate_series_number,
        ОрганизацияЮрФизЛицо: organization.individual_legal.presentation,
        Офис: this.department.presentation,
        ПродукцияЭскизы: {},
        Проект: this.project.presentation,
        СистемыПрофилей: this.sys_profile,
        СистемыФурнитуры: this.sys_furn,
        Сотрудник: manager.presentation,
        СотрудникКомментарий: manager.note,
        СотрудникДолжность: individual_person.Должность || 'менеджер',
        СотрудникДолжностьРП: individual_person.ДолжностьРП,
        СотрудникИмя: individual_person.Имя,
        СотрудникИмяРП: individual_person.ИмяРП,
        СотрудникОснованиеРП: individual_person.ОснованиеРП,
        СотрудникОтчество: individual_person.Отчество,
        СотрудникОтчествоРП: individual_person.ОтчествоРП,
        СотрудникФамилия: individual_person.Фамилия,
        СотрудникФамилияРП: individual_person.ФамилияРП,
        СотрудникФИО: individual_person.Фамилия + (individual_person.Имя ? ' ' + individual_person.Имя[0].toUpperCase() + '.' : '') + (individual_person.Отчество ? ' ' + individual_person.Отчество[0].toUpperCase() + '.' : ''),
        СотрудникФИОРП: individual_person.ФамилияРП + ' ' + individual_person.ИмяРП + ' ' + individual_person.ОтчествоРП,
        СуммаДокумента: this.doc_amount.toFixed(2),
        СуммаДокументаПрописью: '', //this.doc_amount.in_words(),
        СуммаДокументаБезСкидки: this.production._obj.reduce((val, row) => val + row.quantity * row.price, 0).toFixed(2),
        СуммаСкидки: this.production._obj.reduce((val, row) => val + row.discount, 0).toFixed(2),
        СуммаНДС: this.production._obj.reduce((val, row) => val + row.vat_amount, 0).toFixed(2),
        ТекстНДС: this.vat_consider ? this.vat_included ? 'В том числе НДС 18%' : 'НДС 18% (сверху)' : 'Без НДС',
        ТелефонПоАдресуДоставки: this.phone,
        СуммаВключаетНДС: contract.vat_included,
        УчитыватьНДС: contract.vat_consider,
        ВсегоНаименований: this.production.count(),
        ВсегоИзделий: 0,
        ВсегоПлощадьИзделий: 0,
        Продукция: [],
        Аксессуары: [],
        Услуги: [],
        НомерВнутр: this.number_internal,
        КлиентДилера: this.client_of_dealer,
        Комментарий: this.note
      };

      this.extra_fields.forEach(row => {
        res['Свойство' + row.property.name.replace(/\s/g, '')] = row.value.presentation || row.value;
      });

      res.МонтажДоставкаСамовывоз = !this.shipping_address ? 'Самовывоз' : 'Монтаж по адресу: ' + this.shipping_address;

      for (let key in organization._attachments) {
        if (key.indexOf('logo') != -1) {
          get_imgs.push(organization.get_attachment(key).then(blob => {
            return blob_as_text(blob, blob.type.indexOf('svg') == -1 ? 'data_url' : '');
          }).then(data_url => {
            res.ОрганизацияЛоготип = data_url;
          }).catch($p.record_log));
          break;
        }
      }

      return this.load_production().then(() => {

        let editor,
            imgs = Promise.resolve();
        const builder_props = attr.builder_props && Object.assign({}, $p.CatCharacteristics.builder_props_defaults, attr.builder_props);
        this.production.forEach(row => {
          if (!row.characteristic.empty() && !row.nom.is_procedure && !row.nom.is_service && !row.nom.is_accessory) {

            res.Продукция.push(this.row_description(row));

            res.ВсегоИзделий += row.quantity;
            res.ВсегоПлощадьИзделий += row.quantity * row.s;

            if (builder_props) {
              if (!editor) {
                editor = new $p.EditorInvisible();
              }
              imgs = imgs.then(() => {
                return row.characteristic.draw(attr, editor).then(img => {
                  res.ПродукцияЭскизы[row.characteristic.ref] = img[snake_ref(row.characteristic.ref)].imgs.l0;
                });
              });
            } else {
              if (row.characteristic.svg) {
                res.ПродукцияЭскизы[row.characteristic.ref] = row.characteristic.svg;
              }
            }
          } else if (!row.nom.is_procedure && !row.nom.is_service && row.nom.is_accessory) {
            res.Аксессуары.push(this.row_description(row));
          } else if (!row.nom.is_procedure && row.nom.is_service && !row.nom.is_accessory) {
            res.Услуги.push(this.row_description(row));
          }
        });
        res.ВсегоПлощадьИзделий = res.ВсегоПлощадьИзделий.round(3);

        return res;

        /*return imgs.then(() => {
          editor && editor.unload();
          return (get_imgs.length ? Promise.all(get_imgs) : Promise.resolve([]))
            .then(() => typeof QRCode === 'undefined' && $p.load_script('/dist/qrcodejs/qrcode.min.js', 'script'))
            .then(() => {
               const svg = document.createElement('SVG');
              svg.innerHTML = '<g />';
              const qrcode = new QRCode(svg, {
                text: 'http://www.oknosoft.ru/zd/',
                width: 100,
                height: 100,
                colorDark: '#000000',
                colorLight: '#ffffff',
                correctLevel: QRCode.CorrectLevel.H,
                useSVG: true
              });
              res.qrcode = svg.innerHTML;
               return res;
            });
        });*/
      });
    }

    row_description(row) {

      if (!(row instanceof $p.DocCalc_orderProductionRow) && row.characteristic) {
        this.production.find_rows({ characteristic: row.characteristic }, prow => {
          row = prow;
          return false;
        });
      }
      const { characteristic, nom } = row;
      const res = {
        ref: characteristic.ref,
        НомерСтроки: row.row,
        Количество: row.quantity,
        Ед: row.unit.name || 'шт',
        Цвет: characteristic.clr.name,
        Размеры: row.len + 'x' + row.width + ', ' + row.s + 'м²',
        Площадь: row.s,
        Длина: row.len,
        Ширина: row.width,
        ВсегоПлощадь: row.s * row.quantity,
        Примечание: row.note,
        Комментарий: row.note,
        СистемаПрофилей: characteristic.sys.presentation,
        Номенклатура: nom.name_full || nom.name,
        Характеристика: characteristic.name,
        Заполнения: '',
        Фурнитура: '',
        Параметры: [],
        Цена: row.price,
        ЦенаВнутр: row.price_internal,
        СкидкаПроцент: row.discount_percent,
        СкидкаПроцентВнутр: row.discount_percent_internal,
        Скидка: row.discount.round(2),
        Сумма: row.amount.round(2),
        СуммаВнутр: row.amount_internal.round(2)
      };

      characteristic.glasses.forEach(row => {
        const { name } = row.nom;
        if (res.Заполнения.indexOf(name) == -1) {
          if (res.Заполнения) {
            res.Заполнения += ', ';
          }
          res.Заполнения += name;
        }
      });

      characteristic.constructions.forEach(row => {
        const { name } = row.furn;
        if (name && res.Фурнитура.indexOf(name) == -1) {
          if (res.Фурнитура) {
            res.Фурнитура += ', ';
          }
          res.Фурнитура += name;
        }
      });

      const params = new Map();
      characteristic.params.forEach(row => {
        if (row.param.include_to_description) {
          params.set(row.param, row.value);
        }
      });
      for (let [param, value] of params) {
        res.Параметры.push({
          param: param.presentation,
          value: value.presentation || value
        });
      }

      return res;
    }

    fill_plan() {

      this.planning.clear();

      const { wsql, aes, current_user: { suffix }, msg } = $p;
      const url = (wsql.get_user_param('windowbuilder_planning', 'string') || '/plan/') + `doc.calc_order/${this.ref}`;

      const post_data = this._obj._clone();
      post_data.characteristics = {};

      this.load_production().then(prod => {
        for (const cx of prod) {
          post_data.characteristics[cx.ref] = cx._obj._clone();
        }
      }).then(() => {
        const headers = new Headers();
        headers.append('Authorization', 'Basic ' + btoa(unescape(encodeURIComponent(wsql.get_user_param('user_name') + ':' + aes.Ctr.decrypt(wsql.get_user_param('user_pwd'))))));
        if (suffix) {
          headers.append('suffix', suffix);
        }
        fetch(url, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(post_data)
        }).then(response => response.json()).then(json => {
          if (json.rows) {
            this.planning.load(json.rows);
          } else {
            console.log(json);
          }
        }).catch(err => {
          msg.show_msg({
            type: "alert-warning",
            text: err.message,
            title: "Сервис планирования"
          });
          $p.record_log(err);
        });
      });
    }

    get is_read_only() {
      const { obj_delivery_state, posted, _data } = this;
      const { Черновик, Шаблон, Отозван, Отправлен } = $p.enm.obj_delivery_states;
      let ro = false;
      if (obj_delivery_state == Шаблон) {
        ro = !$p.current_user.role_available('ИзменениеТехнологическойНСИ');
      } else if (posted || _data._deleted) {
        ro = !$p.current_user.role_available('СогласованиеРасчетовЗаказов');
      } else if (obj_delivery_state == Отправлен) {
        ro = !_data._saving_trans && !$p.current_user.role_available('СогласованиеРасчетовЗаказов');
      } else if (!obj_delivery_state.empty()) {
        ro = obj_delivery_state != Черновик && obj_delivery_state != Отозван && !$p.current_user.role_available('СогласованиеРасчетовЗаказов');
      }
      return ro;
    }

    load_production(forse) {
      const prod = [];
      const { cat: { characteristics }, enm: { obj_delivery_states } } = $p;
      this.production.forEach(({ nom, characteristic }) => {
        if (!characteristic.empty() && (forse || characteristic.is_new())) {
          prod.push(characteristic.ref);
        }
      });
      return characteristics.adapter.load_array(characteristics, prod, false, this.obj_delivery_state == obj_delivery_states.Шаблон && characteristics.adapter.local.templates).then(() => {
        prod.length = 0;
        this.production.forEach(({ nom, characteristic }) => {
          if (!characteristic.empty()) {
            if (!nom.is_procedure && !nom.is_accessory || characteristic.specification.count() || characteristic.constructions.count() || characteristic.coordinates.count()) {
              prod.push(characteristic);
            }
          }
        });
        return prod;
      });
    }

    characteristic_saved(scheme, sattr) {
      const { ox, _dp } = scheme;
      const row = ox.calc_order_row;

      if (!row || ox.calc_order != this) {
        return;
      }

      row._data._loading = true;
      row.nom = ox.owner;
      row.note = _dp.note;
      row.quantity = _dp.quantity || 1;
      row.len = ox.x;
      row.width = ox.y;
      row.s = ox.s;
      row.discount_percent = _dp.discount_percent;
      row.discount_percent_internal = _dp.discount_percent_internal;
      if (row.unit.owner != row.nom) {
        row.unit = row.nom.storage_unit;
      }
      row._data._loading = false;
    }

    create_product_row({ row_spec, elm, len_angl, params, create, grid }) {

      const row = row_spec instanceof $p.DpBuyers_orderProductionRow && !row_spec.characteristic.empty() && row_spec.characteristic.calc_order === this ? row_spec.characteristic.calc_order_row : this.production.add({
        qty: 1,
        quantity: 1,
        discount_percent_internal: $p.wsql.get_user_param('discount_percent_internal', 'number')
      });

      if (grid) {
        this.production.sync_grid(grid);
        grid.selectRowById(row.row);
      }

      if (!create) {
        return row;
      }

      const mgr = $p.cat.characteristics;
      let cx;
      function fill_cx(ox) {
        if (ox._deleted) {
          return;
        }
        for (let ts in mgr.metadata().tabular_sections) {
          ox[ts].clear();
        }
        ox.leading_elm = 0;
        ox.leading_product = '';
        cx = Promise.resolve(ox);
        return false;
      }
      if (!row.characteristic.empty() && !row.characteristic._deleted) {
        fill_cx(row.characteristic);
      }

      return (cx || mgr.create({
        ref: $p.utils.generate_guid(),
        calc_order: this,
        product: row.row
      }, true)).then(ox => {
        if (row_spec instanceof $p.DpBuyers_orderProductionRow) {

          if (params) {

            const used_params = new Set();
            row_spec.inset.used_params.forEach(param => {
              !param.is_calculated && used_params.add(param);
            });
            row_spec.inset.specification.forEach(({ nom }) => {
              if (nom instanceof $p.CatInserts) {
                nom.used_params.forEach(param => {
                  !param.is_calculated && used_params.add(param);
                });
              }
            });

            params.find_rows({ elm: row_spec.row }, prow => {
              if (used_params.has(prow.param)) {
                ox.params.add(prow, true).inset = row_spec.inset;
              }
            });
          }

          elm.project = { ox };
          elm.fake_origin = row_spec.inset;

          ox.owner = row_spec.inset.nom(elm);
          ox.origin = row_spec.inset;
          ox.x = row_spec.len;
          ox.y = row_spec.height;
          ox.z = row_spec.depth;
          ox.s = row_spec.s || row_spec.len * row_spec.height / 1000000;
          ox.clr = row_spec.clr;
          ox.note = row_spec.note;
        }

        Object.assign(row._obj, {
          characteristic: ox.ref,
          nom: ox.owner.ref,
          unit: ox.owner.storage_unit.ref,
          len: ox.x,
          width: ox.y,
          s: ox.s,
          qty: row_spec && row_spec.quantity || 1,
          quantity: row_spec && row_spec.quantity || 1,
          note: ox.note
        });

        ox.name = ox.prod_name();

        return this.is_new() && !$p.wsql.alasql.utils.isNode ? this.save().then(() => row) : row;
      });
    }

    process_add_product_list(dp) {

      let res = Promise.resolve();
      const ax = [];

      for (let i = 0; i < dp.production.count(); i++) {
        const row_spec = dp.production.get(i);
        let row_prod;

        if (row_spec.inset.empty()) {
          row_prod = this.production.add(row_spec);
          row_prod.unit = row_prod.nom.storage_unit;
          if (!row_spec.clr.empty()) {
            $p.cat.characteristics.find_rows({ owner: row_spec.nom }, ox => {
              if (ox.clr == row_spec.clr) {
                row_prod.characteristic = ox;
                return false;
              }
            });
          }
          res = res.then(() => row_prod);
        } else {
          const len_angl = new $p.DocCalc_order.FakeLenAngl(row_spec);
          const elm = new $p.DocCalc_order.FakeElm(row_spec);
          res = res.then(() => this.create_product_row({ row_spec, elm, len_angl, params: dp.product_params, create: true })).then(row_prod => {
            row_spec.inset.calculate_spec({ elm, len_angl, ox: row_prod.characteristic });
            row_prod.characteristic.specification.group_by('nom,clr,characteristic,len,width,s,elm,alp1,alp2,origin,dop', 'qty,totqty,totqty1');
            return row_prod;
          });
        }

        res = res.then(row_prod => {
          return Promise.all($p.spec_building.specification_adjustment({
            calc_order_row: row_prod,
            spec: row_prod.characteristic.specification,
            save: true
          }, true)).then(tx => [].push.apply(ax, tx));
        });
      }

      return res.then(() => ax);
    }

    recalc(attr = {}, editor) {

      const remove = !editor;
      if (remove) {
        editor = new $p.EditorInvisible();
      }
      const project = editor.create_scheme();
      let tmp = Promise.resolve();

      return this.load_production().then(prod => {
        this.production.forEach(row => {
          const { characteristic } = row;
          if (characteristic.empty() || characteristic.calc_order !== this) {
            row.value_change('quantity', '', row.quantity);
          } else if (characteristic.coordinates.count()) {
            tmp = tmp.then(() => {
              return project.load(characteristic, true).then(() => {
                project.save_coordinates({ save: true, svg: false });
              });
            });
          } else if (characteristic.leading_product.calc_order === this) {
            return;
          } else {
            if (!characteristic.origin.empty() && !characteristic.origin.slave) {
              characteristic.specification.clear();
              const len_angl = new $p.DocCalc_order.FakeLenAngl({ len: row.len, inset: characteristic.origin });
              const elm = new $p.DocCalc_order.FakeElm(row);
              characteristic.origin.calculate_spec({ elm, len_angl, ox: characteristic });
              tmp = tmp.then(() => {
                return characteristic.save().then(() => {
                  row.value_change('quantity', '', row.quantity);
                });
              });
            } else {
              row.value_change('quantity', '', row.quantity);
            }
          }
        });
        return tmp;
      }).then(() => {
        project.ox = '';
        if (remove) {
          editor.unload();
        } else {
          project.remove();
        }
        return this;
      });
    }

    draw(attr = {}, editor) {

      const remove = !editor;
      if (remove) {
        editor = new $p.EditorInvisible();
      }
      const project = editor.create_scheme();

      attr.res = { number_doc: this.number_doc };

      let tmp = Promise.resolve();

      return this.load_production().then(prod => {
        for (let ox of prod) {
          if (ox.coordinates.count()) {
            tmp = tmp.then(() => ox.draw(attr, editor));
          }
        }
        return tmp;
      });
    }

    static set_department() {
      const department = $p.wsql.get_user_param('current_department');
      if (department) {
        this.department = department;
      }
      const { current_user, cat } = $p;
      if (this.department.empty() || this.department.is_new()) {
        current_user.acl_objs && current_user.acl_objs.find_rows({ by_default: true, type: cat.divisions.class_name }, row => {
          if (this.department != row.acl_obj) {
            this.department = row.acl_obj;
          }
          return false;
        });
      }
    }

  };

  $p.DocCalc_order.FakeElm = class FakeElm {

    constructor(row_spec) {
      this.row_spec = row_spec;
    }

    get elm() {
      return 0;
    }

    get angle_hor() {
      return 0;
    }

    get _row() {
      return this;
    }

    get clr() {
      return this.row_spec.clr;
    }

    get len() {
      return this.row_spec.len;
    }

    get height() {
      const { height, width } = this.row_spec;
      return height === undefined ? width : height;
    }

    get depth() {
      return this.row_spec.depth || 0;
    }

    get s() {
      return this.row_spec.s;
    }

    get perimeter() {
      const { len, height, width } = this.row_spec;
      return [{ len, angle: 0 }, { len: height === undefined ? width : height, angle: 90 }];
    }

    get x1() {
      return 0;
    }

    get y1() {
      return 0;
    }

    get x2() {
      return this.height;
    }

    get y2() {
      return this.len;
    }

  };

  $p.DocCalc_order.FakeLenAngl = class FakeLenAngl {

    constructor({ len, inset }) {
      this.len = len;
      this.origin = inset;
    }

    get angle() {
      return 0;
    }

    get alp1() {
      return 0;
    }

    get alp2() {
      return 0;
    }

    get cnstr() {
      return 0;
    }

  };

  $p.DocCalc_orderProductionRow = class DocCalc_orderProductionRow extends $p.DocCalc_orderProductionRow {

    value_change(field, type, value, no_extra_charge) {

      let { _obj, _owner, nom, characteristic, unit } = this;
      let recalc;
      const { rounding, _slave_recalc } = _owner._owner;
      const rfield = $p.DocCalc_orderProductionRow.rfields[field];

      if (rfield) {

        _obj[field] = rfield === 'n' ? parseFloat(value) : '' + value;

        nom = this.nom;
        characteristic = this.characteristic;

        if (!characteristic.empty()) {
          if (!characteristic.calc_order.empty() && characteristic.owner != nom) {
            characteristic.owner = nom;
          } else if (characteristic.owner != nom) {
            _obj.characteristic = $p.utils.blank.guid;
            characteristic = this.characteristic;
          }
        }

        if (unit.owner != nom) {
          _obj.unit = nom.storage_unit.ref;
        }

        if (!characteristic.origin.empty() && characteristic.origin.slave) {
          characteristic.specification.clear();
          characteristic.x = this.len;
          characteristic.y = this.width;
          characteristic.s = this.s || this.len * this.width / 1000000;
          const len_angl = new $p.DocCalc_order.FakeLenAngl({ len: this.len, inset: characteristic.origin });
          const elm = new $p.DocCalc_order.FakeElm(this);
          characteristic.origin.calculate_spec({ elm, len_angl, ox: characteristic });
          recalc = true;
        }

        const fake_prm = {
          calc_order_row: this,
          spec: characteristic.specification
        };
        const { price } = _obj;
        $p.pricing.price_type(fake_prm);
        $p.pricing.calc_first_cost(fake_prm);
        $p.pricing.calc_amount(fake_prm);
        if (price && !_obj.price) {
          _obj.price = price;
          recalc = true;
        }
      }

      if ($p.DocCalc_orderProductionRow.pfields.indexOf(field) != -1 || recalc) {

        if (!recalc) {
          _obj[field] = parseFloat(value);
        }

        isNaN(_obj.price) && (_obj.price = 0);
        isNaN(_obj.price_internal) && (_obj.price_internal = 0);
        isNaN(_obj.discount_percent) && (_obj.discount_percent = 0);
        isNaN(_obj.discount_percent_internal) && (_obj.discount_percent_internal = 0);

        _obj.amount = (_obj.price * ((100 - _obj.discount_percent) / 100) * _obj.quantity).round(rounding);

        if (!no_extra_charge) {
          const prm = { calc_order_row: this };
          let extra_charge = $p.wsql.get_user_param('surcharge_internal', 'number');

          if (!$p.current_user.partners_uids.length || !extra_charge) {
            $p.pricing.price_type(prm);
            extra_charge = prm.price_type.extra_charge_external;
          }

          if (field != 'price_internal' && extra_charge && _obj.price) {
            _obj.price_internal = (_obj.price * (100 - _obj.discount_percent) / 100 * (100 + extra_charge) / 100).round(rounding);
          }
        }

        _obj.amount_internal = (_obj.price_internal * ((100 - _obj.discount_percent_internal) / 100) * _obj.quantity).round(rounding);

        const doc = _owner._owner;
        if (doc.vat_consider) {
          const { НДС18, НДС18_118, НДС10, НДС10_110, НДС20, НДС20_120, НДС0, БезНДС } = $p.enm.vat_rates;
          _obj.vat_rate = (nom.vat_rate.empty() ? НДС18 : nom.vat_rate).ref;
          switch (this.vat_rate) {
            case НДС18:
            case НДС18_118:
              _obj.vat_amount = (_obj.amount * 18 / 118).round(2);
              break;
            case НДС10:
            case НДС10_110:
              _obj.vat_amount = (_obj.amount * 10 / 110).round(2);
              break;
            case НДС20:
            case НДС20_120:
              _obj.vat_amount = (_obj.amount * 20 / 120).round(2);
              break;
            case НДС0:
            case БезНДС:
            case '_':
            case '':
              _obj.vat_amount = 0;
              break;
          }
          if (!doc.vat_included) {
            _obj.amount = (_obj.amount + _obj.vat_amount).round(2);
          }
        } else {
          _obj.vat_rate = '';
          _obj.vat_amount = 0;
        }

        const amount = _owner.aggregate([], ['amount', 'amount_internal']);
        amount.doc_amount = amount.amount.round(rounding);
        amount.amount_internal = amount.amount_internal.round(rounding);
        delete amount.amount;
        Object.assign(doc, amount);
        doc._manager.emit_async('update', doc, amount);

        if (!_slave_recalc) {
          _owner._owner._slave_recalc = true;
          _owner.forEach(row => {
            if (row !== this && !row.characteristic.origin.empty() && row.characteristic.origin.slave) {
              row.value_change('quantity', 'update', row.quantity, no_extra_charge);
            }
          });
          _owner._owner._slave_recalc = false;
        }

        return false;
      }
    }

  };

  $p.DocCalc_orderProductionRow.rfields = {
    nom: 's',
    characteristic: 's',
    quantity: 'n',
    len: 'n',
    width: 'n',
    s: 'n'
  };

  $p.DocCalc_orderProductionRow.pfields = 'price_internal,quantity,discount_percent_internal';

  return EditorInvisible;
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Отправляет запрос
 *
 * @module requester
 *
 * Created by Rostislav Poddorogin on 06.01.2019.
 */

const fetch = __webpack_require__(2);

module.exports = function sendRequest({ url, headers, body }) {
  // проверяем входные данные
  if (!url || typeof url !== 'string' || !headers || typeof headers !== 'object') {
    return Promise.reject({
      error: true,
      message: 'bad input request parameters'
    });
  }

  return fetch(url, {
    method: "POST",
    headers,
    body
  }).then(async res => {
    const { status, statusText } = res;
    return {
      status,
      statusText,
      body: await res.text()
    };
  });
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Отправляет почту
 *
 * @module mailer
 *
 * Created by Evgeniy Malyarov on 20.08.2018,
 * modified by Rostislav Poddorogin on 06.01.2019.
 */

const nodemailer = __webpack_require__(21);

const { MAILUSER, MAILPWD } = process.env;

// create reusable transporter object using the default SMTP transport
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: MAILUSER || 'support@oknosoft.ru',
    pass: MAILPWD || 'xxx'
  }
});

// setup email data with unicode symbols
const mailOptions = {
  from: MAILUSER || 'support@oknosoft.ru', // sender address
  to: 'info@oknosoft.ru', // list of receivers
  cc: '', // list of receivers
  subject: 'wb-exchange', // Subject line
  text: 'Hello world?', // plain text body
  html: '<b>Hello world?</b>' // html body
};

module.exports = function sendMail({ from, to, cc, subject, text, html }) {
  const options = Object.assign({}, mailOptions, { from, to, cc, subject, text, html });
  return transporter.sendMail(options);
};

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("nodemailer");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("koa");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("@koa/cors");

/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map